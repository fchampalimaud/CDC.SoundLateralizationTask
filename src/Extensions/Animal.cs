//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Animal
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FixationTime
    {
    
        private TimeConstrains _optoOnsetTime = new TimeConstrains();
    
        private TimeConstrains _soundOnsetTime = new TimeConstrains();
    
        public FixationTime()
        {
        }
    
        protected FixationTime(FixationTime other)
        {
            _optoOnsetTime = other._optoOnsetTime;
            _soundOnsetTime = other._soundOnsetTime;
        }
    
        /// <summary>
        /// Contains parameters related to the Optogenetics Onset Time part of the Fixation Time. The units of each of the parameters is milliseconds.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("opto_onset_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="opto_onset_time")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the Optogenetics Onset Time part of the Fixation T" +
            "ime. The units of each of the parameters is milliseconds.")]
        public TimeConstrains OptoOnsetTime
        {
            get
            {
                return _optoOnsetTime;
            }
            set
            {
                _optoOnsetTime = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the Sound Onset Time part of the Fixation Time. The units of each of the parameters is milliseconds.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sound_onset_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sound_onset_time")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the Sound Onset Time part of the Fixation Time. Th" +
            "e units of each of the parameters is milliseconds.")]
        public TimeConstrains SoundOnsetTime
        {
            get
            {
                return _soundOnsetTime;
            }
            set
            {
                _soundOnsetTime = value;
            }
        }
    
        public System.IObservable<FixationTime> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FixationTime(this)));
        }
    
        public System.IObservable<FixationTime> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FixationTime(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("opto_onset_time = " + _optoOnsetTime + ", ");
            stringBuilder.Append("sound_onset_time = " + _soundOnsetTime);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Optogenetics
    {
    
        private bool _useOpto;
    
        private int _voltage;
    
        private double _duration;
    
        private bool _usePulses;
    
        private double _rampTime;
    
        private double _frequency;
    
        private double _pulseDuration;
    
        private bool _useRt;
    
        public Optogenetics()
        {
        }
    
        protected Optogenetics(Optogenetics other)
        {
            _useOpto = other._useOpto;
            _voltage = other._voltage;
            _duration = other._duration;
            _usePulses = other._usePulses;
            _rampTime = other._rampTime;
            _frequency = other._frequency;
            _pulseDuration = other._pulseDuration;
            _useRt = other._useRt;
        }
    
        /// <summary>
        /// Indicates whether optogenetics is used or not.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_opto", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_opto")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether optogenetics is used or not.")]
        public bool UseOpto
        {
            get
            {
                return _useOpto;
            }
            set
            {
                _useOpto = value;
            }
        }
    
        /// <summary>
        /// The voltage to use in the TTL signal.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("voltage", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="voltage")]
        [System.ComponentModel.DescriptionAttribute("The voltage to use in the TTL signal.")]
        public int Voltage
        {
            get
            {
                return _voltage;
            }
            set
            {
                _voltage = value;
            }
        }
    
        /// <summary>
        /// The duration of the optogenetics stimulation/inhibition protocol (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="duration")]
        [System.ComponentModel.DescriptionAttribute("The duration of the optogenetics stimulation/inhibition protocol (s).")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the optogenetics protocol uses pulses of light (true) or a continuous emission (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_pulses", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_pulses")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the optogenetics protocol uses pulses of light (true) or a cont" +
            "inuous emission (false).")]
        public bool UsePulses
        {
            get
            {
                return _usePulses;
            }
            set
            {
                _usePulses = value;
            }
        }
    
        /// <summary>
        /// The duration of the ramp of the optogenetics protocol (ms). It only works when use_pulses is false.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ramp_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ramp_time")]
        [System.ComponentModel.DescriptionAttribute("The duration of the ramp of the optogenetics protocol (ms). It only works when us" +
            "e_pulses is false.")]
        public double RampTime
        {
            get
            {
                return _rampTime;
            }
            set
            {
                _rampTime = value;
            }
        }
    
        /// <summary>
        /// The frequency of the pulses (Hz). It only works when use_pulses is true.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frequency", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frequency")]
        [System.ComponentModel.DescriptionAttribute("The frequency of the pulses (Hz). It only works when use_pulses is true.")]
        public double Frequency
        {
            get
            {
                return _frequency;
            }
            set
            {
                _frequency = value;
            }
        }
    
        /// <summary>
        /// The duration of a single pulse (ms). It only works when use_pulses is true.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("pulse_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pulse_duration")]
        [System.ComponentModel.DescriptionAttribute("The duration of a single pulse (ms). It only works when use_pulses is true.")]
        public double PulseDuration
        {
            get
            {
                return _pulseDuration;
            }
            set
            {
                _pulseDuration = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the optogenetics stimulation/inhibition should stop when the animal leaves the poke (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_rt", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_rt")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the optogenetics stimulation/inhibition should stop when the an" +
            "imal leaves the poke (true) or not (false).")]
        public bool UseRt
        {
            get
            {
                return _useRt;
            }
            set
            {
                _useRt = value;
            }
        }
    
        public System.IObservable<Optogenetics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Optogenetics(this)));
        }
    
        public System.IObservable<Optogenetics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Optogenetics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("use_opto = " + _useOpto + ", ");
            stringBuilder.Append("voltage = " + _voltage + ", ");
            stringBuilder.Append("duration = " + _duration + ", ");
            stringBuilder.Append("use_pulses = " + _usePulses + ", ");
            stringBuilder.Append("ramp_time = " + _rampTime + ", ");
            stringBuilder.Append("frequency = " + _frequency + ", ");
            stringBuilder.Append("pulse_duration = " + _pulseDuration + ", ");
            stringBuilder.Append("use_rt = " + _useRt);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Session
    {
    
        private int _number;
    
        private System.TimeSpan _duration;
    
        private int _type;
    
        private int _setupId;
    
        private int _startingTrialNumber;
    
        private int _startingBlockNumber;
    
        private int _startingTrainingLevel;
    
        private int _lastTrainingLevel;
    
        public Session()
        {
        }
    
        protected Session(Session other)
        {
            _number = other._number;
            _duration = other._duration;
            _type = other._type;
            _setupId = other._setupId;
            _startingTrialNumber = other._startingTrialNumber;
            _startingBlockNumber = other._startingBlockNumber;
            _startingTrainingLevel = other._startingTrainingLevel;
            _lastTrainingLevel = other._lastTrainingLevel;
        }
    
        /// <summary>
        /// The number of the current session.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number")]
        [System.ComponentModel.DescriptionAttribute("The number of the current session.")]
        public int Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
    
        /// <summary>
        /// The duration of the session (in the hh:mm:ss format).
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="duration")]
        [System.ComponentModel.DescriptionAttribute("The duration of the session (in the hh:mm:ss format).")]
        public System.TimeSpan Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// The number of the session type.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="type")]
        [System.ComponentModel.DescriptionAttribute("The number of the session type.")]
        public int Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    
        /// <summary>
        /// The ID number of the setup where the animal will perform the session.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("setup_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="setup_id")]
        [System.ComponentModel.DescriptionAttribute("The ID number of the setup where the animal will perform the session.")]
        public int SetupId
        {
            get
            {
                return _setupId;
            }
            set
            {
                _setupId = value;
            }
        }
    
        /// <summary>
        /// The number of the first trial of the session.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("starting_trial_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="starting_trial_number")]
        [System.ComponentModel.DescriptionAttribute("The number of the first trial of the session.")]
        public int StartingTrialNumber
        {
            get
            {
                return _startingTrialNumber;
            }
            set
            {
                _startingTrialNumber = value;
            }
        }
    
        /// <summary>
        /// The number of the first block of the session.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("starting_block_number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="starting_block_number")]
        [System.ComponentModel.DescriptionAttribute("The number of the first block of the session.")]
        public int StartingBlockNumber
        {
            get
            {
                return _startingBlockNumber;
            }
            set
            {
                _startingBlockNumber = value;
            }
        }
    
        /// <summary>
        /// The training level the animal will start in the current session.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("starting_training_level", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="starting_training_level")]
        [System.ComponentModel.DescriptionAttribute("The training level the animal will start in the current session.")]
        public int StartingTrainingLevel
        {
            get
            {
                return _startingTrainingLevel;
            }
            set
            {
                _startingTrainingLevel = value;
            }
        }
    
        /// <summary>
        /// The last training level the animal is allowed to progress to in the current session.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("last_training_level", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="last_training_level")]
        [System.ComponentModel.DescriptionAttribute("The last training level the animal is allowed to progress to in the current sessi" +
            "on.")]
        public int LastTrainingLevel
        {
            get
            {
                return _lastTrainingLevel;
            }
            set
            {
                _lastTrainingLevel = value;
            }
        }
    
        public System.IObservable<Session> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Session(this)));
        }
    
        public System.IObservable<Session> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Session(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("number = " + _number + ", ");
            stringBuilder.Append("duration = " + _duration + ", ");
            stringBuilder.Append("type = " + _type + ", ");
            stringBuilder.Append("setup_id = " + _setupId + ", ");
            stringBuilder.Append("starting_trial_number = " + _startingTrialNumber + ", ");
            stringBuilder.Append("starting_block_number = " + _startingBlockNumber + ", ");
            stringBuilder.Append("starting_training_level = " + _startingTrainingLevel + ", ");
            stringBuilder.Append("last_training_level = " + _lastTrainingLevel);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Sound
    {
    
        private double _fixedAbl;
    
        private System.Collections.Generic.List<double> _ablList = new System.Collections.Generic.List<double>();
    
        private bool _cycleIld;
    
        public Sound()
        {
        }
    
        protected Sound(Sound other)
        {
            _fixedAbl = other._fixedAbl;
            _ablList = other._ablList;
            _cycleIld = other._cycleIld;
        }
    
        /// <summary>
        /// The ABL value to use when use_fixed_abl from the training.json file is true (dB).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fixed_abl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixed_abl")]
        [System.ComponentModel.DescriptionAttribute("The ABL value to use when use_fixed_abl from the training.json file is true (dB)." +
            "")]
        public double FixedAbl
        {
            get
            {
                return _fixedAbl;
            }
            set
            {
                _fixedAbl = value;
            }
        }
    
        /// <summary>
        /// The list of ABL values to be used in the task (dB SPL).
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abl_list", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abl_list")]
        [System.ComponentModel.DescriptionAttribute("The list of ABL values to be used in the task (dB SPL).")]
        public System.Collections.Generic.List<double> AblList
        {
            get
            {
                return _ablList;
            }
            set
            {
                _ablList = value;
            }
        }
    
        /// <summary>
        /// If true, the ILD array is shuffled and the ILD is picked by just following the new array order; when the end of the array is reached, the array is shuffled again and the procedure is repeated. Otherwise, an ILD value is randomly picked every trial from the array of ILDs.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("cycle_ild", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cycle_ild")]
        [System.ComponentModel.DescriptionAttribute(@"If true, the ILD array is shuffled and the ILD is picked by just following the new array order; when the end of the array is reached, the array is shuffled again and the procedure is repeated. Otherwise, an ILD value is randomly picked every trial from the array of ILDs.")]
        public bool CycleIld
        {
            get
            {
                return _cycleIld;
            }
            set
            {
                _cycleIld = value;
            }
        }
    
        public System.IObservable<Sound> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Sound(this)));
        }
    
        public System.IObservable<Sound> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Sound(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("fixed_abl = " + _fixedAbl + ", ");
            stringBuilder.Append("abl_list = " + _ablList + ", ");
            stringBuilder.Append("cycle_ild = " + _cycleIld);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TimeConstrains
    {
    
        private double _minValue;
    
        private double _delta;
    
        private double _target;
    
        public TimeConstrains()
        {
        }
    
        protected TimeConstrains(TimeConstrains other)
        {
            _minValue = other._minValue;
            _delta = other._delta;
            _target = other._target;
        }
    
        /// <summary>
        /// The initial base value.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min_value", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="min_value")]
        [System.ComponentModel.DescriptionAttribute("The initial base value.")]
        public double MinValue
        {
            get
            {
                return _minValue;
            }
            set
            {
                _minValue = value;
            }
        }
    
        /// <summary>
        /// The increment to the base value every trial a certain condition is met until the target value is reached.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("delta", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="delta")]
        [System.ComponentModel.DescriptionAttribute("The increment to the base value every trial a certain condition is met until the " +
            "target value is reached.")]
        public double Delta
        {
            get
            {
                return _delta;
            }
            set
            {
                _delta = value;
            }
        }
    
        /// <summary>
        /// The target value.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="target")]
        [System.ComponentModel.DescriptionAttribute("The target value.")]
        public double Target
        {
            get
            {
                return _target;
            }
            set
            {
                _target = value;
            }
        }
    
        public System.IObservable<TimeConstrains> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TimeConstrains(this)));
        }
    
        public System.IObservable<TimeConstrains> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TimeConstrains(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("min_value = " + _minValue + ", ");
            stringBuilder.Append("delta = " + _delta + ", ");
            stringBuilder.Append("target = " + _target);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Animal
    {
    
        private int _animalId;
    
        private Session _session = new Session();
    
        private Sound _sound = new Sound();
    
        private FixationTime _fixationTime = new FixationTime();
    
        private TimeConstrains _reactionTime = new TimeConstrains();
    
        private double _maxReactionTime;
    
        private double _minMovementTime;
    
        private TimeConstrains _lnpTime = new TimeConstrains();
    
        private double _baseReward;
    
        private Optogenetics _optogenetics = new Optogenetics();
    
        private bool _autobiasCorrection;
    
        public Animal()
        {
        }
    
        protected Animal(Animal other)
        {
            _animalId = other._animalId;
            _session = other._session;
            _sound = other._sound;
            _fixationTime = other._fixationTime;
            _reactionTime = other._reactionTime;
            _maxReactionTime = other._maxReactionTime;
            _minMovementTime = other._minMovementTime;
            _lnpTime = other._lnpTime;
            _baseReward = other._baseReward;
            _optogenetics = other._optogenetics;
            _autobiasCorrection = other._autobiasCorrection;
        }
    
        /// <summary>
        /// The ID number of the animal.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_id")]
        [System.ComponentModel.DescriptionAttribute("The ID number of the animal.")]
        public int AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        /// <summary>
        /// Contains the session-related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session")]
        [System.ComponentModel.DescriptionAttribute("Contains the session-related parameters.")]
        public Session Session
        {
            get
            {
                return _session;
            }
            set
            {
                _session = value;
            }
        }
    
        /// <summary>
        /// Contains the sound-related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sound", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sound")]
        [System.ComponentModel.DescriptionAttribute("Contains the sound-related parameters.")]
        public Sound Sound
        {
            get
            {
                return _sound;
            }
            set
            {
                _sound = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the fixation time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fixation_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixation_time")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the fixation time.")]
        public FixationTime FixationTime
        {
            get
            {
                return _fixationTime;
            }
            set
            {
                _fixationTime = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the reaction time. The units of each of the parameters is seconds.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reaction_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reaction_time")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the reaction time. The units of each of the parame" +
            "ters is seconds.")]
        public TimeConstrains ReactionTime
        {
            get
            {
                return _reactionTime;
            }
            set
            {
                _reactionTime = value;
            }
        }
    
        /// <summary>
        /// The maximum allowed reaction time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_reaction_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max_reaction_time")]
        [System.ComponentModel.DescriptionAttribute("The maximum allowed reaction time (s).")]
        public double MaxReactionTime
        {
            get
            {
                return _maxReactionTime;
            }
            set
            {
                _maxReactionTime = value;
            }
        }
    
        /// <summary>
        /// The minimum allowed movement time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min_movement_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="min_movement_time")]
        [System.ComponentModel.DescriptionAttribute("The minimum allowed movement time (s).")]
        public double MinMovementTime
        {
            get
            {
                return _minMovementTime;
            }
            set
            {
                _minMovementTime = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the LNP (Lateral Nose Poke) time. The units of each of the parameters is seconds.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lnp_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lnp_time")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the LNP (Lateral Nose Poke) time. The units of eac" +
            "h of the parameters is seconds.")]
        public TimeConstrains LnpTime
        {
            get
            {
                return _lnpTime;
            }
            set
            {
                _lnpTime = value;
            }
        }
    
        /// <summary>
        /// The amount of reward delivered to the animal (uL).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("base_reward", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="base_reward")]
        [System.ComponentModel.DescriptionAttribute("The amount of reward delivered to the animal (uL).")]
        public double BaseReward
        {
            get
            {
                return _baseReward;
            }
            set
            {
                _baseReward = value;
            }
        }
    
        /// <summary>
        /// Contains the optogenetics-related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("optogenetics", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="optogenetics")]
        [System.ComponentModel.DescriptionAttribute("Contains the optogenetics-related parameters.")]
        public Optogenetics Optogenetics
        {
            get
            {
                return _optogenetics;
            }
            set
            {
                _optogenetics = value;
            }
        }
    
        /// <summary>
        /// Indicates whether autobias correction should be applied or not.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("autobias_correction", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="autobias_correction")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether autobias correction should be applied or not.")]
        public bool AutobiasCorrection
        {
            get
            {
                return _autobiasCorrection;
            }
            set
            {
                _autobiasCorrection = value;
            }
        }
    
        public System.IObservable<Animal> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Animal(this)));
        }
    
        public System.IObservable<Animal> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Animal(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animal_id = " + _animalId + ", ");
            stringBuilder.Append("session = " + _session + ", ");
            stringBuilder.Append("sound = " + _sound + ", ");
            stringBuilder.Append("fixation_time = " + _fixationTime + ", ");
            stringBuilder.Append("reaction_time = " + _reactionTime + ", ");
            stringBuilder.Append("max_reaction_time = " + _maxReactionTime + ", ");
            stringBuilder.Append("min_movement_time = " + _minMovementTime + ", ");
            stringBuilder.Append("lnp_time = " + _lnpTime + ", ");
            stringBuilder.Append("base_reward = " + _baseReward + ", ");
            stringBuilder.Append("optogenetics = " + _optogenetics + ", ");
            stringBuilder.Append("autobias_correction = " + _autobiasCorrection);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<FixationTime> source)
        {
            return Process<FixationTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Optogenetics> source)
        {
            return Process<Optogenetics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Session> source)
        {
            return Process<Session>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sound> source)
        {
            return Process<Sound>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TimeConstrains> source)
        {
            return Process<TimeConstrains>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Animal> source)
        {
            return Process<Animal>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FixationTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Optogenetics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Session>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sound>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TimeConstrains>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Animal>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<Animal>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<FixationTime> source)
        {
            return Process<FixationTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Optogenetics> source)
        {
            return Process<Optogenetics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Session> source)
        {
            return Process<Session>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sound> source)
        {
            return Process<Sound>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TimeConstrains> source)
        {
            return Process<TimeConstrains>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Animal> source)
        {
            return Process<Animal>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FixationTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Optogenetics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Session>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sound>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TimeConstrains>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Animal>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<Animal>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}