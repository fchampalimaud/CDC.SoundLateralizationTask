//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Output
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Block
    {
    
        private int _number;
    
        private int _trainingLevel;
    
        private int _trialsPerBlock;
    
        public Block()
        {
        }
    
        protected Block(Block other)
        {
            _number = other._number;
            _trainingLevel = other._trainingLevel;
            _trialsPerBlock = other._trialsPerBlock;
        }
    
        /// <summary>
        /// The block number.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number")]
        [System.ComponentModel.DescriptionAttribute("The block number.")]
        public int Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
    
        /// <summary>
        /// The training level of the current block.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("training_level", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="training_level")]
        [System.ComponentModel.DescriptionAttribute("The training level of the current block.")]
        public int TrainingLevel
        {
            get
            {
                return _trainingLevel;
            }
            set
            {
                _trainingLevel = value;
            }
        }
    
        /// <summary>
        /// The number of trials that the current block is expected to have.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trials_per_block", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_per_block")]
        [System.ComponentModel.DescriptionAttribute("The number of trials that the current block is expected to have.")]
        public int TrialsPerBlock
        {
            get
            {
                return _trialsPerBlock;
            }
            set
            {
                _trialsPerBlock = value;
            }
        }
    
        public System.IObservable<Block> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Block(this)));
        }
    
        public System.IObservable<Block> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Block(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("number = " + _number + ", ");
            stringBuilder.Append("training_level = " + _trainingLevel + ", ");
            stringBuilder.Append("trials_per_block = " + _trialsPerBlock);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FixationTime
    {
    
        private FixationTimeParts _optoOnsetTime = new FixationTimeParts();
    
        private FixationTimeParts _soundOnsetTime = new FixationTimeParts();
    
        private double _intendedDuration;
    
        private double _timedDuration;
    
        public FixationTime()
        {
        }
    
        protected FixationTime(FixationTime other)
        {
            _optoOnsetTime = other._optoOnsetTime;
            _soundOnsetTime = other._soundOnsetTime;
            _intendedDuration = other._intendedDuration;
            _timedDuration = other._timedDuration;
        }
    
        /// <summary>
        /// Contains the data related to the Optogenetics Onset Time part of the Fixation Time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("opto_onset_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="opto_onset_time")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to the Optogenetics Onset Time part of the Fixation Tim" +
            "e.")]
        public FixationTimeParts OptoOnsetTime
        {
            get
            {
                return _optoOnsetTime;
            }
            set
            {
                _optoOnsetTime = value;
            }
        }
    
        /// <summary>
        /// Contains the data related to the Sound Onset Time part of the Fixation Time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sound_onset_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sound_onset_time")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to the Sound Onset Time part of the Fixation Time.")]
        public FixationTimeParts SoundOnsetTime
        {
            get
            {
                return _soundOnsetTime;
            }
            set
            {
                _soundOnsetTime = value;
            }
        }
    
        /// <summary>
        /// The intended duration for the total fixation time (ms).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("intended_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="intended_duration")]
        [System.ComponentModel.DescriptionAttribute("The intended duration for the total fixation time (ms).")]
        public double IntendedDuration
        {
            get
            {
                return _intendedDuration;
            }
            set
            {
                _intendedDuration = value;
            }
        }
    
        /// <summary>
        /// The timed duration for the total fixation time (ms).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timed_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timed_duration")]
        [System.ComponentModel.DescriptionAttribute("The timed duration for the total fixation time (ms).")]
        public double TimedDuration
        {
            get
            {
                return _timedDuration;
            }
            set
            {
                _timedDuration = value;
            }
        }
    
        public System.IObservable<FixationTime> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FixationTime(this)));
        }
    
        public System.IObservable<FixationTime> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FixationTime(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("opto_onset_time = " + _optoOnsetTime + ", ");
            stringBuilder.Append("sound_onset_time = " + _soundOnsetTime + ", ");
            stringBuilder.Append("intended_duration = " + _intendedDuration + ", ");
            stringBuilder.Append("timed_duration = " + _timedDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FixationTimeParts
    {
    
        private double _baseTime;
    
        private double _expMean;
    
        private double _intendedDuration;
    
        private double _timedDuration;
    
        public FixationTimeParts()
        {
        }
    
        protected FixationTimeParts(FixationTimeParts other)
        {
            _baseTime = other._baseTime;
            _expMean = other._expMean;
            _intendedDuration = other._intendedDuration;
            _timedDuration = other._timedDuration;
        }
    
        /// <summary>
        /// The constant part of the fixation time (ms).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("base_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="base_time")]
        [System.ComponentModel.DescriptionAttribute("The constant part of the fixation time (ms).")]
        public double BaseTime
        {
            get
            {
                return _baseTime;
            }
            set
            {
                _baseTime = value;
            }
        }
    
        /// <summary>
        /// The mean value of the random part of the fixation time (ms), which follows an exponential distribution.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exp_mean", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exp_mean")]
        [System.ComponentModel.DescriptionAttribute("The mean value of the random part of the fixation time (ms), which follows an exp" +
            "onential distribution.")]
        public double ExpMean
        {
            get
            {
                return _expMean;
            }
            set
            {
                _expMean = value;
            }
        }
    
        /// <summary>
        /// The intended duration for this part of the fixation time (ms).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("intended_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="intended_duration")]
        [System.ComponentModel.DescriptionAttribute("The intended duration for this part of the fixation time (ms).")]
        public double IntendedDuration
        {
            get
            {
                return _intendedDuration;
            }
            set
            {
                _intendedDuration = value;
            }
        }
    
        /// <summary>
        /// The timed duration for this part of the fixation time (ms).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timed_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timed_duration")]
        [System.ComponentModel.DescriptionAttribute("The timed duration for this part of the fixation time (ms).")]
        public double TimedDuration
        {
            get
            {
                return _timedDuration;
            }
            set
            {
                _timedDuration = value;
            }
        }
    
        public System.IObservable<FixationTimeParts> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FixationTimeParts(this)));
        }
    
        public System.IObservable<FixationTimeParts> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FixationTimeParts(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("base_time = " + _baseTime + ", ");
            stringBuilder.Append("exp_mean = " + _expMean + ", ");
            stringBuilder.Append("intended_duration = " + _intendedDuration + ", ");
            stringBuilder.Append("timed_duration = " + _timedDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ITI
    {
    
        private double _intendedDuration;
    
        private double _startTime;
    
        private double _endTime;
    
        private double _timedDuration;
    
        public ITI()
        {
        }
    
        protected ITI(ITI other)
        {
            _intendedDuration = other._intendedDuration;
            _startTime = other._startTime;
            _endTime = other._endTime;
            _timedDuration = other._timedDuration;
        }
    
        /// <summary>
        /// The intended duration of the ITI (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("intended_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="intended_duration")]
        [System.ComponentModel.DescriptionAttribute("The intended duration of the ITI (s).")]
        public double IntendedDuration
        {
            get
            {
                return _intendedDuration;
            }
            set
            {
                _intendedDuration = value;
            }
        }
    
        /// <summary>
        /// The timestamp at which the trial started (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="start_time")]
        [System.ComponentModel.DescriptionAttribute("The timestamp at which the trial started (s).")]
        public double StartTime
        {
            get
            {
                return _startTime;
            }
            set
            {
                _startTime = value;
            }
        }
    
        /// <summary>
        /// The timestamp at which the trial ended (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("end_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="end_time")]
        [System.ComponentModel.DescriptionAttribute("The timestamp at which the trial ended (s).")]
        public double EndTime
        {
            get
            {
                return _endTime;
            }
            set
            {
                _endTime = value;
            }
        }
    
        /// <summary>
        /// The ITI duration (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timed_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timed_duration")]
        [System.ComponentModel.DescriptionAttribute("The ITI duration (s).")]
        public double TimedDuration
        {
            get
            {
                return _timedDuration;
            }
            set
            {
                _timedDuration = value;
            }
        }
    
        public System.IObservable<ITI> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ITI(this)));
        }
    
        public System.IObservable<ITI> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ITI(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("intended_duration = " + _intendedDuration + ", ");
            stringBuilder.Append("start_time = " + _startTime + ", ");
            stringBuilder.Append("end_time = " + _endTime + ", ");
            stringBuilder.Append("timed_duration = " + _timedDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class LnpTime
    {
    
        private double _intendedDuration;
    
        private double _timedDuration;
    
        public LnpTime()
        {
        }
    
        protected LnpTime(LnpTime other)
        {
            _intendedDuration = other._intendedDuration;
            _timedDuration = other._timedDuration;
        }
    
        /// <summary>
        /// The minimum allowed LNP time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("intended_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="intended_duration")]
        [System.ComponentModel.DescriptionAttribute("The minimum allowed LNP time (s).")]
        public double IntendedDuration
        {
            get
            {
                return _intendedDuration;
            }
            set
            {
                _intendedDuration = value;
            }
        }
    
        /// <summary>
        /// The timed LNP time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timed_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timed_duration")]
        [System.ComponentModel.DescriptionAttribute("The timed LNP time (s).")]
        public double TimedDuration
        {
            get
            {
                return _timedDuration;
            }
            set
            {
                _timedDuration = value;
            }
        }
    
        public System.IObservable<LnpTime> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new LnpTime(this)));
        }
    
        public System.IObservable<LnpTime> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new LnpTime(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("intended_duration = " + _intendedDuration + ", ");
            stringBuilder.Append("timed_duration = " + _timedDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class MovementTime
    {
    
        private double _maxDuration;
    
        private double _timedDuration;
    
        public MovementTime()
        {
        }
    
        protected MovementTime(MovementTime other)
        {
            _maxDuration = other._maxDuration;
            _timedDuration = other._timedDuration;
        }
    
        /// <summary>
        /// The maximum allowed movement time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max_duration")]
        [System.ComponentModel.DescriptionAttribute("The maximum allowed movement time (s).")]
        public double MaxDuration
        {
            get
            {
                return _maxDuration;
            }
            set
            {
                _maxDuration = value;
            }
        }
    
        /// <summary>
        /// The timed movement time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timed_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timed_duration")]
        [System.ComponentModel.DescriptionAttribute("The timed movement time (s).")]
        public double TimedDuration
        {
            get
            {
                return _timedDuration;
            }
            set
            {
                _timedDuration = value;
            }
        }
    
        public System.IObservable<MovementTime> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new MovementTime(this)));
        }
    
        public System.IObservable<MovementTime> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new MovementTime(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("max_duration = " + _maxDuration + ", ");
            stringBuilder.Append("timed_duration = " + _timedDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Optogenetics
    {
    
        private bool _optoTrial;
    
        private double _duration;
    
        private double _leftPower;
    
        private double _rightPower;
    
        public Optogenetics()
        {
        }
    
        protected Optogenetics(Optogenetics other)
        {
            _optoTrial = other._optoTrial;
            _duration = other._duration;
            _leftPower = other._leftPower;
            _rightPower = other._rightPower;
        }
    
        /// <summary>
        /// Indicates if optogenetics was used in the current trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("opto_trial", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="opto_trial")]
        [System.ComponentModel.DescriptionAttribute("Indicates if optogenetics was used in the current trial.")]
        public bool OptoTrial
        {
            get
            {
                return _optoTrial;
            }
            set
            {
                _optoTrial = value;
            }
        }
    
        /// <summary>
        /// The duration of the optogenetics used during the trial (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="duration")]
        [System.ComponentModel.DescriptionAttribute("The duration of the optogenetics used during the trial (s).")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        /// <summary>
        /// The power used in the optogenetics protocol for the left side. NOT IMPLEMENTED!!!
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_power")]
        [System.ComponentModel.DescriptionAttribute("The power used in the optogenetics protocol for the left side. NOT IMPLEMENTED!!!" +
            "")]
        public double LeftPower
        {
            get
            {
                return _leftPower;
            }
            set
            {
                _leftPower = value;
            }
        }
    
        /// <summary>
        /// The power used in the optogenetics protocol for the right side. NOT IMPLEMENTED!!!
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_power", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_power")]
        [System.ComponentModel.DescriptionAttribute("The power used in the optogenetics protocol for the right side. NOT IMPLEMENTED!!" +
            "!")]
        public double RightPower
        {
            get
            {
                return _rightPower;
            }
            set
            {
                _rightPower = value;
            }
        }
    
        public System.IObservable<Optogenetics> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Optogenetics(this)));
        }
    
        public System.IObservable<Optogenetics> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Optogenetics(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("opto_trial = " + _optoTrial + ", ");
            stringBuilder.Append("duration = " + _duration + ", ");
            stringBuilder.Append("left_power = " + _leftPower + ", ");
            stringBuilder.Append("right_power = " + _rightPower);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Outcome
    {
    
        private int _responsePoke;
    
        private int _value;
    
        private double _blockPerformance;
    
        private double _blockAbortRatio;
    
        public Outcome()
        {
        }
    
        protected Outcome(Outcome other)
        {
            _responsePoke = other._responsePoke;
            _value = other._value;
            _blockPerformance = other._blockPerformance;
            _blockAbortRatio = other._blockAbortRatio;
        }
    
        /// <summary>
        /// The answer given by the animal in the current trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("response_poke", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="response_poke")]
        [System.ComponentModel.DescriptionAttribute("The answer given by the animal in the current trial.")]
        public int ResponsePoke
        {
            get
            {
                return _responsePoke;
            }
            set
            {
                _responsePoke = value;
            }
        }
    
        /// <summary>
        /// The outcome of the current trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="value")]
        [System.ComponentModel.DescriptionAttribute("The outcome of the current trial.")]
        public int Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        /// <summary>
        /// The block performance.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("block_performance", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="block_performance")]
        [System.ComponentModel.DescriptionAttribute("The block performance.")]
        public double BlockPerformance
        {
            get
            {
                return _blockPerformance;
            }
            set
            {
                _blockPerformance = value;
            }
        }
    
        /// <summary>
        /// The block abort ratio.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("block_abort_ratio", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="block_abort_ratio")]
        [System.ComponentModel.DescriptionAttribute("The block abort ratio.")]
        public double BlockAbortRatio
        {
            get
            {
                return _blockAbortRatio;
            }
            set
            {
                _blockAbortRatio = value;
            }
        }
    
        public System.IObservable<Outcome> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Outcome(this)));
        }
    
        public System.IObservable<Outcome> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Outcome(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("response_poke = " + _responsePoke + ", ");
            stringBuilder.Append("value = " + _value + ", ");
            stringBuilder.Append("block_performance = " + _blockPerformance + ", ");
            stringBuilder.Append("block_abort_ratio = " + _blockAbortRatio);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ReactionTime
    {
    
        private double _baseTime;
    
        private double _maxDuration;
    
        private double _timedDuration;
    
        public ReactionTime()
        {
        }
    
        protected ReactionTime(ReactionTime other)
        {
            _baseTime = other._baseTime;
            _maxDuration = other._maxDuration;
            _timedDuration = other._timedDuration;
        }
    
        /// <summary>
        /// The minimum allowed reaction time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("base_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="base_time")]
        [System.ComponentModel.DescriptionAttribute("The minimum allowed reaction time (s).")]
        public double BaseTime
        {
            get
            {
                return _baseTime;
            }
            set
            {
                _baseTime = value;
            }
        }
    
        /// <summary>
        /// The maximum allowed reaction time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max_duration")]
        [System.ComponentModel.DescriptionAttribute("The maximum allowed reaction time (s).")]
        public double MaxDuration
        {
            get
            {
                return _maxDuration;
            }
            set
            {
                _maxDuration = value;
            }
        }
    
        /// <summary>
        /// The timed reaction time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timed_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timed_duration")]
        [System.ComponentModel.DescriptionAttribute("The timed reaction time (s).")]
        public double TimedDuration
        {
            get
            {
                return _timedDuration;
            }
            set
            {
                _timedDuration = value;
            }
        }
    
        public System.IObservable<ReactionTime> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ReactionTime(this)));
        }
    
        public System.IObservable<ReactionTime> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ReactionTime(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("base_time = " + _baseTime + ", ");
            stringBuilder.Append("max_duration = " + _maxDuration + ", ");
            stringBuilder.Append("timed_duration = " + _timedDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Session
    {
    
        private int _number;
    
        private int _type;
    
        private int _setupId;
    
        public Session()
        {
        }
    
        protected Session(Session other)
        {
            _number = other._number;
            _type = other._type;
            _setupId = other._setupId;
        }
    
        /// <summary>
        /// The number of the current session.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number")]
        [System.ComponentModel.DescriptionAttribute("The number of the current session.")]
        public int Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
    
        /// <summary>
        /// The number of the session type.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("type", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="type")]
        [System.ComponentModel.DescriptionAttribute("The number of the session type.")]
        public int Type
        {
            get
            {
                return _type;
            }
            set
            {
                _type = value;
            }
        }
    
        /// <summary>
        /// The ID number of the setup where the animal will performed the trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("setup_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="setup_id")]
        [System.ComponentModel.DescriptionAttribute("The ID number of the setup where the animal will performed the trial.")]
        public int SetupId
        {
            get
            {
                return _setupId;
            }
            set
            {
                _setupId = value;
            }
        }
    
        public System.IObservable<Session> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Session(this)));
        }
    
        public System.IObservable<Session> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Session(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("number = " + _number + ", ");
            stringBuilder.Append("type = " + _type + ", ");
            stringBuilder.Append("setup_id = " + _setupId);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Sound
    {
    
        private double _abl;
    
        private double _ild;
    
        private int _soundIndex;
    
        private double _leftAmplification;
    
        private double _rightAmplification;
    
        public Sound()
        {
        }
    
        protected Sound(Sound other)
        {
            _abl = other._abl;
            _ild = other._ild;
            _soundIndex = other._soundIndex;
            _leftAmplification = other._leftAmplification;
            _rightAmplification = other._rightAmplification;
        }
    
        /// <summary>
        /// The trial ABL value (dB).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("abl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abl")]
        [System.ComponentModel.DescriptionAttribute("The trial ABL value (dB).")]
        public double Abl
        {
            get
            {
                return _abl;
            }
            set
            {
                _abl = value;
            }
        }
    
        /// <summary>
        /// The trial ILD value (dB).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("ild", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ild")]
        [System.ComponentModel.DescriptionAttribute("The trial ILD value (dB).")]
        public double Ild
        {
            get
            {
                return _ild;
            }
            set
            {
                _ild = value;
            }
        }
    
        /// <summary>
        /// The index of the sound that played in the trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sound_index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sound_index")]
        [System.ComponentModel.DescriptionAttribute("The index of the sound that played in the trial.")]
        public int SoundIndex
        {
            get
            {
                return _soundIndex;
            }
            set
            {
                _soundIndex = value;
            }
        }
    
        /// <summary>
        /// The amplification applied to the left speaker in the trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left_amplification", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_amplification")]
        [System.ComponentModel.DescriptionAttribute("The amplification applied to the left speaker in the trial.")]
        public double LeftAmplification
        {
            get
            {
                return _leftAmplification;
            }
            set
            {
                _leftAmplification = value;
            }
        }
    
        /// <summary>
        /// The amplification applied to the right speaker in the trial.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_amplification", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_amplification")]
        [System.ComponentModel.DescriptionAttribute("The amplification applied to the right speaker in the trial.")]
        public double RightAmplification
        {
            get
            {
                return _rightAmplification;
            }
            set
            {
                _rightAmplification = value;
            }
        }
    
        public System.IObservable<Sound> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Sound(this)));
        }
    
        public System.IObservable<Sound> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Sound(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("abl = " + _abl + ", ");
            stringBuilder.Append("ild = " + _ild + ", ");
            stringBuilder.Append("sound_index = " + _soundIndex + ", ");
            stringBuilder.Append("left_amplification = " + _leftAmplification + ", ");
            stringBuilder.Append("right_amplification = " + _rightAmplification);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TimeToCnp
    {
    
        private double _timedValue;
    
        private double _maxDuration;
    
        public TimeToCnp()
        {
        }
    
        protected TimeToCnp(TimeToCnp other)
        {
            _timedValue = other._timedValue;
            _maxDuration = other._maxDuration;
        }
    
        /// <summary>
        /// The time it took for the animal to start the trial (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("timed_value", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="timed_value")]
        [System.ComponentModel.DescriptionAttribute("The time it took for the animal to start the trial (s).")]
        public double TimedValue
        {
            get
            {
                return _timedValue;
            }
            set
            {
                _timedValue = value;
            }
        }
    
        /// <summary>
        /// The maximum allowed time to start the trial (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max_duration")]
        [System.ComponentModel.DescriptionAttribute("The maximum allowed time to start the trial (s).")]
        public double MaxDuration
        {
            get
            {
                return _maxDuration;
            }
            set
            {
                _maxDuration = value;
            }
        }
    
        public System.IObservable<TimeToCnp> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TimeToCnp(this)));
        }
    
        public System.IObservable<TimeToCnp> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TimeToCnp(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("timed_value = " + _timedValue + ", ");
            stringBuilder.Append("max_duration = " + _maxDuration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Trial
    {
    
        private int _number;
    
        private double _startTime;
    
        private double _taredStartTime;
    
        private double _endTime;
    
        private double _duration;
    
        public Trial()
        {
        }
    
        protected Trial(Trial other)
        {
            _number = other._number;
            _startTime = other._startTime;
            _taredStartTime = other._taredStartTime;
            _endTime = other._endTime;
            _duration = other._duration;
        }
    
        /// <summary>
        /// The trial number.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("number", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="number")]
        [System.ComponentModel.DescriptionAttribute("The trial number.")]
        public int Number
        {
            get
            {
                return _number;
            }
            set
            {
                _number = value;
            }
        }
    
        /// <summary>
        /// The timestamp at which the trial started (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="start_time")]
        [System.ComponentModel.DescriptionAttribute("The timestamp at which the trial started (s).")]
        public double StartTime
        {
            get
            {
                return _startTime;
            }
            set
            {
                _startTime = value;
            }
        }
    
        /// <summary>
        /// The tared timestamp at which the trial started in which t = 0 is the start time of the first trial of the session (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("tared_start_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="tared_start_time")]
        [System.ComponentModel.DescriptionAttribute("The tared timestamp at which the trial started in which t = 0 is the start time o" +
            "f the first trial of the session (s).")]
        public double TaredStartTime
        {
            get
            {
                return _taredStartTime;
            }
            set
            {
                _taredStartTime = value;
            }
        }
    
        /// <summary>
        /// The timestamp at which the trial ended (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("end_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="end_time")]
        [System.ComponentModel.DescriptionAttribute("The timestamp at which the trial ended (s).")]
        public double EndTime
        {
            get
            {
                return _endTime;
            }
            set
            {
                _endTime = value;
            }
        }
    
        /// <summary>
        /// The trial duration (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="duration")]
        [System.ComponentModel.DescriptionAttribute("The trial duration (s).")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        public System.IObservable<Trial> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Trial(this)));
        }
    
        public System.IObservable<Trial> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Trial(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("number = " + _number + ", ");
            stringBuilder.Append("start_time = " + _startTime + ", ");
            stringBuilder.Append("tared_start_time = " + _taredStartTime + ", ");
            stringBuilder.Append("end_time = " + _endTime + ", ");
            stringBuilder.Append("duration = " + _duration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Output
    {
    
        private int _animalId;
    
        private string _version;
    
        private Trial _trial = new Trial();
    
        private Block _block = new Block();
    
        private Session _session = new Session();
    
        private Sound _sound = new Sound();
    
        private ITI _iti = new ITI();
    
        private TimeToCnp _timeToCnp = new TimeToCnp();
    
        private FixationTime _fixationTime = new FixationTime();
    
        private ReactionTime _reactionTime = new ReactionTime();
    
        private MovementTime _movementTime = new MovementTime();
    
        private LnpTime _lnpTime = new LnpTime();
    
        private Outcome _outcome = new Outcome();
    
        private bool _repeatedTrial;
    
        private Optogenetics _optogenetics = new Optogenetics();
    
        public Output()
        {
        }
    
        protected Output(Output other)
        {
            _animalId = other._animalId;
            _version = other._version;
            _trial = other._trial;
            _block = other._block;
            _session = other._session;
            _sound = other._sound;
            _iti = other._iti;
            _timeToCnp = other._timeToCnp;
            _fixationTime = other._fixationTime;
            _reactionTime = other._reactionTime;
            _movementTime = other._movementTime;
            _lnpTime = other._lnpTime;
            _outcome = other._outcome;
            _repeatedTrial = other._repeatedTrial;
            _optogenetics = other._optogenetics;
        }
    
        /// <summary>
        /// The ID number of the animal.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_id")]
        [System.ComponentModel.DescriptionAttribute("The ID number of the animal.")]
        public int AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        /// <summary>
        /// The version of the project used in the session.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("version", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="version")]
        [System.ComponentModel.DescriptionAttribute("The version of the project used in the session.")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Contains the trial-related data.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trial", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trial")]
        [System.ComponentModel.DescriptionAttribute("Contains the trial-related data.")]
        public Trial Trial
        {
            get
            {
                return _trial;
            }
            set
            {
                _trial = value;
            }
        }
    
        /// <summary>
        /// Contains the block-related data.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("block", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="block")]
        [System.ComponentModel.DescriptionAttribute("Contains the block-related data.")]
        public Block Block
        {
            get
            {
                return _block;
            }
            set
            {
                _block = value;
            }
        }
    
        /// <summary>
        /// Contains the session-related data.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("session", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="session")]
        [System.ComponentModel.DescriptionAttribute("Contains the session-related data.")]
        public Session Session
        {
            get
            {
                return _session;
            }
            set
            {
                _session = value;
            }
        }
    
        /// <summary>
        /// Contains the sound-related data.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sound", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sound")]
        [System.ComponentModel.DescriptionAttribute("Contains the sound-related data.")]
        public Sound Sound
        {
            get
            {
                return _sound;
            }
            set
            {
                _sound = value;
            }
        }
    
        /// <summary>
        /// Contains the ITI-related data.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("iti", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="iti")]
        [System.ComponentModel.DescriptionAttribute("Contains the ITI-related data.")]
        public ITI Iti
        {
            get
            {
                return _iti;
            }
            set
            {
                _iti = value;
            }
        }
    
        /// <summary>
        /// Contains the data related to the time to CNP.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("time_to_cnp", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="time_to_cnp")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to the time to CNP.")]
        public TimeToCnp TimeToCnp
        {
            get
            {
                return _timeToCnp;
            }
            set
            {
                _timeToCnp = value;
            }
        }
    
        /// <summary>
        /// Contains the data related to the fixation time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fixation_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixation_time")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to the fixation time.")]
        public FixationTime FixationTime
        {
            get
            {
                return _fixationTime;
            }
            set
            {
                _fixationTime = value;
            }
        }
    
        /// <summary>
        /// Contains the data related to the reaction time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reaction_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reaction_time")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to the reaction time.")]
        public ReactionTime ReactionTime
        {
            get
            {
                return _reactionTime;
            }
            set
            {
                _reactionTime = value;
            }
        }
    
        /// <summary>
        /// Contains the data related to the movement time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("movement_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="movement_time")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to the movement time.")]
        public MovementTime MovementTime
        {
            get
            {
                return _movementTime;
            }
            set
            {
                _movementTime = value;
            }
        }
    
        /// <summary>
        /// Contains the data related to the LNP time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lnp_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lnp_time")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to the LNP time.")]
        public LnpTime LnpTime
        {
            get
            {
                return _lnpTime;
            }
            set
            {
                _lnpTime = value;
            }
        }
    
        /// <summary>
        /// Contains the data related to the trial outcome.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("outcome", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="outcome")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to the trial outcome.")]
        public Outcome Outcome
        {
            get
            {
                return _outcome;
            }
            set
            {
                _outcome = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the current trial is a repetition of the previous trial (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeated_trial", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="repeated_trial")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the current trial is a repetition of the previous trial (true) " +
            "or not (false).")]
        public bool RepeatedTrial
        {
            get
            {
                return _repeatedTrial;
            }
            set
            {
                _repeatedTrial = value;
            }
        }
    
        /// <summary>
        /// Contains the data related to optogenetics.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("optogenetics", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="optogenetics")]
        [System.ComponentModel.DescriptionAttribute("Contains the data related to optogenetics.")]
        public Optogenetics Optogenetics
        {
            get
            {
                return _optogenetics;
            }
            set
            {
                _optogenetics = value;
            }
        }
    
        public System.IObservable<Output> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Output(this)));
        }
    
        public System.IObservable<Output> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Output(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animal_id = " + _animalId + ", ");
            stringBuilder.Append("version = " + _version + ", ");
            stringBuilder.Append("trial = " + _trial + ", ");
            stringBuilder.Append("block = " + _block + ", ");
            stringBuilder.Append("session = " + _session + ", ");
            stringBuilder.Append("sound = " + _sound + ", ");
            stringBuilder.Append("iti = " + _iti + ", ");
            stringBuilder.Append("time_to_cnp = " + _timeToCnp + ", ");
            stringBuilder.Append("fixation_time = " + _fixationTime + ", ");
            stringBuilder.Append("reaction_time = " + _reactionTime + ", ");
            stringBuilder.Append("movement_time = " + _movementTime + ", ");
            stringBuilder.Append("lnp_time = " + _lnpTime + ", ");
            stringBuilder.Append("outcome = " + _outcome + ", ");
            stringBuilder.Append("repeated_trial = " + _repeatedTrial + ", ");
            stringBuilder.Append("optogenetics = " + _optogenetics);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<Block> source)
        {
            return Process<Block>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FixationTime> source)
        {
            return Process<FixationTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FixationTimeParts> source)
        {
            return Process<FixationTimeParts>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ITI> source)
        {
            return Process<ITI>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LnpTime> source)
        {
            return Process<LnpTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MovementTime> source)
        {
            return Process<MovementTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Optogenetics> source)
        {
            return Process<Optogenetics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Outcome> source)
        {
            return Process<Outcome>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ReactionTime> source)
        {
            return Process<ReactionTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Session> source)
        {
            return Process<Session>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sound> source)
        {
            return Process<Sound>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TimeToCnp> source)
        {
            return Process<TimeToCnp>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Trial> source)
        {
            return Process<Trial>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Output> source)
        {
            return Process<Output>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FixationTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FixationTimeParts>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ITI>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LnpTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MovementTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Optogenetics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Outcome>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ReactionTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Session>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sound>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TimeToCnp>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Trial>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Output>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<Output>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Block> source)
        {
            return Process<Block>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FixationTime> source)
        {
            return Process<FixationTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FixationTimeParts> source)
        {
            return Process<FixationTimeParts>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ITI> source)
        {
            return Process<ITI>(source);
        }

        public System.IObservable<string> Process(System.IObservable<LnpTime> source)
        {
            return Process<LnpTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<MovementTime> source)
        {
            return Process<MovementTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Optogenetics> source)
        {
            return Process<Optogenetics>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Outcome> source)
        {
            return Process<Outcome>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ReactionTime> source)
        {
            return Process<ReactionTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Session> source)
        {
            return Process<Session>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sound> source)
        {
            return Process<Sound>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TimeToCnp> source)
        {
            return Process<TimeToCnp>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Trial> source)
        {
            return Process<Trial>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Output> source)
        {
            return Process<Output>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Block>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FixationTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FixationTimeParts>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ITI>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<LnpTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<MovementTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Optogenetics>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Outcome>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ReactionTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Session>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sound>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TimeToCnp>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Trial>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Output>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<Output>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}