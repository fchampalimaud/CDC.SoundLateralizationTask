//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Config
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Config
    {
    
        private string _behaviorPort;
    
        private string _soundcardPort;
    
        private string _leftPumpPort;
    
        private string _rightPumpPort;
    
        private string _currentdriverPort;
    
        private string _animalPath;
    
        private string _setupPath;
    
        private string _trainingPath;
    
        private string _outputPath;
    
        public Config()
        {
        }
    
        protected Config(Config other)
        {
            _behaviorPort = other._behaviorPort;
            _soundcardPort = other._soundcardPort;
            _leftPumpPort = other._leftPumpPort;
            _rightPumpPort = other._rightPumpPort;
            _currentdriverPort = other._currentdriverPort;
            _animalPath = other._animalPath;
            _setupPath = other._setupPath;
            _trainingPath = other._trainingPath;
            _outputPath = other._outputPath;
        }
    
        /// <summary>
        /// The COM port of the Harp Behavior.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("behavior_port", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior_port")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the Harp Behavior.")]
        public string BehaviorPort
        {
            get
            {
                return _behaviorPort;
            }
            set
            {
                _behaviorPort = value;
            }
        }
    
        /// <summary>
        /// The COM port of the Harp SoundCard.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("soundcard_port", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="soundcard_port")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the Harp SoundCard.")]
        public string SoundcardPort
        {
            get
            {
                return _soundcardPort;
            }
            set
            {
                _soundcardPort = value;
            }
        }
    
        /// <summary>
        /// The COM port of the left Harp SyringePump.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left_pump_port", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_pump_port")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the left Harp SyringePump.")]
        public string LeftPumpPort
        {
            get
            {
                return _leftPumpPort;
            }
            set
            {
                _leftPumpPort = value;
            }
        }
    
        /// <summary>
        /// The COM port of the right Harp SyringePump.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_pump_port", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_pump_port")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the right Harp SyringePump.")]
        public string RightPumpPort
        {
            get
            {
                return _rightPumpPort;
            }
            set
            {
                _rightPumpPort = value;
            }
        }
    
        /// <summary>
        /// The COM port of the Harp CurrentDriver.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("currentdriver_port", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="currentdriver_port")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the Harp CurrentDriver.")]
        public string CurrentdriverPort
        {
            get
            {
                return _currentdriverPort;
            }
            set
            {
                _currentdriverPort = value;
            }
        }
    
        /// <summary>
        /// The path to the animal.yml configuration file.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal_path", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_path")]
        [System.ComponentModel.DescriptionAttribute("The path to the animal.yml configuration file.")]
        public string AnimalPath
        {
            get
            {
                return _animalPath;
            }
            set
            {
                _animalPath = value;
            }
        }
    
        /// <summary>
        /// The path to the setup.json configuration file.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("setup_path", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="setup_path")]
        [System.ComponentModel.DescriptionAttribute("The path to the setup.json configuration file.")]
        public string SetupPath
        {
            get
            {
                return _setupPath;
            }
            set
            {
                _setupPath = value;
            }
        }
    
        /// <summary>
        /// The path to the training.yml configuration file.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("training_path", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="training_path")]
        [System.ComponentModel.DescriptionAttribute("The path to the training.yml configuration file.")]
        public string TrainingPath
        {
            get
            {
                return _trainingPath;
            }
            set
            {
                _trainingPath = value;
            }
        }
    
        /// <summary>
        /// The path to the output directory, where the output date will be saved.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_path", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output_path")]
        [System.ComponentModel.DescriptionAttribute("The path to the output directory, where the output date will be saved.")]
        public string OutputPath
        {
            get
            {
                return _outputPath;
            }
            set
            {
                _outputPath = value;
            }
        }
    
        public System.IObservable<Config> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Config(this)));
        }
    
        public System.IObservable<Config> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Config(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("behavior_port = " + _behaviorPort + ", ");
            stringBuilder.Append("soundcard_port = " + _soundcardPort + ", ");
            stringBuilder.Append("left_pump_port = " + _leftPumpPort + ", ");
            stringBuilder.Append("right_pump_port = " + _rightPumpPort + ", ");
            stringBuilder.Append("currentdriver_port = " + _currentdriverPort + ", ");
            stringBuilder.Append("animal_path = " + _animalPath + ", ");
            stringBuilder.Append("setup_path = " + _setupPath + ", ");
            stringBuilder.Append("training_path = " + _trainingPath + ", ");
            stringBuilder.Append("output_path = " + _outputPath);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<Config> source)
        {
            return Process<Config>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Config>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<Config>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Config> source)
        {
            return Process<Config>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Config>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<Config>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}