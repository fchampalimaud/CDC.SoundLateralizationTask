//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Config
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Paths
    {
    
        private string _animal;
    
        private string _animalDir;
    
        private string _setup;
    
        private string _training;
    
        private string _output;
    
        private string _outputBackup;
    
        public Paths()
        {
        }
    
        protected Paths(Paths other)
        {
            _animal = other._animal;
            _animalDir = other._animalDir;
            _setup = other._setup;
            _training = other._training;
            _output = other._output;
            _outputBackup = other._outputBackup;
        }
    
        /// <summary>
        /// The path to the animal.yml configuration file.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal")]
        [System.ComponentModel.DescriptionAttribute("The path to the animal.yml configuration file.")]
        public string Animal
        {
            get
            {
                return _animal;
            }
            set
            {
                _animal = value;
            }
        }
    
        /// <summary>
        /// The path to the directory containing the animal ID files.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("animal_dir", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animal_dir")]
        [System.ComponentModel.DescriptionAttribute("The path to the directory containing the animal ID files.")]
        public string AnimalDir
        {
            get
            {
                return _animalDir;
            }
            set
            {
                _animalDir = value;
            }
        }
    
        /// <summary>
        /// The path to the setup.json configuration file.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("setup", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="setup")]
        [System.ComponentModel.DescriptionAttribute("The path to the setup.json configuration file.")]
        public string Setup
        {
            get
            {
                return _setup;
            }
            set
            {
                _setup = value;
            }
        }
    
        /// <summary>
        /// The path to the training.yml configuration file.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("training", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="training")]
        [System.ComponentModel.DescriptionAttribute("The path to the training.yml configuration file.")]
        public string Training
        {
            get
            {
                return _training;
            }
            set
            {
                _training = value;
            }
        }
    
        /// <summary>
        /// The path to the output directory, where the output date will be saved.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output")]
        [System.ComponentModel.DescriptionAttribute("The path to the output directory, where the output date will be saved.")]
        public string Output
        {
            get
            {
                return _output;
            }
            set
            {
                _output = value;
            }
        }
    
        /// <summary>
        /// The path to the backup output directory.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_backup", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="output_backup")]
        [System.ComponentModel.DescriptionAttribute("The path to the backup output directory.")]
        public string OutputBackup
        {
            get
            {
                return _outputBackup;
            }
            set
            {
                _outputBackup = value;
            }
        }
    
        public System.IObservable<Paths> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Paths(this)));
        }
    
        public System.IObservable<Paths> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Paths(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animal = " + _animal + ", ");
            stringBuilder.Append("animal_dir = " + _animalDir + ", ");
            stringBuilder.Append("setup = " + _setup + ", ");
            stringBuilder.Append("training = " + _training + ", ");
            stringBuilder.Append("output = " + _output + ", ");
            stringBuilder.Append("output_backup = " + _outputBackup);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Ports
    {
    
        private string _behavior;
    
        private string _soundcard;
    
        private string _leftPump;
    
        private string _rightPump;
    
        private string _currentdriver;
    
        public Ports()
        {
        }
    
        protected Ports(Ports other)
        {
            _behavior = other._behavior;
            _soundcard = other._soundcard;
            _leftPump = other._leftPump;
            _rightPump = other._rightPump;
            _currentdriver = other._currentdriver;
        }
    
        /// <summary>
        /// The COM port of the Harp Behavior.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("behavior", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="behavior")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the Harp Behavior.")]
        public string Behavior
        {
            get
            {
                return _behavior;
            }
            set
            {
                _behavior = value;
            }
        }
    
        /// <summary>
        /// The COM port of the Harp SoundCard.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("soundcard", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="soundcard")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the Harp SoundCard.")]
        public string Soundcard
        {
            get
            {
                return _soundcard;
            }
            set
            {
                _soundcard = value;
            }
        }
    
        /// <summary>
        /// The COM port of the left Harp SyringePump.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left_pump", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_pump")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the left Harp SyringePump.")]
        public string LeftPump
        {
            get
            {
                return _leftPump;
            }
            set
            {
                _leftPump = value;
            }
        }
    
        /// <summary>
        /// The COM port of the right Harp SyringePump.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_pump", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_pump")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the right Harp SyringePump.")]
        public string RightPump
        {
            get
            {
                return _rightPump;
            }
            set
            {
                _rightPump = value;
            }
        }
    
        /// <summary>
        /// The COM port of the Harp CurrentDriver.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("currentdriver", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="currentdriver")]
        [System.ComponentModel.DescriptionAttribute("The COM port of the Harp CurrentDriver.")]
        public string Currentdriver
        {
            get
            {
                return _currentdriver;
            }
            set
            {
                _currentdriver = value;
            }
        }
    
        public System.IObservable<Ports> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Ports(this)));
        }
    
        public System.IObservable<Ports> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Ports(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("behavior = " + _behavior + ", ");
            stringBuilder.Append("soundcard = " + _soundcard + ", ");
            stringBuilder.Append("left_pump = " + _leftPump + ", ");
            stringBuilder.Append("right_pump = " + _rightPump + ", ");
            stringBuilder.Append("currentdriver = " + _currentdriver);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Config
    {
    
        private int _setup;
    
        private Ports _ports = new Ports();
    
        private Paths _paths = new Paths();
    
        public Config()
        {
        }
    
        protected Config(Config other)
        {
            _setup = other._setup;
            _ports = other._ports;
            _paths = other._paths;
        }
    
        /// <summary>
        /// The setup number.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("setup", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="setup")]
        [System.ComponentModel.DescriptionAttribute("The setup number.")]
        public int Setup
        {
            get
            {
                return _setup;
            }
            set
            {
                _setup = value;
            }
        }
    
        /// <summary>
        /// Contains the COM ports for the different Harp boards.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ports", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ports")]
        [System.ComponentModel.DescriptionAttribute("Contains the COM ports for the different Harp boards.")]
        public Ports Ports
        {
            get
            {
                return _ports;
            }
            set
            {
                _ports = value;
            }
        }
    
        /// <summary>
        /// Contains the paths to the configuration files and to the output directory.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("paths", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="paths")]
        [System.ComponentModel.DescriptionAttribute("Contains the paths to the configuration files and to the output directory.")]
        public Paths Paths
        {
            get
            {
                return _paths;
            }
            set
            {
                _paths = value;
            }
        }
    
        public System.IObservable<Config> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Config(this)));
        }
    
        public System.IObservable<Config> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Config(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("setup = " + _setup + ", ");
            stringBuilder.Append("ports = " + _ports + ", ");
            stringBuilder.Append("paths = " + _paths);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<Paths> source)
        {
            return Process<Paths>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ports> source)
        {
            return Process<Ports>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Config> source)
        {
            return Process<Config>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Paths>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ports>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Config>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<Config>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Paths> source)
        {
            return Process<Paths>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Ports> source)
        {
            return Process<Ports>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Config> source)
        {
            return Process<Config>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Paths>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Ports>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Config>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<Config>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}