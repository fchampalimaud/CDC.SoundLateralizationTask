//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace Training
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ABL
    {
    
        private bool _useFixedAbl;
    
        private bool _changeEveryTrial;
    
        public ABL()
        {
        }
    
        protected ABL(ABL other)
        {
            _useFixedAbl = other._useFixedAbl;
            _changeEveryTrial = other._changeEveryTrial;
        }
    
        /// <summary>
        /// Indicates whether the fixed_abl from the animal.yml file should be used (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_fixed_abl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_fixed_abl")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the fixed_abl from the animal.yml file should be used (true) or" +
            " not (false).")]
        public bool UseFixedAbl
        {
            get
            {
                return _useFixedAbl;
            }
            set
            {
                _useFixedAbl = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the ABL should change every trial (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("change_every_trial", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="change_every_trial")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the ABL should change every trial (true) or not (false).")]
        public bool ChangeEveryTrial
        {
            get
            {
                return _changeEveryTrial;
            }
            set
            {
                _changeEveryTrial = value;
            }
        }
    
        public System.IObservable<ABL> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ABL(this)));
        }
    
        public System.IObservable<ABL> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ABL(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("use_fixed_abl = " + _useFixedAbl + ", ");
            stringBuilder.Append("change_every_trial = " + _changeEveryTrial);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CriticalPerformance
    {
    
        private double _value;
    
        private bool _usePerformance;
    
        public CriticalPerformance()
        {
        }
    
        protected CriticalPerformance(CriticalPerformance other)
        {
            _value = other._value;
            _usePerformance = other._usePerformance;
        }
    
        /// <summary>
        /// The minimum correct answer ratio required to advance to the next block (if use_performance is true).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="value")]
        [System.ComponentModel.DescriptionAttribute("The minimum correct answer ratio required to advance to the next block (if use_pe" +
            "rformance is true).")]
        public double Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        /// <summary>
        /// Indicates whether there is a minimum performance requirement to advance to the next block.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_performance", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_performance")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether there is a minimum performance requirement to advance to the ne" +
            "xt block.")]
        public bool UsePerformance
        {
            get
            {
                return _usePerformance;
            }
            set
            {
                _usePerformance = value;
            }
        }
    
        public System.IObservable<CriticalPerformance> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CriticalPerformance(this)));
        }
    
        public System.IObservable<CriticalPerformance> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CriticalPerformance(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("value = " + _value + ", ");
            stringBuilder.Append("use_performance = " + _usePerformance);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class FixationTime
    {
    
        private double _optoExpMean;
    
        private double _soundExpMean;
    
        public FixationTime()
        {
        }
    
        protected FixationTime(FixationTime other)
        {
            _optoExpMean = other._optoExpMean;
            _soundExpMean = other._soundExpMean;
        }
    
        /// <summary>
        /// The mean value of the random part of the optogenetics onset time (ms), which follows an exponential distribution.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("opto_exp_mean", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="opto_exp_mean")]
        [System.ComponentModel.DescriptionAttribute("The mean value of the random part of the optogenetics onset time (ms), which foll" +
            "ows an exponential distribution.")]
        public double OptoExpMean
        {
            get
            {
                return _optoExpMean;
            }
            set
            {
                _optoExpMean = value;
            }
        }
    
        /// <summary>
        /// The mean value of the random part of the sound onset time (ms), which follows an exponential distribution.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sound_exp_mean", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sound_exp_mean")]
        [System.ComponentModel.DescriptionAttribute("The mean value of the random part of the sound onset time (ms), which follows an " +
            "exponential distribution.")]
        public double SoundExpMean
        {
            get
            {
                return _soundExpMean;
            }
            set
            {
                _soundExpMean = value;
            }
        }
    
        public System.IObservable<FixationTime> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new FixationTime(this)));
        }
    
        public System.IObservable<FixationTime> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new FixationTime(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("opto_exp_mean = " + _optoExpMean + ", ");
            stringBuilder.Append("sound_exp_mean = " + _soundExpMean);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ILD
    {
    
        private bool _fullyLateralized;
    
        private double _stepSize;
    
        private int _numSteps;
    
        private bool _useLog;
    
        private double _logBase;
    
        public ILD()
        {
        }
    
        protected ILD(ILD other)
        {
            _fullyLateralized = other._fullyLateralized;
            _stepSize = other._stepSize;
            _numSteps = other._numSteps;
            _useLog = other._useLog;
            _logBase = other._logBase;
        }
    
        /// <summary>
        /// In the fully lateralized variation of the task, the real ILD value corresponds to the input ABL and the real ABL value corresponds to half of it. For example, if the input ABL value is 50 db SPL, one of the speakers will produce a sound of 50 dB SPL and the other one will produce a sound of 0 dB SPL. This parameter indicates whether to apply the fully lateralized variation of the task (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fully_lateralized", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fully_lateralized")]
        [System.ComponentModel.DescriptionAttribute(@"In the fully lateralized variation of the task, the real ILD value corresponds to the input ABL and the real ABL value corresponds to half of it. For example, if the input ABL value is 50 db SPL, one of the speakers will produce a sound of 50 dB SPL and the other one will produce a sound of 0 dB SPL. This parameter indicates whether to apply the fully lateralized variation of the task (true) or not (false).")]
        public bool FullyLateralized
        {
            get
            {
                return _fullyLateralized;
            }
            set
            {
                _fullyLateralized = value;
            }
        }
    
        /// <summary>
        /// The separation between two consecutive |ILD| values.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("step_size", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="step_size")]
        [System.ComponentModel.DescriptionAttribute("The separation between two consecutive |ILD| values.")]
        public double StepSize
        {
            get
            {
                return _stepSize;
            }
            set
            {
                _stepSize = value;
            }
        }
    
        /// <summary>
        /// The number of |ILD| values.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("num_steps", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="num_steps")]
        [System.ComponentModel.DescriptionAttribute("The number of |ILD| values.")]
        public int NumSteps
        {
            get
            {
                return _numSteps;
            }
            set
            {
                _numSteps = value;
            }
        }
    
        /// <summary>
        /// Indicates whether to use logarithmic steps between consecutive ILD values.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_log", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_log")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether to use logarithmic steps between consecutive ILD values.")]
        public bool UseLog
        {
            get
            {
                return _useLog;
            }
            set
            {
                _useLog = value;
            }
        }
    
        /// <summary>
        /// The base of the logarithm.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("log_base", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="log_base")]
        [System.ComponentModel.DescriptionAttribute("The base of the logarithm.")]
        public double LogBase
        {
            get
            {
                return _logBase;
            }
            set
            {
                _logBase = value;
            }
        }
    
        public System.IObservable<ILD> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ILD(this)));
        }
    
        public System.IObservable<ILD> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ILD(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("fully_lateralized = " + _fullyLateralized + ", ");
            stringBuilder.Append("step_size = " + _stepSize + ", ");
            stringBuilder.Append("num_steps = " + _numSteps + ", ");
            stringBuilder.Append("use_log = " + _useLog + ", ");
            stringBuilder.Append("log_base = " + _logBase);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ITI
    {
    
        private double _value;
    
        private bool _canReset;
    
        public ITI()
        {
        }
    
        protected ITI(ITI other)
        {
            _value = other._value;
            _canReset = other._canReset;
        }
    
        /// <summary>
        /// The intended ITI duration (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("value", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="value")]
        [System.ComponentModel.DescriptionAttribute("The intended ITI duration (s).")]
        public double Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the ITI partially resets if the animal tries to poke in the CNP before it ends.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("can_reset", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="can_reset")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the ITI partially resets if the animal tries to poke in the CNP" +
            " before it ends.")]
        public bool CanReset
        {
            get
            {
                return _canReset;
            }
            set
            {
                _canReset = value;
            }
        }
    
        public System.IObservable<ITI> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ITI(this)));
        }
    
        public System.IObservable<ITI> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ITI(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("value = " + _value + ", ");
            stringBuilder.Append("can_reset = " + _canReset);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Level
    {
    
        private int _levelId;
    
        private int _trialsPerBlock;
    
        private Sound _sound = new Sound();
    
        private ITI _iti = new ITI();
    
        private double _maxWait;
    
        private FixationTime _fixationTime = new FixationTime();
    
        private ReactionTime _reactionTime = new ReactionTime();
    
        private double _maxMt;
    
        private PenaltyTimes _penaltyTimes = new PenaltyTimes();
    
        private CriticalPerformance _criticalPerformance = new CriticalPerformance();
    
        private int _maxAborts;
    
        private TrialRepetition _trialRepetition = new TrialRepetition();
    
        private bool _speakers;
    
        public Level()
        {
        }
    
        protected Level(Level other)
        {
            _levelId = other._levelId;
            _trialsPerBlock = other._trialsPerBlock;
            _sound = other._sound;
            _iti = other._iti;
            _maxWait = other._maxWait;
            _fixationTime = other._fixationTime;
            _reactionTime = other._reactionTime;
            _maxMt = other._maxMt;
            _penaltyTimes = other._penaltyTimes;
            _criticalPerformance = other._criticalPerformance;
            _maxAborts = other._maxAborts;
            _trialRepetition = other._trialRepetition;
            _speakers = other._speakers;
        }
    
        /// <summary>
        /// The ID number of the training level.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("level_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="level_id")]
        [System.ComponentModel.DescriptionAttribute("The ID number of the training level.")]
        public int LevelId
        {
            get
            {
                return _levelId;
            }
            set
            {
                _levelId = value;
            }
        }
    
        /// <summary>
        /// The number of trials that a block of the current level has.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("trials_per_block", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trials_per_block")]
        [System.ComponentModel.DescriptionAttribute("The number of trials that a block of the current level has.")]
        public int TrialsPerBlock
        {
            get
            {
                return _trialsPerBlock;
            }
            set
            {
                _trialsPerBlock = value;
            }
        }
    
        /// <summary>
        /// Contains the sound-related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sound", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sound")]
        [System.ComponentModel.DescriptionAttribute("Contains the sound-related parameters.")]
        public Sound Sound
        {
            get
            {
                return _sound;
            }
            set
            {
                _sound = value;
            }
        }
    
        /// <summary>
        /// Contains the parameters related to the Inter-trial Interval.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("iti", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="iti")]
        [System.ComponentModel.DescriptionAttribute("Contains the parameters related to the Inter-trial Interval.")]
        public ITI Iti
        {
            get
            {
                return _iti;
            }
            set
            {
                _iti = value;
            }
        }
    
        /// <summary>
        /// The maximum allowed time to start the trial (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_wait", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max_wait")]
        [System.ComponentModel.DescriptionAttribute("The maximum allowed time to start the trial (s).")]
        public double MaxWait
        {
            get
            {
                return _maxWait;
            }
            set
            {
                _maxWait = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the fixation time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("fixation_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixation_time")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the fixation time.")]
        public FixationTime FixationTime
        {
            get
            {
                return _fixationTime;
            }
            set
            {
                _fixationTime = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the reaction time.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("reaction_time", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="reaction_time")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the reaction time.")]
        public ReactionTime ReactionTime
        {
            get
            {
                return _reactionTime;
            }
            set
            {
                _reactionTime = value;
            }
        }
    
        /// <summary>
        /// The maximum allowed movement time (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_mt", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max_mt")]
        [System.ComponentModel.DescriptionAttribute("The maximum allowed movement time (s).")]
        public double MaxMt
        {
            get
            {
                return _maxMt;
            }
            set
            {
                _maxMt = value;
            }
        }
    
        /// <summary>
        /// Contains the penalty times for different ocasions.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("penalty_times", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="penalty_times")]
        [System.ComponentModel.DescriptionAttribute("Contains the penalty times for different ocasions.")]
        public PenaltyTimes PenaltyTimes
        {
            get
            {
                return _penaltyTimes;
            }
            set
            {
                _penaltyTimes = value;
            }
        }
    
        /// <summary>
        /// Contains the critical performance for the animal to progress to the next level and whether this feature is used or not.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("critical_performance", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="critical_performance")]
        [System.ComponentModel.DescriptionAttribute("Contains the critical performance for the animal to progress to the next level an" +
            "d whether this feature is used or not.")]
        public CriticalPerformance CriticalPerformance
        {
            get
            {
                return _criticalPerformance;
            }
            set
            {
                _criticalPerformance = value;
            }
        }
    
        /// <summary>
        /// NOT IMPLEMENTED!!
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max_aborts", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="max_aborts")]
        [System.ComponentModel.DescriptionAttribute("NOT IMPLEMENTED!!")]
        public int MaxAborts
        {
            get
            {
                return _maxAborts;
            }
            set
            {
                _maxAborts = value;
            }
        }
    
        /// <summary>
        /// Contains the conditions for which a certain trial should be repeated.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("trial_repetition", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="trial_repetition")]
        [System.ComponentModel.DescriptionAttribute("Contains the conditions for which a certain trial should be repeated.")]
        public TrialRepetition TrialRepetition
        {
            get
            {
                return _trialRepetition;
            }
            set
            {
                _trialRepetition = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the animal is using headphones (true) or box speakers (false). At the moment, this parameter doesn't modify the behavior of the task. Perhaps in the future, it might be possible to input the calibration curves of both the box speakers and the headphones so that this parameter switches to the correct calibration curves.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("speakers", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="speakers")]
        [System.ComponentModel.DescriptionAttribute(@"Indicates whether the animal is using headphones (true) or box speakers (false). At the moment, this parameter doesn't modify the behavior of the task. Perhaps in the future, it might be possible to input the calibration curves of both the box speakers and the headphones so that this parameter switches to the correct calibration curves.")]
        public bool Speakers
        {
            get
            {
                return _speakers;
            }
            set
            {
                _speakers = value;
            }
        }
    
        public System.IObservable<Level> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Level(this)));
        }
    
        public System.IObservable<Level> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Level(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("level_id = " + _levelId + ", ");
            stringBuilder.Append("trials_per_block = " + _trialsPerBlock + ", ");
            stringBuilder.Append("sound = " + _sound + ", ");
            stringBuilder.Append("iti = " + _iti + ", ");
            stringBuilder.Append("max_wait = " + _maxWait + ", ");
            stringBuilder.Append("fixation_time = " + _fixationTime + ", ");
            stringBuilder.Append("reaction_time = " + _reactionTime + ", ");
            stringBuilder.Append("max_mt = " + _maxMt + ", ");
            stringBuilder.Append("penalty_times = " + _penaltyTimes + ", ");
            stringBuilder.Append("critical_performance = " + _criticalPerformance + ", ");
            stringBuilder.Append("max_aborts = " + _maxAborts + ", ");
            stringBuilder.Append("trial_repetition = " + _trialRepetition + ", ");
            stringBuilder.Append("speakers = " + _speakers);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PenaltyTimes
    {
    
        private double _incorrect;
    
        private double _abort;
    
        private double _fixationAbort;
    
        public PenaltyTimes()
        {
        }
    
        protected PenaltyTimes(PenaltyTimes other)
        {
            _incorrect = other._incorrect;
            _abort = other._abort;
            _fixationAbort = other._fixationAbort;
        }
    
        /// <summary>
        /// The penalty time to be applied when the animal answers incorrectly.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("incorrect", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="incorrect")]
        [System.ComponentModel.DescriptionAttribute("The penalty time to be applied when the animal answers incorrectly.")]
        public double Incorrect
        {
            get
            {
                return _incorrect;
            }
            set
            {
                _incorrect = value;
            }
        }
    
        /// <summary>
        /// The penalty time to be applied when the animal aborts a trial (except if it's a fixation abort).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("abort", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abort")]
        [System.ComponentModel.DescriptionAttribute("The penalty time to be applied when the animal aborts a trial (except if it\'s a f" +
            "ixation abort).")]
        public double Abort
        {
            get
            {
                return _abort;
            }
            set
            {
                _abort = value;
            }
        }
    
        /// <summary>
        /// The penalty time to be applied in case of a fixation abort.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fixation_abort", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixation_abort")]
        [System.ComponentModel.DescriptionAttribute("The penalty time to be applied in case of a fixation abort.")]
        public double FixationAbort
        {
            get
            {
                return _fixationAbort;
            }
            set
            {
                _fixationAbort = value;
            }
        }
    
        public System.IObservable<PenaltyTimes> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PenaltyTimes(this)));
        }
    
        public System.IObservable<PenaltyTimes> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PenaltyTimes(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("incorrect = " + _incorrect + ", ");
            stringBuilder.Append("abort = " + _abort + ", ");
            stringBuilder.Append("fixation_abort = " + _fixationAbort);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ReactionTime
    {
    
        private bool _turnSoundOff;
    
        private bool _useMinRt;
    
        private bool _useMaxRt;
    
        public ReactionTime()
        {
        }
    
        protected ReactionTime(ReactionTime other)
        {
            _turnSoundOff = other._turnSoundOff;
            _useMinRt = other._useMinRt;
            _useMaxRt = other._useMaxRt;
        }
    
        /// <summary>
        /// Indicates whether the sound should stop playing when the animal leaves the central poke.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("turn_sound_off", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="turn_sound_off")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the sound should stop playing when the animal leaves the centra" +
            "l poke.")]
        public bool TurnSoundOff
        {
            get
            {
                return _turnSoundOff;
            }
            set
            {
                _turnSoundOff = value;
            }
        }
    
        /// <summary>
        /// Indicates whether there is a minimum reaction time (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_min_rt", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_min_rt")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether there is a minimum reaction time (true) or not (false).")]
        public bool UseMinRt
        {
            get
            {
                return _useMinRt;
            }
            set
            {
                _useMinRt = value;
            }
        }
    
        /// <summary>
        /// Indicates whether there is a maximum reaction time (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_max_rt", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_max_rt")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether there is a maximum reaction time (true) or not (false).")]
        public bool UseMaxRt
        {
            get
            {
                return _useMaxRt;
            }
            set
            {
                _useMaxRt = value;
            }
        }
    
        public System.IObservable<ReactionTime> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ReactionTime(this)));
        }
    
        public System.IObservable<ReactionTime> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ReactionTime(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("turn_sound_off = " + _turnSoundOff + ", ");
            stringBuilder.Append("use_min_rt = " + _useMinRt + ", ");
            stringBuilder.Append("use_max_rt = " + _useMaxRt);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Sound
    {
    
        private ABL _abl = new ABL();
    
        private ILD _ild = new ILD();
    
        public Sound()
        {
        }
    
        protected Sound(Sound other)
        {
            _abl = other._abl;
            _ild = other._ild;
        }
    
        /// <summary>
        /// Contains the ABL-related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("abl", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="abl")]
        [System.ComponentModel.DescriptionAttribute("Contains the ABL-related parameters.")]
        public ABL Abl
        {
            get
            {
                return _abl;
            }
            set
            {
                _abl = value;
            }
        }
    
        /// <summary>
        /// Contains the ILD-related parameters.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("ild", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ild")]
        [System.ComponentModel.DescriptionAttribute("Contains the ILD-related parameters.")]
        public ILD Ild
        {
            get
            {
                return _ild;
            }
            set
            {
                _ild = value;
            }
        }
    
        public System.IObservable<Sound> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Sound(this)));
        }
    
        public System.IObservable<Sound> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Sound(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("abl = " + _abl + ", ");
            stringBuilder.Append("ild = " + _ild);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TrialRepetition
    {
    
        private bool _repeatErrors;
    
        private bool _repeatAborts;
    
        public TrialRepetition()
        {
        }
    
        protected TrialRepetition(TrialRepetition other)
        {
            _repeatErrors = other._repeatErrors;
            _repeatAborts = other._repeatAborts;
        }
    
        /// <summary>
        /// Indicates whether the stimulus is repeated after incorrect responses.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_errors", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="repeat_errors")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the stimulus is repeated after incorrect responses.")]
        public bool RepeatErrors
        {
            get
            {
                return _repeatErrors;
            }
            set
            {
                _repeatErrors = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the stimulus is repeated after aborts.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("repeat_aborts", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="repeat_aborts")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the stimulus is repeated after aborts.")]
        public bool RepeatAborts
        {
            get
            {
                return _repeatAborts;
            }
            set
            {
                _repeatAborts = value;
            }
        }
    
        public System.IObservable<TrialRepetition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TrialRepetition(this)));
        }
    
        public System.IObservable<TrialRepetition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TrialRepetition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("repeat_errors = " + _repeatErrors + ", ");
            stringBuilder.Append("repeat_aborts = " + _repeatAborts);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Training
    {
    
        private System.Collections.Generic.List<Level> _levels = new System.Collections.Generic.List<Level>();
    
        public Training()
        {
        }
    
        protected Training(Training other)
        {
            _levels = other._levels;
        }
    
        /// <summary>
        /// The list containing the parameters to be used for each training level.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("levels", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="levels")]
        [System.ComponentModel.DescriptionAttribute("The list containing the parameters to be used for each training level.")]
        public System.Collections.Generic.List<Level> Levels
        {
            get
            {
                return _levels;
            }
            set
            {
                _levels = value;
            }
        }
    
        public System.IObservable<Training> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Training(this)));
        }
    
        public System.IObservable<Training> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Training(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("levels = " + _levels);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<ABL> source)
        {
            return Process<ABL>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CriticalPerformance> source)
        {
            return Process<CriticalPerformance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FixationTime> source)
        {
            return Process<FixationTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ILD> source)
        {
            return Process<ILD>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ITI> source)
        {
            return Process<ITI>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Level> source)
        {
            return Process<Level>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PenaltyTimes> source)
        {
            return Process<PenaltyTimes>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ReactionTime> source)
        {
            return Process<ReactionTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sound> source)
        {
            return Process<Sound>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TrialRepetition> source)
        {
            return Process<TrialRepetition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Training> source)
        {
            return Process<Training>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ABL>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CriticalPerformance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FixationTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ILD>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ITI>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Level>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PenaltyTimes>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ReactionTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sound>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TrialRepetition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Training>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<Training>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<ABL> source)
        {
            return Process<ABL>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CriticalPerformance> source)
        {
            return Process<CriticalPerformance>(source);
        }

        public System.IObservable<string> Process(System.IObservable<FixationTime> source)
        {
            return Process<FixationTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ILD> source)
        {
            return Process<ILD>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ITI> source)
        {
            return Process<ITI>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Level> source)
        {
            return Process<Level>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PenaltyTimes> source)
        {
            return Process<PenaltyTimes>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ReactionTime> source)
        {
            return Process<ReactionTime>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sound> source)
        {
            return Process<Sound>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TrialRepetition> source)
        {
            return Process<TrialRepetition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Training> source)
        {
            return Process<Training>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ABL>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CriticalPerformance>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<FixationTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ILD>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ITI>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Level>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PenaltyTimes>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ReactionTime>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sound>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TrialRepetition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Training>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<Training>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}