//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace SetupList
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Lights
    {
    
        private double _boxPeriod;
    
        private double _boxDutyCycle;
    
        private double _pokePeriod;
    
        private double _pokeDutyCycle;
    
        private bool _itiLight;
    
        private bool _pokeLight;
    
        private bool _fixationLight;
    
        private bool _penaltyLight;
    
        public Lights()
        {
        }
    
        protected Lights(Lights other)
        {
            _boxPeriod = other._boxPeriod;
            _boxDutyCycle = other._boxDutyCycle;
            _pokePeriod = other._pokePeriod;
            _pokeDutyCycle = other._pokeDutyCycle;
            _itiLight = other._itiLight;
            _pokeLight = other._pokeLight;
            _fixationLight = other._fixationLight;
            _penaltyLight = other._penaltyLight;
        }
    
        /// <summary>
        /// The period of the blinking of the box LED (ms).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("box_period", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="box_period")]
        [System.ComponentModel.DescriptionAttribute("The period of the blinking of the box LED (ms).")]
        public double BoxPeriod
        {
            get
            {
                return _boxPeriod;
            }
            set
            {
                _boxPeriod = value;
            }
        }
    
        /// <summary>
        /// The value representing the proportion of time the LED is on when the box LED is blinking. If it's 0 it means that the LED is always off, if it's 1 it means the LED is always on and, for example, if it's 0.5 it means that the LED is on half of the time and off for the remaining half.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("box_duty_cycle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="box_duty_cycle")]
        [System.ComponentModel.DescriptionAttribute(@"The value representing the proportion of time the LED is on when the box LED is blinking. If it's 0 it means that the LED is always off, if it's 1 it means the LED is always on and, for example, if it's 0.5 it means that the LED is on half of the time and off for the remaining half.")]
        public double BoxDutyCycle
        {
            get
            {
                return _boxDutyCycle;
            }
            set
            {
                _boxDutyCycle = value;
            }
        }
    
        /// <summary>
        /// The period of the blinking of the central poke LED (ms).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("poke_period", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="poke_period")]
        [System.ComponentModel.DescriptionAttribute("The period of the blinking of the central poke LED (ms).")]
        public double PokePeriod
        {
            get
            {
                return _pokePeriod;
            }
            set
            {
                _pokePeriod = value;
            }
        }
    
        /// <summary>
        /// The value representing the proportion of time the LED is on when the central poke LED is blinking. If it's 0 it means that the LED is always off, if it's 1 it means the LED is always on and, for example, if it's 0.5 it means that the LED is on half of the time and off for the remaining half.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("poke_duty_cycle", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="poke_duty_cycle")]
        [System.ComponentModel.DescriptionAttribute(@"The value representing the proportion of time the LED is on when the central poke LED is blinking. If it's 0 it means that the LED is always off, if it's 1 it means the LED is always on and, for example, if it's 0.5 it means that the LED is on half of the time and off for the remaining half.")]
        public double PokeDutyCycle
        {
            get
            {
                return _pokeDutyCycle;
            }
            set
            {
                _pokeDutyCycle = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the box LED should turn of when the new trial is ready (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("iti_light", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="iti_light")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the box LED should turn of when the new trial is ready (true) o" +
            "r not (false).")]
        public bool ItiLight
        {
            get
            {
                return _itiLight;
            }
            set
            {
                _itiLight = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the central poke LED should turn of when the new trial is ready (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("poke_light", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="poke_light")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the central poke LED should turn of when the new trial is ready" +
            " (true) or not (false).")]
        public bool PokeLight
        {
            get
            {
                return _pokeLight;
            }
            set
            {
                _pokeLight = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the central poke LED should blink during fixation time (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("fixation_light", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="fixation_light")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the central poke LED should blink during fixation time (true) o" +
            "r not (false).")]
        public bool FixationLight
        {
            get
            {
                return _fixationLight;
            }
            set
            {
                _fixationLight = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the box LED should blink during penalty times (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("penalty_light", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="penalty_light")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the box LED should blink during penalty times (true) or not (fa" +
            "lse).")]
        public bool PenaltyLight
        {
            get
            {
                return _penaltyLight;
            }
            set
            {
                _penaltyLight = value;
            }
        }
    
        public System.IObservable<Lights> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Lights(this)));
        }
    
        public System.IObservable<Lights> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Lights(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("box_period = " + _boxPeriod + ", ");
            stringBuilder.Append("box_duty_cycle = " + _boxDutyCycle + ", ");
            stringBuilder.Append("poke_period = " + _pokePeriod + ", ");
            stringBuilder.Append("poke_duty_cycle = " + _pokeDutyCycle + ", ");
            stringBuilder.Append("iti_light = " + _itiLight + ", ");
            stringBuilder.Append("poke_light = " + _pokeLight + ", ");
            stringBuilder.Append("fixation_light = " + _fixationLight + ", ");
            stringBuilder.Append("penalty_light = " + _penaltyLight);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Poke
    {
    
        private bool _lowToHigh;
    
        public Poke()
        {
        }
    
        protected Poke(Poke other)
        {
            _lowToHigh = other._lowToHigh;
        }
    
        /// <summary>
        /// Indicates whether the poke is a low-to-high (true) or a high-to-low (false) device.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("low_to_high", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="low_to_high")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the poke is a low-to-high (true) or a high-to-low (false) devic" +
            "e.")]
        public bool LowToHigh
        {
            get
            {
                return _lowToHigh;
            }
            set
            {
                _lowToHigh = value;
            }
        }
    
        public System.IObservable<Poke> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Poke(this)));
        }
    
        public System.IObservable<Poke> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Poke(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("low_to_high = " + _lowToHigh);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Setup
    {
    
        private int _setupId;
    
        private Poke _leftPoke = new Poke();
    
        private Poke _centerPoke = new Poke();
    
        private Poke _rightPoke = new Poke();
    
        private Speakers _speakers = new Speakers();
    
        private Lights _lights = new Lights();
    
        private SyringePumps _syringePumps = new SyringePumps();
    
        private System.Collections.Generic.List<Sound> _sounds = new System.Collections.Generic.List<Sound>();
    
        private bool _useCamera;
    
        public Setup()
        {
        }
    
        protected Setup(Setup other)
        {
            _setupId = other._setupId;
            _leftPoke = other._leftPoke;
            _centerPoke = other._centerPoke;
            _rightPoke = other._rightPoke;
            _speakers = other._speakers;
            _lights = other._lights;
            _syringePumps = other._syringePumps;
            _sounds = other._sounds;
            _useCamera = other._useCamera;
        }
    
        /// <summary>
        /// The ID number of the setup.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("setup_id", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="setup_id")]
        [System.ComponentModel.DescriptionAttribute("The ID number of the setup.")]
        public int SetupId
        {
            get
            {
                return _setupId;
            }
            set
            {
                _setupId = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the left poke.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("left_poke", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_poke")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the left poke.")]
        public Poke LeftPoke
        {
            get
            {
                return _leftPoke;
            }
            set
            {
                _leftPoke = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the center poke.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("center_poke", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="center_poke")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the center poke.")]
        public Poke CenterPoke
        {
            get
            {
                return _centerPoke;
            }
            set
            {
                _centerPoke = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the right poke.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("right_poke", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_poke")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the right poke.")]
        public Poke RightPoke
        {
            get
            {
                return _rightPoke;
            }
            set
            {
                _rightPoke = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the speakers.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("speakers", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="speakers")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the speakers.")]
        public Speakers Speakers
        {
            get
            {
                return _speakers;
            }
            set
            {
                _speakers = value;
            }
        }
    
        /// <summary>
        /// Contains parameters related to the box and poke LEDs.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("lights", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="lights")]
        [System.ComponentModel.DescriptionAttribute("Contains parameters related to the box and poke LEDs.")]
        public Lights Lights
        {
            get
            {
                return _lights;
            }
            set
            {
                _lights = value;
            }
        }
    
        /// <summary>
        /// Contains the parameters related to the SyringePumps.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("syringe_pumps", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="syringe_pumps")]
        [System.ComponentModel.DescriptionAttribute("Contains the parameters related to the SyringePumps.")]
        public SyringePumps SyringePumps
        {
            get
            {
                return _syringePumps;
            }
            set
            {
                _syringePumps = value;
            }
        }
    
        /// <summary>
        /// The list with information regarding the sounds uploaded to the Harp SoundCard.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("sounds", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sounds")]
        [System.ComponentModel.DescriptionAttribute("The list with information regarding the sounds uploaded to the Harp SoundCard.")]
        public System.Collections.Generic.List<Sound> Sounds
        {
            get
            {
                return _sounds;
            }
            set
            {
                _sounds = value;
            }
        }
    
        /// <summary>
        /// Indicates whether the setup has a camera (true) or not (false).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_camera", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_camera")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the setup has a camera (true) or not (false).")]
        public bool UseCamera
        {
            get
            {
                return _useCamera;
            }
            set
            {
                _useCamera = value;
            }
        }
    
        public System.IObservable<Setup> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Setup(this)));
        }
    
        public System.IObservable<Setup> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Setup(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("setup_id = " + _setupId + ", ");
            stringBuilder.Append("left_poke = " + _leftPoke + ", ");
            stringBuilder.Append("center_poke = " + _centerPoke + ", ");
            stringBuilder.Append("right_poke = " + _rightPoke + ", ");
            stringBuilder.Append("speakers = " + _speakers + ", ");
            stringBuilder.Append("lights = " + _lights + ", ");
            stringBuilder.Append("syringe_pumps = " + _syringePumps + ", ");
            stringBuilder.Append("sounds = " + _sounds + ", ");
            stringBuilder.Append("use_camera = " + _useCamera);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Sound
    {
    
        private int _index;
    
        private double _duration;
    
        public Sound()
        {
        }
    
        protected Sound(Sound other)
        {
            _index = other._index;
            _duration = other._duration;
        }
    
        /// <summary>
        /// The index number where the noise is stored in the Harp SoundCard.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("index", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="index")]
        [System.ComponentModel.DescriptionAttribute("The index number where the noise is stored in the Harp SoundCard.")]
        public int Index
        {
            get
            {
                return _index;
            }
            set
            {
                _index = value;
            }
        }
    
        /// <summary>
        /// The duration of the noise (s).
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("duration", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="duration")]
        [System.ComponentModel.DescriptionAttribute("The duration of the noise (s).")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        public System.IObservable<Sound> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Sound(this)));
        }
    
        public System.IObservable<Sound> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Sound(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("index = " + _index + ", ");
            stringBuilder.Append("duration = " + _duration);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Speakers
    {
    
        private double _leftSlope;
    
        private double _leftIntercept;
    
        private double _rightSlope;
    
        private double _rightIntercept;
    
        public Speakers()
        {
        }
    
        protected Speakers(Speakers other)
        {
            _leftSlope = other._leftSlope;
            _leftIntercept = other._leftIntercept;
            _rightSlope = other._rightSlope;
            _rightIntercept = other._rightIntercept;
        }
    
        /// <summary>
        /// The slope of the calibration curve of the left speaker.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left_slope", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_slope")]
        [System.ComponentModel.DescriptionAttribute("The slope of the calibration curve of the left speaker.")]
        public double LeftSlope
        {
            get
            {
                return _leftSlope;
            }
            set
            {
                _leftSlope = value;
            }
        }
    
        /// <summary>
        /// The intercept of the calibration curve of the left speaker.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left_intercept", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_intercept")]
        [System.ComponentModel.DescriptionAttribute("The intercept of the calibration curve of the left speaker.")]
        public double LeftIntercept
        {
            get
            {
                return _leftIntercept;
            }
            set
            {
                _leftIntercept = value;
            }
        }
    
        /// <summary>
        /// The slope of the calibration curve of the right speaker.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_slope", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_slope")]
        [System.ComponentModel.DescriptionAttribute("The slope of the calibration curve of the right speaker.")]
        public double RightSlope
        {
            get
            {
                return _rightSlope;
            }
            set
            {
                _rightSlope = value;
            }
        }
    
        /// <summary>
        /// The intercept of the calibration curve of the right speaker.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_intercept", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_intercept")]
        [System.ComponentModel.DescriptionAttribute("The intercept of the calibration curve of the right speaker.")]
        public double RightIntercept
        {
            get
            {
                return _rightIntercept;
            }
            set
            {
                _rightIntercept = value;
            }
        }
    
        public System.IObservable<Speakers> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Speakers(this)));
        }
    
        public System.IObservable<Speakers> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Speakers(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("left_slope = " + _leftSlope + ", ");
            stringBuilder.Append("left_intercept = " + _leftIntercept + ", ");
            stringBuilder.Append("right_slope = " + _rightSlope + ", ");
            stringBuilder.Append("right_intercept = " + _rightIntercept);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SyringePumps
    {
    
        private bool _usePumps;
    
        private double _leftSlope;
    
        private double _leftIntercept;
    
        private double _rightSlope;
    
        private double _rightIntercept;
    
        public SyringePumps()
        {
        }
    
        protected SyringePumps(SyringePumps other)
        {
            _usePumps = other._usePumps;
            _leftSlope = other._leftSlope;
            _leftIntercept = other._leftIntercept;
            _rightSlope = other._rightSlope;
            _rightIntercept = other._rightIntercept;
        }
    
        /// <summary>
        /// Indicates whether the setup uses valves (false) or Harp SyringePumps (true) for reward delivery.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("use_pumps", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="use_pumps")]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the setup uses valves (false) or Harp SyringePumps (true) for r" +
            "eward delivery.")]
        public bool UsePumps
        {
            get
            {
                return _usePumps;
            }
            set
            {
                _usePumps = value;
            }
        }
    
        /// <summary>
        /// The slope of the calibration curve of the left Harp SyringePump.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left_slope", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_slope")]
        [System.ComponentModel.DescriptionAttribute("The slope of the calibration curve of the left Harp SyringePump.")]
        public double LeftSlope
        {
            get
            {
                return _leftSlope;
            }
            set
            {
                _leftSlope = value;
            }
        }
    
        /// <summary>
        /// The intercept of the calibration curve of the left Harp SyringePump.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("left_intercept", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="left_intercept")]
        [System.ComponentModel.DescriptionAttribute("The intercept of the calibration curve of the left Harp SyringePump.")]
        public double LeftIntercept
        {
            get
            {
                return _leftIntercept;
            }
            set
            {
                _leftIntercept = value;
            }
        }
    
        /// <summary>
        /// The slope of the calibration curve of the right Harp SyringePump.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_slope", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_slope")]
        [System.ComponentModel.DescriptionAttribute("The slope of the calibration curve of the right Harp SyringePump.")]
        public double RightSlope
        {
            get
            {
                return _rightSlope;
            }
            set
            {
                _rightSlope = value;
            }
        }
    
        /// <summary>
        /// The intercept of the calibration curve of the right Harp SyringePump.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("right_intercept", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="right_intercept")]
        [System.ComponentModel.DescriptionAttribute("The intercept of the calibration curve of the right Harp SyringePump.")]
        public double RightIntercept
        {
            get
            {
                return _rightIntercept;
            }
            set
            {
                _rightIntercept = value;
            }
        }
    
        public System.IObservable<SyringePumps> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SyringePumps(this)));
        }
    
        public System.IObservable<SyringePumps> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SyringePumps(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("use_pumps = " + _usePumps + ", ");
            stringBuilder.Append("left_slope = " + _leftSlope + ", ");
            stringBuilder.Append("left_intercept = " + _leftIntercept + ", ");
            stringBuilder.Append("right_slope = " + _rightSlope + ", ");
            stringBuilder.Append("right_intercept = " + _rightIntercept);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SetupList
    {
    
        private System.Collections.Generic.List<Setup> _setups = new System.Collections.Generic.List<Setup>();
    
        public SetupList()
        {
        }
    
        protected SetupList(SetupList other)
        {
            _setups = other._setups;
        }
    
        /// <summary>
        /// The list with the parameters for every existent setup.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("setups", Required=Newtonsoft.Json.Required.Always)]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="setups")]
        [System.ComponentModel.DescriptionAttribute("The list with the parameters for every existent setup.")]
        public System.Collections.Generic.List<Setup> Setups
        {
            get
            {
                return _setups;
            }
            set
            {
                _setups = value;
            }
        }
    
        public System.IObservable<SetupList> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SetupList(this)));
        }
    
        public System.IObservable<SetupList> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SetupList(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("setups = " + _setups);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToJson
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value));
        }

        public System.IObservable<string> Process(System.IObservable<Lights> source)
        {
            return Process<Lights>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Poke> source)
        {
            return Process<Poke>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Setup> source)
        {
            return Process<Setup>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sound> source)
        {
            return Process<Sound>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Speakers> source)
        {
            return Process<Speakers>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SyringePumps> source)
        {
            return Process<SyringePumps>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SetupList> source)
        {
            return Process<SetupList>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Lights>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Poke>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Setup>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sound>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Speakers>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SyringePumps>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SetupList>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<SetupList>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Lights> source)
        {
            return Process<Lights>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Poke> source)
        {
            return Process<Poke>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Setup> source)
        {
            return Process<Setup>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sound> source)
        {
            return Process<Sound>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Speakers> source)
        {
            return Process<Speakers>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SyringePumps> source)
        {
            return Process<SyringePumps>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SetupList> source)
        {
            return Process<SetupList>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.3.0.0 (Newtonsoft.Json v13.0.0.0, YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Lights>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Poke>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Setup>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sound>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Speakers>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SyringePumps>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SetupList>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<SetupList>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}