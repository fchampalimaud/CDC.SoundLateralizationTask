{
  "api/Animal.Animal.html": {
    "href": "api/Animal.Animal.html",
    "title": "Class Animal | CDC.SoundLateralizationTask",
    "keywords": "Class Animal Namespace Animal Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Animal Inheritance object Animal Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Animal() public Animal() Animal(Animal) protected Animal(Animal other) Parameters other Animal Properties AnimalId The ID of the animal. [JsonProperty(\"animal_id\", Required = Required.Always)] [YamlMember(Alias = \"animal_id\")] public string AnimalId { get; set; } Property Value string AutobiasCorrection Contains parameters related to the autobias correction algorithm. [JsonProperty(\"autobias_correction\", Required = Required.Always)] [YamlMember(Alias = \"autobias_correction\")] public AutobiasCorrection AutobiasCorrection { get; set; } Property Value AutobiasCorrection BaseReward The amount of reward delivered to the animal (uL). [JsonProperty(\"base_reward\", Required = Required.Always)] [YamlMember(Alias = \"base_reward\")] public double BaseReward { get; set; } Property Value double Batch The batch to which the current animal belongs to. [JsonProperty(\"batch\", Required = Required.Always)] [YamlMember(Alias = \"batch\")] public string Batch { get; set; } Property Value string FixationTime Contains parameters related to the fixation time. [JsonProperty(\"fixation_time\", Required = Required.Always)] [YamlMember(Alias = \"fixation_time\")] public FixationTime FixationTime { get; set; } Property Value FixationTime LnpTime Contains parameters related to the LNP (Lateral Nose Poke) time. The units of each of the parameters is seconds. [JsonProperty(\"lnp_time\", Required = Required.Always)] [YamlMember(Alias = \"lnp_time\")] public TimeConstrains LnpTime { get; set; } Property Value TimeConstrains MaxReactionTime The maximum allowed reaction time (s). [JsonProperty(\"max_reaction_time\", Required = Required.Always)] [YamlMember(Alias = \"max_reaction_time\")] public double MaxReactionTime { get; set; } Property Value double MinMovementTime The minimum allowed movement time (s). [JsonProperty(\"min_movement_time\", Required = Required.Always)] [YamlMember(Alias = \"min_movement_time\")] public double MinMovementTime { get; set; } Property Value double Optogenetics Contains the optogenetics-related parameters. [JsonProperty(\"optogenetics\", Required = Required.Always)] [YamlMember(Alias = \"optogenetics\")] public Optogenetics Optogenetics { get; set; } Property Value Optogenetics ReactionTime Contains parameters related to the reaction time. The units of each of the parameters is seconds. [JsonProperty(\"reaction_time\", Required = Required.Always)] [YamlMember(Alias = \"reaction_time\")] public TimeConstrains ReactionTime { get; set; } Property Value TimeConstrains Session Contains the session-related parameters. [JsonProperty(\"session\", Required = Required.Always)] [YamlMember(Alias = \"session\")] public Session Session { get; set; } Property Value Session Sound Contains the sound-related parameters. [JsonProperty(\"sound\", Required = Required.Always)] [YamlMember(Alias = \"sound\")] public Sound Sound { get; set; } Property Value Sound Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Animal> Process() Returns IObservable<Animal> Process<TSource>(IObservable<TSource>) public IObservable<Animal> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Animal> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Animal.AutobiasCorrection.html": {
    "href": "api/Animal.AutobiasCorrection.html",
    "title": "Class AutobiasCorrection | CDC.SoundLateralizationTask",
    "keywords": "Class AutobiasCorrection Namespace Animal Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class AutobiasCorrection Inheritance object AutobiasCorrection Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors AutobiasCorrection() public AutobiasCorrection() AutobiasCorrection(AutobiasCorrection) protected AutobiasCorrection(AutobiasCorrection other) Parameters other AutobiasCorrection Properties CutoffBias The minimum |bias| value from which the side rewards start to be corrected. [JsonProperty(\"cutoff_bias\", Required = Required.Always)] [YamlMember(Alias = \"cutoff_bias\")] public double CutoffBias { get; set; } Property Value double PerformanceThreshold The minimum performance value for which the side rewards are not corrected. [JsonProperty(\"performance_threshold\", Required = Required.Always)] [YamlMember(Alias = \"performance_threshold\")] public double PerformanceThreshold { get; set; } Property Value double SlopeMultiplier A multiplying factor to the slope of the increasing reward amount side (corresponds to the non-biased side). [JsonProperty(\"slope_multiplier\", Required = Required.Always)] [YamlMember(Alias = \"slope_multiplier\")] public double SlopeMultiplier { get; set; } Property Value double UseCorrection Indicates whether the autobias correction feature should be used or not. [JsonProperty(\"use_correction\", Required = Required.Always)] [YamlMember(Alias = \"use_correction\")] public bool UseCorrection { get; set; } Property Value bool Window The amount of trials to consider to calculate the animal bias. [JsonProperty(\"window\", Required = Required.Always)] [YamlMember(Alias = \"window\")] public int Window { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<AutobiasCorrection> Process() Returns IObservable<AutobiasCorrection> Process<TSource>(IObservable<TSource>) public IObservable<AutobiasCorrection> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<AutobiasCorrection> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Animal.DeserializeFromJson.html": {
    "href": "api/Animal.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromJson Namespace Animal Assembly Extensions.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() public DeserializeFromJson() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Animal.DeserializeFromYaml.html": {
    "href": "api/Animal.DeserializeFromYaml.html",
    "title": "Class DeserializeFromYaml | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromYaml Namespace Animal Assembly Extensions.dll Deserializes a sequence of YAML strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromYaml : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromYaml Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromYaml() public DeserializeFromYaml() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Animal.FixationTime.html": {
    "href": "api/Animal.FixationTime.html",
    "title": "Class FixationTime | CDC.SoundLateralizationTask",
    "keywords": "Class FixationTime Namespace Animal Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class FixationTime Inheritance object FixationTime Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FixationTime() public FixationTime() FixationTime(FixationTime) protected FixationTime(FixationTime other) Parameters other FixationTime Properties OptoOnsetTime Contains parameters related to the Optogenetics Onset Time part of the Fixation Time. The units of each of the parameters is milliseconds. [JsonProperty(\"opto_onset_time\", Required = Required.Always)] [YamlMember(Alias = \"opto_onset_time\")] public TimeConstrains OptoOnsetTime { get; set; } Property Value TimeConstrains SoundOnsetTime Contains parameters related to the Sound Onset Time part of the Fixation Time. The units of each of the parameters is milliseconds. [JsonProperty(\"sound_onset_time\", Required = Required.Always)] [YamlMember(Alias = \"sound_onset_time\")] public TimeConstrains SoundOnsetTime { get; set; } Property Value TimeConstrains Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<FixationTime> Process() Returns IObservable<FixationTime> Process<TSource>(IObservable<TSource>) public IObservable<FixationTime> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<FixationTime> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Animal.OptoLED.html": {
    "href": "api/Animal.OptoLED.html",
    "title": "Class OptoLED | CDC.SoundLateralizationTask",
    "keywords": "Class OptoLED Namespace Animal Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class OptoLED Inheritance object OptoLED Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors OptoLED() public OptoLED() OptoLED(OptoLED) protected OptoLED(OptoLED other) Parameters other OptoLED Properties DutyCycle The duty cycle of the pulses (%). It only works when use_pulses is true. [JsonProperty(\"duty_cycle\", Required = Required.Always)] [YamlMember(Alias = \"duty_cycle\")] public int DutyCycle { get; set; } Property Value int Frequency The frequency of the pulses (Hz). It only works when use_pulses is true. [JsonProperty(\"frequency\", Required = Required.Always)] [YamlMember(Alias = \"frequency\")] public int Frequency { get; set; } Property Value int Mode Indicates whether the LED port is being used to control an external LED via TTL or if it's controlling a LED directly with the current sources. [JsonProperty(\"mode\", Required = Required.Always)] [YamlMember(Alias = \"mode\")] public OptoLEDMode Mode { get; set; } Property Value OptoLEDMode Power The power with which the animal is stimulated. [JsonProperty(\"power\", Required = Required.Always)] [YamlMember(Alias = \"power\")] public double Power { get; set; } Property Value double UsePulses Indicates whether the optogenetics protocol uses pulses of light (true) or a continuous emission (false). [JsonProperty(\"use_pulses\", Required = Required.Always)] [YamlMember(Alias = \"use_pulses\")] public bool UsePulses { get; set; } Property Value bool Voltage The voltage to use in the TTL signal. [JsonProperty(\"voltage\", Required = Required.Always)] [YamlMember(Alias = \"voltage\")] public double Voltage { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<OptoLED> Process() Returns IObservable<OptoLED> Process<TSource>(IObservable<TSource>) public IObservable<OptoLED> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<OptoLED> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Animal.OptoLEDMode.html": {
    "href": "api/Animal.OptoLEDMode.html",
    "title": "Enum OptoLEDMode | CDC.SoundLateralizationTask",
    "keywords": "Enum OptoLEDMode Namespace Animal Assembly Extensions.dll [JsonConverter(typeof(StringEnumConverter))] public enum OptoLEDMode Fields [EnumMember(Value = \"Current\")] [YamlMember(Alias = \"Current\")] Current = 1 [EnumMember(Value = \"TTL\")] [YamlMember(Alias = \"TTL\")] TTL = 0"
  },
  "api/Animal.Optogenetics.html": {
    "href": "api/Animal.Optogenetics.html",
    "title": "Class Optogenetics | CDC.SoundLateralizationTask",
    "keywords": "Class Optogenetics Namespace Animal Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Optogenetics Inheritance object Optogenetics Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Optogenetics() public Optogenetics() Optogenetics(Optogenetics) protected Optogenetics(Optogenetics other) Parameters other Optogenetics Properties Duration The duration of the optogenetics stimulation/inhibition protocol (s). [JsonProperty(\"duration\", Required = Required.Always)] [YamlMember(Alias = \"duration\")] public double Duration { get; set; } Property Value double Led0 The optogenetics protocol that LED 0 executes. [JsonProperty(\"led0\", Required = Required.Always)] [YamlMember(Alias = \"led0\")] public OptoLED Led0 { get; set; } Property Value OptoLED Led1 The optogenetics protocol that LED 1 executes. [JsonProperty(\"led1\", Required = Required.Always)] [YamlMember(Alias = \"led1\")] public OptoLED Led1 { get; set; } Property Value OptoLED Mode Indicates the optogenetics mode used in the current session. [JsonProperty(\"mode\", Required = Required.Always)] [YamlMember(Alias = \"mode\")] public OptogeneticsMode Mode { get; set; } Property Value OptogeneticsMode OptoRatio The ratio of optogenetics trials. [JsonProperty(\"opto_ratio\", Required = Required.Always)] [YamlMember(Alias = \"opto_ratio\")] public double OptoRatio { get; set; } Property Value double RampMode Indicates the ramp mode used in the optogenetics protocol. It only works if the LED is not configured to use pulses. [JsonProperty(\"ramp_mode\", Required = Required.Always)] [YamlMember(Alias = \"ramp_mode\")] public OptogeneticsRampMode RampMode { get; set; } Property Value OptogeneticsRampMode RampTime The duration of the ramp of the optogenetics protocol (ms). It only works when use_pulses is false. [JsonProperty(\"ramp_time\", Required = Required.Always)] [YamlMember(Alias = \"ramp_time\")] public int RampTime { get; set; } Property Value int UseOpto Indicates whether optogenetics is used or not. [JsonProperty(\"use_opto\", Required = Required.Always)] [YamlMember(Alias = \"use_opto\")] public bool UseOpto { get; set; } Property Value bool UseRt Indicates whether the optogenetics stimulation/inhibition should stop when the animal leaves the poke (true) or not (false). [JsonProperty(\"use_rt\", Required = Required.Always)] [YamlMember(Alias = \"use_rt\")] public bool UseRt { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Optogenetics> Process() Returns IObservable<Optogenetics> Process<TSource>(IObservable<TSource>) public IObservable<Optogenetics> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Optogenetics> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Animal.OptogeneticsMode.html": {
    "href": "api/Animal.OptogeneticsMode.html",
    "title": "Enum OptogeneticsMode | CDC.SoundLateralizationTask",
    "keywords": "Enum OptogeneticsMode Namespace Animal Assembly Extensions.dll [JsonConverter(typeof(StringEnumConverter))] public enum OptogeneticsMode Fields [EnumMember(Value = \"Bilateral\")] [YamlMember(Alias = \"Bilateral\")] Bilateral = 2 [EnumMember(Value = \"Left\")] [YamlMember(Alias = \"Left\")] Left = 0 [EnumMember(Value = \"Right\")] [YamlMember(Alias = \"Right\")] Right = 1"
  },
  "api/Animal.OptogeneticsRampMode.html": {
    "href": "api/Animal.OptogeneticsRampMode.html",
    "title": "Enum OptogeneticsRampMode | CDC.SoundLateralizationTask",
    "keywords": "Enum OptogeneticsRampMode Namespace Animal Assembly Extensions.dll [JsonConverter(typeof(StringEnumConverter))] public enum OptogeneticsRampMode Fields [EnumMember(Value = \"Both\")] [YamlMember(Alias = \"Both\")] Both = 3 [EnumMember(Value = \"Fall\")] [YamlMember(Alias = \"Fall\")] Fall = 2 [EnumMember(Value = \"None\")] [YamlMember(Alias = \"None\")] None = 0 [EnumMember(Value = \"Rise\")] [YamlMember(Alias = \"Rise\")] Rise = 1"
  },
  "api/Animal.SerializeToJson.html": {
    "href": "api/Animal.SerializeToJson.html",
    "title": "Class SerializeToJson | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToJson Namespace Animal Assembly Extensions.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<Animal>) public IObservable<string> Process(IObservable<Animal> source) Parameters source IObservable<Animal> Returns IObservable<string> Process(IObservable<AutobiasCorrection>) public IObservable<string> Process(IObservable<AutobiasCorrection> source) Parameters source IObservable<AutobiasCorrection> Returns IObservable<string> Process(IObservable<FixationTime>) public IObservable<string> Process(IObservable<FixationTime> source) Parameters source IObservable<FixationTime> Returns IObservable<string> Process(IObservable<OptoLED>) public IObservable<string> Process(IObservable<OptoLED> source) Parameters source IObservable<OptoLED> Returns IObservable<string> Process(IObservable<Optogenetics>) public IObservable<string> Process(IObservable<Optogenetics> source) Parameters source IObservable<Optogenetics> Returns IObservable<string> Process(IObservable<Session>) public IObservable<string> Process(IObservable<Session> source) Parameters source IObservable<Session> Returns IObservable<string> Process(IObservable<Sound>) public IObservable<string> Process(IObservable<Sound> source) Parameters source IObservable<Sound> Returns IObservable<string> Process(IObservable<TimeConstrains>) public IObservable<string> Process(IObservable<TimeConstrains> source) Parameters source IObservable<TimeConstrains> Returns IObservable<string>"
  },
  "api/Animal.SerializeToYaml.html": {
    "href": "api/Animal.SerializeToYaml.html",
    "title": "Class SerializeToYaml | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToYaml Namespace Animal Assembly Extensions.dll Serializes a sequence of data model objects into YAML strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToYaml Inheritance object SerializeToYaml Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<Animal>) public IObservable<string> Process(IObservable<Animal> source) Parameters source IObservable<Animal> Returns IObservable<string> Process(IObservable<AutobiasCorrection>) public IObservable<string> Process(IObservable<AutobiasCorrection> source) Parameters source IObservable<AutobiasCorrection> Returns IObservable<string> Process(IObservable<FixationTime>) public IObservable<string> Process(IObservable<FixationTime> source) Parameters source IObservable<FixationTime> Returns IObservable<string> Process(IObservable<OptoLED>) public IObservable<string> Process(IObservable<OptoLED> source) Parameters source IObservable<OptoLED> Returns IObservable<string> Process(IObservable<Optogenetics>) public IObservable<string> Process(IObservable<Optogenetics> source) Parameters source IObservable<Optogenetics> Returns IObservable<string> Process(IObservable<Session>) public IObservable<string> Process(IObservable<Session> source) Parameters source IObservable<Session> Returns IObservable<string> Process(IObservable<Sound>) public IObservable<string> Process(IObservable<Sound> source) Parameters source IObservable<Sound> Returns IObservable<string> Process(IObservable<TimeConstrains>) public IObservable<string> Process(IObservable<TimeConstrains> source) Parameters source IObservable<TimeConstrains> Returns IObservable<string>"
  },
  "api/Animal.Session.html": {
    "href": "api/Animal.Session.html",
    "title": "Class Session | CDC.SoundLateralizationTask",
    "keywords": "Class Session Namespace Animal Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Session() public Session() Session(Session) protected Session(Session other) Parameters other Session Properties BlockNumber The number of the first block of the session. [JsonProperty(\"block_number\", Required = Required.Always)] [YamlMember(Alias = \"block_number\")] public int BlockNumber { get; set; } Property Value int Duration The duration of the session (in the hh:mm:ss format). [JsonProperty(\"duration\", Required = Required.Always)] [YamlMember(Alias = \"duration\")] public TimeSpan Duration { get; set; } Property Value TimeSpan Experimenter The person who trained the animal in the current session. [JsonProperty(\"experimenter\", Required = Required.Always)] [YamlMember(Alias = \"experimenter\")] public string Experimenter { get; set; } Property Value string LastTrainingLevel The last training level the animal is allowed to progress to in the current session. [JsonProperty(\"last_training_level\", Required = Required.Always)] [YamlMember(Alias = \"last_training_level\")] public int LastTrainingLevel { get; set; } Property Value int Number The number of the current session. [JsonProperty(\"number\", Required = Required.Always)] [YamlMember(Alias = \"number\")] public int Number { get; set; } Property Value int StartingTrainingLevel The training level the animal will start in the current session. [JsonProperty(\"starting_training_level\", Required = Required.Always)] [YamlMember(Alias = \"starting_training_level\")] public int StartingTrainingLevel { get; set; } Property Value int StartingTrialNumber The number of the first trial of the session. [JsonProperty(\"starting_trial_number\", Required = Required.Always)] [YamlMember(Alias = \"starting_trial_number\")] public int StartingTrialNumber { get; set; } Property Value int Type The number of the session type. [JsonProperty(\"type\", Required = Required.Always)] [YamlMember(Alias = \"type\")] public int Type { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Session> Process() Returns IObservable<Session> Process<TSource>(IObservable<TSource>) public IObservable<Session> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Session> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Animal.Sound.html": {
    "href": "api/Animal.Sound.html",
    "title": "Class Sound | CDC.SoundLateralizationTask",
    "keywords": "Class Sound Namespace Animal Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Sound Inheritance object Sound Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Sound() public Sound() Sound(Sound) protected Sound(Sound other) Parameters other Sound Properties MaxSide The maximum amount of elements representing the left or right side in the pseudo-random array for when the side is picked pseudo-randomly. [JsonProperty(\"max_side\", Required = Required.Always)] [YamlMember(Alias = \"max_side\")] public int MaxSide { get; set; } Property Value int PseudoRandomSide Indicates whether the correct side is picked pseudo-randomly (true) or randomly (false). If it's picked pseudo-randomly, a shuffled array with equal amounts of -1's (left) and 1's (right) of size 2 * max_side is created and it's cycled through - a new shuffled array is generated when the end of the array is reached. [JsonProperty(\"pseudo_random_side\", Required = Required.Always)] [YamlMember(Alias = \"pseudo_random_side\")] public bool PseudoRandomSide { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Sound> Process() Returns IObservable<Sound> Process<TSource>(IObservable<TSource>) public IObservable<Sound> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Sound> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Animal.TimeConstrains.html": {
    "href": "api/Animal.TimeConstrains.html",
    "title": "Class TimeConstrains | CDC.SoundLateralizationTask",
    "keywords": "Class TimeConstrains Namespace Animal Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class TimeConstrains Inheritance object TimeConstrains Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TimeConstrains() public TimeConstrains() TimeConstrains(TimeConstrains) protected TimeConstrains(TimeConstrains other) Parameters other TimeConstrains Properties Delta The increment to the base value every trial a certain condition is met until the target value is reached. [JsonProperty(\"delta\", Required = Required.Always)] [YamlMember(Alias = \"delta\")] public double Delta { get; set; } Property Value double MinValue The initial base value. [JsonProperty(\"min_value\", Required = Required.Always)] [YamlMember(Alias = \"min_value\")] public double MinValue { get; set; } Property Value double Target The target value. [JsonProperty(\"target\", Required = Required.Always)] [YamlMember(Alias = \"target\")] public double Target { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<TimeConstrains> Process() Returns IObservable<TimeConstrains> Process<TSource>(IObservable<TSource>) public IObservable<TimeConstrains> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<TimeConstrains> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Animal.html": {
    "href": "api/Animal.html",
    "title": "Namespace Animal | CDC.SoundLateralizationTask",
    "keywords": "Namespace Animal Classes Animal AutobiasCorrection DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. DeserializeFromYaml Deserializes a sequence of YAML strings into data model objects. FixationTime OptoLED Optogenetics SerializeToJson Serializes a sequence of data model objects into JSON strings. SerializeToYaml Serializes a sequence of data model objects into YAML strings. Session Sound TimeConstrains Enums OptoLEDMode OptogeneticsMode OptogeneticsRampMode"
  },
  "api/CF.Antibias.html": {
    "href": "api/CF.Antibias.html",
    "title": "Class Antibias | CDC.SoundLateralizationTask",
    "keywords": "Class Antibias Namespace CF Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Antibias Inheritance object Antibias Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties BiasThreshold public double BiasThreshold { get; set; } Property Value double Methods Process(IObservable<Tuple<bool[], bool[]>>) public IObservable<Tuple<double, double>> Process(IObservable<Tuple<bool[], bool[]>> source) Parameters source IObservable<Tuple<bool[], bool[]>> Returns IObservable<Tuple<double, double>>"
  },
  "api/CF.CalculateRatio.html": {
    "href": "api/CF.CalculateRatio.html",
    "title": "Class CalculateRatio | CDC.SoundLateralizationTask",
    "keywords": "Class CalculateRatio Namespace CF Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class CalculateRatio Inheritance object CalculateRatio Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<bool[]>) public IObservable<double> Process(IObservable<bool[]> source) Parameters source IObservable<bool[]> Returns IObservable<double>"
  },
  "api/CF.GenerateILDArray.html": {
    "href": "api/CF.GenerateILDArray.html",
    "title": "Class GenerateILDArray | CDC.SoundLateralizationTask",
    "keywords": "Class GenerateILDArray Namespace CF Assembly Extensions.dll Class GenerateILDArray contains the logic of the Bonsai node with the same name. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class GenerateILDArray Inheritance object GenerateILDArray Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties LogBase public double LogBase { get; set; } Property Value double NumSteps public int NumSteps { get; set; } Property Value int StepSize public double StepSize { get; set; } Property Value double UseLog public bool UseLog { get; set; } Property Value bool Methods Process() Generates an observable sequence which outputs an array of ILDs. This method is called when the node doesn't have an input data stream. public IObservable<double[]> Process() Returns IObservable<double[]> An observable sequence which sends a single event containing an array of ILD values. Process<TSource>(IObservable<TSource>) Generates an observable sequence which outputs an array of ILDs. This method is called when the node has an input data stream. public IObservable<double[]> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> the input data stream. Returns IObservable<double[]> An observable sequence which sends a single event containing an array of ILD values. Type Parameters TSource"
  },
  "api/CF.GenerateLateralizedILDs.html": {
    "href": "api/CF.GenerateLateralizedILDs.html",
    "title": "Class GenerateLateralizedILDs | CDC.SoundLateralizationTask",
    "keywords": "Class GenerateLateralizedILDs Namespace CF Assembly Extensions.dll Class GenerateLateralizedILDs contains the logic of the Bonsai node with the same name. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class GenerateLateralizedILDs Inheritance object GenerateLateralizedILDs Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties LogBase public double LogBase { get; set; } Property Value double NumSteps public int NumSteps { get; set; } Property Value int StepSize public double StepSize { get; set; } Property Value double UseLog public bool UseLog { get; set; } Property Value bool Methods Process() Generates an observable sequence which outputs an array of ILDs. This method is called when the node doesn't have an input data stream. public IObservable<double[]> Process() Returns IObservable<double[]> An observable sequence which sends a single event containing an array of ILD values. Process<TSource>(IObservable<TSource>) Generates an observable sequence which outputs an array of ILDs. This method is called when the node has an input data stream. public IObservable<double[]> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> the input data stream. Returns IObservable<double[]> An observable sequence which sends a single event containing an array of ILD values. Type Parameters TSource"
  },
  "api/CF.GenerateLateralizedILDsFL.html": {
    "href": "api/CF.GenerateLateralizedILDsFL.html",
    "title": "Class GenerateLateralizedILDsFL | CDC.SoundLateralizationTask",
    "keywords": "Class GenerateLateralizedILDsFL Namespace CF Assembly Extensions.dll Class GenerateLateralizedILDsFL contains the logic of the Bonsai node with the same name. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class GenerateLateralizedILDsFL Inheritance object GenerateLateralizedILDsFL Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ILDs public double[] ILDs { get; set; } Property Value double[] Methods Process() Generates an observable sequence which outputs an array of ILDs. This method is called when the node doesn't have an input data stream. public IObservable<double[]> Process() Returns IObservable<double[]> An observable sequence which sends a single event containing an array of ILD values. Process<TSource>(IObservable<TSource>) Generates an observable sequence which outputs an array of ILDs. This method is called when the node has an input data stream. public IObservable<double[]> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> the input data stream. Returns IObservable<double[]> An observable sequence which sends a single event containing an array of ILD values. Type Parameters TSource"
  },
  "api/CF.GetOutputDir.html": {
    "href": "api/CF.GetOutputDir.html",
    "title": "Class GetOutputDir | CDC.SoundLateralizationTask",
    "keywords": "Class GetOutputDir Namespace CF Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class GetOutputDir Inheritance object GetOutputDir Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties OutputDirPath public string OutputDirPath { get; set; } Property Value string Methods Process() public IObservable<string> Process() Returns IObservable<string>"
  },
  "api/CF.ShuffleArray.html": {
    "href": "api/CF.ShuffleArray.html",
    "title": "Class ShuffleArray | CDC.SoundLateralizationTask",
    "keywords": "Class ShuffleArray Namespace CF Assembly Extensions.dll Class ShuffleArray contains the logic of the Bonsai node with the same name. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class ShuffleArray Inheritance object ShuffleArray Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process<TSource>(IObservable<TSource[]>) Shuffles the input array. public IObservable<TSource[]> Process<TSource>(IObservable<TSource[]> source) Parameters source IObservable<TSource[]> the input data stream, which sends arrays of the type TSource. Returns IObservable<TSource[]> The shuffled input array (of type TSource). Type Parameters TSource The type of the elements of the input array."
  },
  "api/CF.html": {
    "href": "api/CF.html",
    "title": "Namespace CF | CDC.SoundLateralizationTask",
    "keywords": "Namespace CF Classes Antibias CalculateRatio GenerateILDArray Class GenerateILDArray contains the logic of the Bonsai node with the same name. GenerateLateralizedILDs Class GenerateLateralizedILDs contains the logic of the Bonsai node with the same name. GenerateLateralizedILDsFL Class GenerateLateralizedILDsFL contains the logic of the Bonsai node with the same name. GetOutputDir ShuffleArray Class ShuffleArray contains the logic of the Bonsai node with the same name."
  },
  "api/Config.Config.html": {
    "href": "api/Config.Config.html",
    "title": "Class Config | CDC.SoundLateralizationTask",
    "keywords": "Class Config Namespace Config Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Config Inheritance object Config Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Config() public Config() Config(Config) protected Config(Config other) Parameters other Config Properties Paths Contains the paths to the configuration files and to the output directory. [JsonProperty(\"paths\", Required = Required.Always)] [YamlMember(Alias = \"paths\")] public Paths Paths { get; set; } Property Value Paths Ports Contains the COM ports for the different Harp boards. [JsonProperty(\"ports\", Required = Required.Always)] [YamlMember(Alias = \"ports\")] public Ports Ports { get; set; } Property Value Ports Setup The setup number. [JsonProperty(\"setup\", Required = Required.Always)] [YamlMember(Alias = \"setup\")] public int Setup { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Config> Process() Returns IObservable<Config> Process<TSource>(IObservable<TSource>) public IObservable<Config> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Config> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Config.DeserializeFromJson.html": {
    "href": "api/Config.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromJson Namespace Config Assembly Extensions.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() public DeserializeFromJson() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Config.DeserializeFromYaml.html": {
    "href": "api/Config.DeserializeFromYaml.html",
    "title": "Class DeserializeFromYaml | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromYaml Namespace Config Assembly Extensions.dll Deserializes a sequence of YAML strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromYaml : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromYaml Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromYaml() public DeserializeFromYaml() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Config.Paths.html": {
    "href": "api/Config.Paths.html",
    "title": "Class Paths | CDC.SoundLateralizationTask",
    "keywords": "Class Paths Namespace Config Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Paths Inheritance object Paths Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Paths() public Paths() Paths(Paths) protected Paths(Paths other) Parameters other Paths Properties Animal The path to the animal.yml configuration file. [JsonProperty(\"animal\", Required = Required.Always)] [YamlMember(Alias = \"animal\")] public string Animal { get; set; } Property Value string AnimalDir The path to the directory containing the animal ID files. [JsonProperty(\"animal_dir\", Required = Required.Always)] [YamlMember(Alias = \"animal_dir\")] public string AnimalDir { get; set; } Property Value string Output The path to the output directory, where the output date will be saved. [JsonProperty(\"output\", Required = Required.Always)] [YamlMember(Alias = \"output\")] public string Output { get; set; } Property Value string OutputBackup The path to the backup output directory. [JsonProperty(\"output_backup\", Required = Required.Always)] [YamlMember(Alias = \"output_backup\")] public string OutputBackup { get; set; } Property Value string Setup The path to the setup.json configuration file. [JsonProperty(\"setup\", Required = Required.Always)] [YamlMember(Alias = \"setup\")] public string Setup { get; set; } Property Value string Training The path to the training.yml configuration file. [JsonProperty(\"training\", Required = Required.Always)] [YamlMember(Alias = \"training\")] public string Training { get; set; } Property Value string Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Paths> Process() Returns IObservable<Paths> Process<TSource>(IObservable<TSource>) public IObservable<Paths> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Paths> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Config.Ports.html": {
    "href": "api/Config.Ports.html",
    "title": "Class Ports | CDC.SoundLateralizationTask",
    "keywords": "Class Ports Namespace Config Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Ports Inheritance object Ports Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Ports() public Ports() Ports(Ports) protected Ports(Ports other) Parameters other Ports Properties Behavior The COM port of the Harp Behavior. [JsonProperty(\"behavior\", Required = Required.Always)] [YamlMember(Alias = \"behavior\")] public string Behavior { get; set; } Property Value string Clocksynchronizer The COM port of the Harp ClockSynchronizer. [JsonProperty(\"clocksynchronizer\", Required = Required.Always)] [YamlMember(Alias = \"clocksynchronizer\")] public string Clocksynchronizer { get; set; } Property Value string Currentdriver The COM port of the Harp CurrentDriver. [JsonProperty(\"currentdriver\", Required = Required.Always)] [YamlMember(Alias = \"currentdriver\")] public string Currentdriver { get; set; } Property Value string LeftPump The COM port of the left Harp SyringePump. [JsonProperty(\"left_pump\", Required = Required.Always)] [YamlMember(Alias = \"left_pump\")] public string LeftPump { get; set; } Property Value string RightPump The COM port of the right Harp SyringePump. [JsonProperty(\"right_pump\", Required = Required.Always)] [YamlMember(Alias = \"right_pump\")] public string RightPump { get; set; } Property Value string Soundcard The COM port of the Harp SoundCard. [JsonProperty(\"soundcard\", Required = Required.Always)] [YamlMember(Alias = \"soundcard\")] public string Soundcard { get; set; } Property Value string Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Ports> Process() Returns IObservable<Ports> Process<TSource>(IObservable<TSource>) public IObservable<Ports> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Ports> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Config.SerializeToJson.html": {
    "href": "api/Config.SerializeToJson.html",
    "title": "Class SerializeToJson | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToJson Namespace Config Assembly Extensions.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<Config>) public IObservable<string> Process(IObservable<Config> source) Parameters source IObservable<Config> Returns IObservable<string> Process(IObservable<Paths>) public IObservable<string> Process(IObservable<Paths> source) Parameters source IObservable<Paths> Returns IObservable<string> Process(IObservable<Ports>) public IObservable<string> Process(IObservable<Ports> source) Parameters source IObservable<Ports> Returns IObservable<string>"
  },
  "api/Config.SerializeToYaml.html": {
    "href": "api/Config.SerializeToYaml.html",
    "title": "Class SerializeToYaml | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToYaml Namespace Config Assembly Extensions.dll Serializes a sequence of data model objects into YAML strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToYaml Inheritance object SerializeToYaml Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<Config>) public IObservable<string> Process(IObservable<Config> source) Parameters source IObservable<Config> Returns IObservable<string> Process(IObservable<Paths>) public IObservable<string> Process(IObservable<Paths> source) Parameters source IObservable<Paths> Returns IObservable<string> Process(IObservable<Ports>) public IObservable<string> Process(IObservable<Ports> source) Parameters source IObservable<Ports> Returns IObservable<string>"
  },
  "api/Config.html": {
    "href": "api/Config.html",
    "title": "Namespace Config | CDC.SoundLateralizationTask",
    "keywords": "Namespace Config Classes Config DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. DeserializeFromYaml Deserializes a sequence of YAML strings into data model objects. Paths Ports SerializeToJson Serializes a sequence of data model objects into JSON strings. SerializeToYaml Serializes a sequence of data model objects into YAML strings."
  },
  "api/Output.Block.html": {
    "href": "api/Output.Block.html",
    "title": "Class Block | CDC.SoundLateralizationTask",
    "keywords": "Class Block Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Block Inheritance object Block Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Block() public Block() Block(Block) protected Block(Block other) Parameters other Block Properties Number The block number. [JsonProperty(\"number\", Required = Required.Always)] [YamlMember(Alias = \"number\")] public int Number { get; set; } Property Value int TrainingLevel The training level of the current block. [JsonProperty(\"training_level\", Required = Required.Always)] [YamlMember(Alias = \"training_level\")] public int TrainingLevel { get; set; } Property Value int TrialsPerBlock The number of trials that the current block is expected to have. [JsonProperty(\"trials_per_block\", Required = Required.Always)] [YamlMember(Alias = \"trials_per_block\")] public int TrialsPerBlock { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Block> Process() Returns IObservable<Block> Process<TSource>(IObservable<TSource>) public IObservable<Block> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Block> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.Cnp.html": {
    "href": "api/Output.Cnp.html",
    "title": "Class Cnp | CDC.SoundLateralizationTask",
    "keywords": "Class Cnp Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Cnp Inheritance object Cnp Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Cnp() public Cnp() Cnp(Cnp) protected Cnp(Cnp other) Parameters other Cnp Properties MaxDuration The maximum allowed time to start the trial (s). [JsonProperty(\"max_duration\", Required = Required.Always)] [YamlMember(Alias = \"max_duration\")] public double MaxDuration { get; set; } Property Value double StartTime The timestamp at which the animal poked in the central port (s). [JsonProperty(\"start_time\", Required = Required.Always)] [YamlMember(Alias = \"start_time\")] public double StartTime { get; set; } Property Value double TimedValue The time it took for the animal to start the trial (s). [JsonProperty(\"timed_value\", Required = Required.Always)] [YamlMember(Alias = \"timed_value\")] public double TimedValue { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Cnp> Process() Returns IObservable<Cnp> Process<TSource>(IObservable<TSource>) public IObservable<Cnp> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Cnp> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.DeserializeFromJson.html": {
    "href": "api/Output.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromJson Namespace Output Assembly Extensions.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() public DeserializeFromJson() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Output.DeserializeFromYaml.html": {
    "href": "api/Output.DeserializeFromYaml.html",
    "title": "Class DeserializeFromYaml | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromYaml Namespace Output Assembly Extensions.dll Deserializes a sequence of YAML strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromYaml : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromYaml Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromYaml() public DeserializeFromYaml() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Output.FixationTime.html": {
    "href": "api/Output.FixationTime.html",
    "title": "Class FixationTime | CDC.SoundLateralizationTask",
    "keywords": "Class FixationTime Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class FixationTime Inheritance object FixationTime Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FixationTime() public FixationTime() FixationTime(FixationTime) protected FixationTime(FixationTime other) Parameters other FixationTime Properties IntendedDuration The intended duration for the total fixation time (ms). [JsonProperty(\"intended_duration\", Required = Required.Always)] [YamlMember(Alias = \"intended_duration\")] public double IntendedDuration { get; set; } Property Value double OptoOnsetTime Contains the data related to the Optogenetics Onset Time part of the Fixation Time. [JsonProperty(\"opto_onset_time\", Required = Required.Always)] [YamlMember(Alias = \"opto_onset_time\")] public FixationTimeParts OptoOnsetTime { get; set; } Property Value FixationTimeParts SoundOnsetTime Contains the data related to the Sound Onset Time part of the Fixation Time. [JsonProperty(\"sound_onset_time\", Required = Required.Always)] [YamlMember(Alias = \"sound_onset_time\")] public FixationTimeParts SoundOnsetTime { get; set; } Property Value FixationTimeParts TimedDuration The timed duration for the total fixation time (ms). [JsonProperty(\"timed_duration\", Required = Required.Always)] [YamlMember(Alias = \"timed_duration\")] public double TimedDuration { get; set; } Property Value double TotalDuration The total fixation time corresponds to the sum of the fixation time with the reaction time (ms). [JsonProperty(\"total_duration\", Required = Required.Always)] [YamlMember(Alias = \"total_duration\")] public double TotalDuration { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<FixationTime> Process() Returns IObservable<FixationTime> Process<TSource>(IObservable<TSource>) public IObservable<FixationTime> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<FixationTime> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.FixationTimeParts.html": {
    "href": "api/Output.FixationTimeParts.html",
    "title": "Class FixationTimeParts | CDC.SoundLateralizationTask",
    "keywords": "Class FixationTimeParts Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class FixationTimeParts Inheritance object FixationTimeParts Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FixationTimeParts() public FixationTimeParts() FixationTimeParts(FixationTimeParts) protected FixationTimeParts(FixationTimeParts other) Parameters other FixationTimeParts Properties BaseTime The constant part of the fixation time (ms). [JsonProperty(\"base_time\", Required = Required.Always)] [YamlMember(Alias = \"base_time\")] public double BaseTime { get; set; } Property Value double ExpMean The mean value of the random part of the fixation time (ms), which follows an exponential distribution. [JsonProperty(\"exp_mean\", Required = Required.Always)] [YamlMember(Alias = \"exp_mean\")] public double ExpMean { get; set; } Property Value double IntendedDuration The intended duration for this part of the fixation time (ms). [JsonProperty(\"intended_duration\", Required = Required.Always)] [YamlMember(Alias = \"intended_duration\")] public double IntendedDuration { get; set; } Property Value double TimedDuration The timed duration for this part of the fixation time (ms). [JsonProperty(\"timed_duration\", Required = Required.Always)] [YamlMember(Alias = \"timed_duration\")] public double TimedDuration { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<FixationTimeParts> Process() Returns IObservable<FixationTimeParts> Process<TSource>(IObservable<TSource>) public IObservable<FixationTimeParts> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<FixationTimeParts> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.ITI.html": {
    "href": "api/Output.ITI.html",
    "title": "Class ITI | CDC.SoundLateralizationTask",
    "keywords": "Class ITI Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class ITI Inheritance object ITI Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ITI() public ITI() ITI(ITI) protected ITI(ITI other) Parameters other ITI Properties EndTime The timestamp at which the trial ended (s). [JsonProperty(\"end_time\", Required = Required.Always)] [YamlMember(Alias = \"end_time\")] public double EndTime { get; set; } Property Value double IntendedDuration The intended duration of the ITI (s). [JsonProperty(\"intended_duration\", Required = Required.Always)] [YamlMember(Alias = \"intended_duration\")] public double IntendedDuration { get; set; } Property Value double StartTime The timestamp at which the trial started (s). [JsonProperty(\"start_time\", Required = Required.Always)] [YamlMember(Alias = \"start_time\")] public double StartTime { get; set; } Property Value double TimedDuration The ITI duration (s). [JsonProperty(\"timed_duration\", Required = Required.Always)] [YamlMember(Alias = \"timed_duration\")] public double TimedDuration { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<ITI> Process() Returns IObservable<ITI> Process<TSource>(IObservable<TSource>) public IObservable<ITI> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<ITI> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.LnpTime.html": {
    "href": "api/Output.LnpTime.html",
    "title": "Class LnpTime | CDC.SoundLateralizationTask",
    "keywords": "Class LnpTime Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class LnpTime Inheritance object LnpTime Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors LnpTime() public LnpTime() LnpTime(LnpTime) protected LnpTime(LnpTime other) Parameters other LnpTime Properties IntendedDuration The minimum allowed LNP time (s). [JsonProperty(\"intended_duration\", Required = Required.Always)] [YamlMember(Alias = \"intended_duration\")] public double IntendedDuration { get; set; } Property Value double TimedDuration The timed LNP time (s). [JsonProperty(\"timed_duration\", Required = Required.Always)] [YamlMember(Alias = \"timed_duration\")] public double TimedDuration { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<LnpTime> Process() Returns IObservable<LnpTime> Process<TSource>(IObservable<TSource>) public IObservable<LnpTime> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<LnpTime> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.MovementTime.html": {
    "href": "api/Output.MovementTime.html",
    "title": "Class MovementTime | CDC.SoundLateralizationTask",
    "keywords": "Class MovementTime Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class MovementTime Inheritance object MovementTime Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors MovementTime() public MovementTime() MovementTime(MovementTime) protected MovementTime(MovementTime other) Parameters other MovementTime Properties MaxDuration The maximum allowed movement time (s). [JsonProperty(\"max_duration\", Required = Required.Always)] [YamlMember(Alias = \"max_duration\")] public double MaxDuration { get; set; } Property Value double StartTime The timestamp at which the movement time started (s). [JsonProperty(\"start_time\", Required = Required.Always)] [YamlMember(Alias = \"start_time\")] public double StartTime { get; set; } Property Value double TimedDuration The timed movement time (s). [JsonProperty(\"timed_duration\", Required = Required.Always)] [YamlMember(Alias = \"timed_duration\")] public double TimedDuration { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<MovementTime> Process() Returns IObservable<MovementTime> Process<TSource>(IObservable<TSource>) public IObservable<MovementTime> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<MovementTime> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.Optogenetics.html": {
    "href": "api/Output.Optogenetics.html",
    "title": "Class Optogenetics | CDC.SoundLateralizationTask",
    "keywords": "Class Optogenetics Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Optogenetics Inheritance object Optogenetics Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Optogenetics() public Optogenetics() Optogenetics(Optogenetics) protected Optogenetics(Optogenetics other) Parameters other Optogenetics Properties Duration The duration of the optogenetics used during the trial (s). [JsonProperty(\"duration\", Required = Required.Always)] [YamlMember(Alias = \"duration\")] public double Duration { get; set; } Property Value double Led0Power The power with which the animal is stimulated. [JsonProperty(\"led0_power\", Required = Required.Always)] [YamlMember(Alias = \"led0_power\")] public double Led0Power { get; set; } Property Value double Led0Voltage The voltage to use in the TTL signal. [JsonProperty(\"led0_voltage\", Required = Required.Always)] [YamlMember(Alias = \"led0_voltage\")] public double Led0Voltage { get; set; } Property Value double Led1Power The power with which the animal is stimulated. [JsonProperty(\"led1_power\", Required = Required.Always)] [YamlMember(Alias = \"led1_power\")] public double Led1Power { get; set; } Property Value double Led1Voltage The voltage to use in the TTL signal. [JsonProperty(\"led1_voltage\", Required = Required.Always)] [YamlMember(Alias = \"led1_voltage\")] public double Led1Voltage { get; set; } Property Value double Mode Indicates the optogenetics mode used in the current session. [JsonProperty(\"mode\", Required = Required.Always)] [YamlMember(Alias = \"mode\")] public OptogeneticsMode Mode { get; set; } Property Value OptogeneticsMode OptoTrial Indicates if optogenetics was used in the current trial. [JsonProperty(\"opto_trial\", Required = Required.Always)] [YamlMember(Alias = \"opto_trial\")] public bool OptoTrial { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Optogenetics> Process() Returns IObservable<Optogenetics> Process<TSource>(IObservable<TSource>) public IObservable<Optogenetics> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Optogenetics> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.OptogeneticsMode.html": {
    "href": "api/Output.OptogeneticsMode.html",
    "title": "Enum OptogeneticsMode | CDC.SoundLateralizationTask",
    "keywords": "Enum OptogeneticsMode Namespace Output Assembly Extensions.dll [JsonConverter(typeof(StringEnumConverter))] public enum OptogeneticsMode Fields [EnumMember(Value = \"Bilateral\")] [YamlMember(Alias = \"Bilateral\")] Bilateral = 2 [EnumMember(Value = \"Left\")] [YamlMember(Alias = \"Left\")] Left = 0 [EnumMember(Value = \"Right\")] [YamlMember(Alias = \"Right\")] Right = 1"
  },
  "api/Output.Outcome.html": {
    "href": "api/Output.Outcome.html",
    "title": "Class Outcome | CDC.SoundLateralizationTask",
    "keywords": "Class Outcome Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Outcome Inheritance object Outcome Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Outcome() public Outcome() Outcome(Outcome) protected Outcome(Outcome other) Parameters other Outcome Properties AbortType Indicates the type of abort that happened in the trial. [JsonProperty(\"abort_type\", Required = Required.Always)] [YamlMember(Alias = \"abort_type\")] public OutcomeAbortType AbortType { get; set; } Property Value OutcomeAbortType BlockAbortRatio The block abort ratio. [JsonProperty(\"block_abort_ratio\", Required = Required.Always)] [YamlMember(Alias = \"block_abort_ratio\")] public double BlockAbortRatio { get; set; } Property Value double BlockPerformance The block performance. [JsonProperty(\"block_performance\", Required = Required.Always)] [YamlMember(Alias = \"block_performance\")] public double BlockPerformance { get; set; } Property Value double ResponsePoke The answer given by the animal in the current trial. [JsonProperty(\"response_poke\", Required = Required.Always)] [YamlMember(Alias = \"response_poke\")] public double ResponsePoke { get; set; } Property Value double Success Indicates whether the animal answered correctly (1), incorrectly (-1) or whether the trial was aborted (0). [JsonProperty(\"success\", Required = Required.Always)] [YamlMember(Alias = \"success\")] public int Success { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Outcome> Process() Returns IObservable<Outcome> Process<TSource>(IObservable<TSource>) public IObservable<Outcome> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Outcome> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.OutcomeAbortType.html": {
    "href": "api/Output.OutcomeAbortType.html",
    "title": "Enum OutcomeAbortType | CDC.SoundLateralizationTask",
    "keywords": "Enum OutcomeAbortType Namespace Output Assembly Extensions.dll [JsonConverter(typeof(StringEnumConverter))] public enum OutcomeAbortType Fields [EnumMember(Value = \"CNP\")] [YamlMember(Alias = \"CNP\")] CNP = 1 [EnumMember(Value = \"\")] [YamlMember(Alias = \"\")] Empty = 0 [EnumMember(Value = \"Fixation\")] [YamlMember(Alias = \"Fixation\")] Fixation = 2 [EnumMember(Value = \"IO\")] [YamlMember(Alias = \"IO\")] IO = 8 [EnumMember(Value = \"LNP\")] [YamlMember(Alias = \"LNP\")] LNP = 7 [EnumMember(Value = \"MT-\")] [YamlMember(Alias = \"MT-\")] MTMinus = 6 [EnumMember(Value = \"MT+\")] [YamlMember(Alias = \"MT+\")] MTPlus = 5 [EnumMember(Value = \"RT-\")] [YamlMember(Alias = \"RT-\")] RTMinus = 4 [EnumMember(Value = \"RT+\")] [YamlMember(Alias = \"RT+\")] RTPlus = 3"
  },
  "api/Output.Output.html": {
    "href": "api/Output.Output.html",
    "title": "Class Output | CDC.SoundLateralizationTask",
    "keywords": "Class Output Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Output Inheritance object Output Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Output() public Output() Output(Output) protected Output(Output other) Parameters other Output Properties AnimalId The ID of the animal. [JsonProperty(\"animal_id\", Required = Required.Always)] [YamlMember(Alias = \"animal_id\")] public string AnimalId { get; set; } Property Value string Batch The batch to which the current animal belongs to. [JsonProperty(\"batch\", Required = Required.Always)] [YamlMember(Alias = \"batch\")] public string Batch { get; set; } Property Value string Bias Indicates the bias of the animal in the last n trials, where negative bias is a bias towards the left side and positive bias is a bias towards the right side. [JsonProperty(\"bias\", Required = Required.Always)] [YamlMember(Alias = \"bias\")] public double Bias { get; set; } Property Value double Block Contains the block-related data. [JsonProperty(\"block\", Required = Required.Always)] [YamlMember(Alias = \"block\")] public Block Block { get; set; } Property Value Block Cnp Contains the data related to the time to CNP. [JsonProperty(\"cnp\", Required = Required.Always)] [YamlMember(Alias = \"cnp\")] public Cnp Cnp { get; set; } Property Value Cnp Experimenter The person who trained the animal in the current session. [JsonProperty(\"experimenter\", Required = Required.Always)] [YamlMember(Alias = \"experimenter\")] public string Experimenter { get; set; } Property Value string FixationTime Contains the data related to the fixation time. [JsonProperty(\"fixation_time\", Required = Required.Always)] [YamlMember(Alias = \"fixation_time\")] public FixationTime FixationTime { get; set; } Property Value FixationTime Iti Contains the ITI-related data. [JsonProperty(\"iti\", Required = Required.Always)] [YamlMember(Alias = \"iti\")] public ITI Iti { get; set; } Property Value ITI LnpTime Contains the data related to the LNP time. [JsonProperty(\"lnp_time\", Required = Required.Always)] [YamlMember(Alias = \"lnp_time\")] public LnpTime LnpTime { get; set; } Property Value LnpTime MovementTime Contains the data related to the movement time. [JsonProperty(\"movement_time\", Required = Required.Always)] [YamlMember(Alias = \"movement_time\")] public MovementTime MovementTime { get; set; } Property Value MovementTime Optogenetics Contains the data related to optogenetics. [JsonProperty(\"optogenetics\", Required = Required.Always)] [YamlMember(Alias = \"optogenetics\")] public Optogenetics Optogenetics { get; set; } Property Value Optogenetics Outcome Contains the data related to the trial outcome. [JsonProperty(\"outcome\", Required = Required.Always)] [YamlMember(Alias = \"outcome\")] public Outcome Outcome { get; set; } Property Value Outcome PenaltyTimes Contains the penalty times for different ocasions. [JsonProperty(\"penalty_times\", Required = Required.Always)] [YamlMember(Alias = \"penalty_times\")] public PenaltyTimes PenaltyTimes { get; set; } Property Value PenaltyTimes ReactionTime Contains the data related to the reaction time. [JsonProperty(\"reaction_time\", Required = Required.Always)] [YamlMember(Alias = \"reaction_time\")] public ReactionTime ReactionTime { get; set; } Property Value ReactionTime RepeatedTrial Indicates whether the current trial is a repetition of the previous trial (true) or not (false). [JsonProperty(\"repeated_trial\", Required = Required.Always)] [YamlMember(Alias = \"repeated_trial\")] public bool RepeatedTrial { get; set; } Property Value bool Reward Contains the reward to be delivered for each side in case they are the correct answer. [JsonProperty(\"reward\", Required = Required.Always)] [YamlMember(Alias = \"reward\")] public Reward Reward { get; set; } Property Value Reward Session Contains the session-related data. [JsonProperty(\"session\", Required = Required.Always)] [YamlMember(Alias = \"session\")] public Session Session { get; set; } Property Value Session Sound Contains the sound-related data. [JsonProperty(\"sound\", Required = Required.Always)] [YamlMember(Alias = \"sound\")] public Sound Sound { get; set; } Property Value Sound Trial Contains the trial-related data. [JsonProperty(\"trial\", Required = Required.Always)] [YamlMember(Alias = \"trial\")] public Trial Trial { get; set; } Property Value Trial Version The version of the project used in the session. [JsonProperty(\"version\", Required = Required.Always)] [YamlMember(Alias = \"version\")] public string Version { get; set; } Property Value string Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Output> Process() Returns IObservable<Output> Process<TSource>(IObservable<TSource>) public IObservable<Output> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Output> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.PenaltyTimes.html": {
    "href": "api/Output.PenaltyTimes.html",
    "title": "Class PenaltyTimes | CDC.SoundLateralizationTask",
    "keywords": "Class PenaltyTimes Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class PenaltyTimes Inheritance object PenaltyTimes Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PenaltyTimes() public PenaltyTimes() PenaltyTimes(PenaltyTimes) protected PenaltyTimes(PenaltyTimes other) Parameters other PenaltyTimes Properties Abort The penalty time to be applied when the animal aborts a trial (except if it's a fixation abort). [JsonProperty(\"abort\", Required = Required.Always)] [YamlMember(Alias = \"abort\")] public double Abort { get; set; } Property Value double FixationAbort The penalty time to be applied in case of a fixation abort. [JsonProperty(\"fixation_abort\", Required = Required.Always)] [YamlMember(Alias = \"fixation_abort\")] public double FixationAbort { get; set; } Property Value double Incorrect The penalty time to be applied when the animal answers incorrectly. [JsonProperty(\"incorrect\", Required = Required.Always)] [YamlMember(Alias = \"incorrect\")] public double Incorrect { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<PenaltyTimes> Process() Returns IObservable<PenaltyTimes> Process<TSource>(IObservable<TSource>) public IObservable<PenaltyTimes> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<PenaltyTimes> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.ReactionTime.html": {
    "href": "api/Output.ReactionTime.html",
    "title": "Class ReactionTime | CDC.SoundLateralizationTask",
    "keywords": "Class ReactionTime Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class ReactionTime Inheritance object ReactionTime Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ReactionTime() public ReactionTime() ReactionTime(ReactionTime) protected ReactionTime(ReactionTime other) Parameters other ReactionTime Properties BaseTime The minimum allowed reaction time (s). [JsonProperty(\"base_time\", Required = Required.Always)] [YamlMember(Alias = \"base_time\")] public double BaseTime { get; set; } Property Value double MaxDuration The maximum allowed reaction time (s). [JsonProperty(\"max_duration\", Required = Required.Always)] [YamlMember(Alias = \"max_duration\")] public double MaxDuration { get; set; } Property Value double StartTime The timestamp at which the reaction time started (s). [JsonProperty(\"start_time\", Required = Required.Always)] [YamlMember(Alias = \"start_time\")] public double StartTime { get; set; } Property Value double TimedDuration The timed reaction time (s). [JsonProperty(\"timed_duration\", Required = Required.Always)] [YamlMember(Alias = \"timed_duration\")] public double TimedDuration { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<ReactionTime> Process() Returns IObservable<ReactionTime> Process<TSource>(IObservable<TSource>) public IObservable<ReactionTime> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<ReactionTime> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.Reward.html": {
    "href": "api/Output.Reward.html",
    "title": "Class Reward | CDC.SoundLateralizationTask",
    "keywords": "Class Reward Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Reward Inheritance object Reward Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Reward() public Reward() Reward(Reward) protected Reward(Reward other) Parameters other Reward Properties Left The amount of reward to be delivered in case the left poke is the correct answer. [JsonProperty(\"left\", Required = Required.Always)] [YamlMember(Alias = \"left\")] public double Left { get; set; } Property Value double Right The amount of reward to be delivered in case the right poke is the correct answer. [JsonProperty(\"right\", Required = Required.Always)] [YamlMember(Alias = \"right\")] public double Right { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Reward> Process() Returns IObservable<Reward> Process<TSource>(IObservable<TSource>) public IObservable<Reward> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Reward> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.SerializeToJson.html": {
    "href": "api/Output.SerializeToJson.html",
    "title": "Class SerializeToJson | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToJson Namespace Output Assembly Extensions.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<Block>) public IObservable<string> Process(IObservable<Block> source) Parameters source IObservable<Block> Returns IObservable<string> Process(IObservable<Cnp>) public IObservable<string> Process(IObservable<Cnp> source) Parameters source IObservable<Cnp> Returns IObservable<string> Process(IObservable<FixationTimeParts>) public IObservable<string> Process(IObservable<FixationTimeParts> source) Parameters source IObservable<FixationTimeParts> Returns IObservable<string> Process(IObservable<FixationTime>) public IObservable<string> Process(IObservable<FixationTime> source) Parameters source IObservable<FixationTime> Returns IObservable<string> Process(IObservable<ITI>) public IObservable<string> Process(IObservable<ITI> source) Parameters source IObservable<ITI> Returns IObservable<string> Process(IObservable<LnpTime>) public IObservable<string> Process(IObservable<LnpTime> source) Parameters source IObservable<LnpTime> Returns IObservable<string> Process(IObservable<MovementTime>) public IObservable<string> Process(IObservable<MovementTime> source) Parameters source IObservable<MovementTime> Returns IObservable<string> Process(IObservable<Optogenetics>) public IObservable<string> Process(IObservable<Optogenetics> source) Parameters source IObservable<Optogenetics> Returns IObservable<string> Process(IObservable<Outcome>) public IObservable<string> Process(IObservable<Outcome> source) Parameters source IObservable<Outcome> Returns IObservable<string> Process(IObservable<Output>) public IObservable<string> Process(IObservable<Output> source) Parameters source IObservable<Output> Returns IObservable<string> Process(IObservable<PenaltyTimes>) public IObservable<string> Process(IObservable<PenaltyTimes> source) Parameters source IObservable<PenaltyTimes> Returns IObservable<string> Process(IObservable<ReactionTime>) public IObservable<string> Process(IObservable<ReactionTime> source) Parameters source IObservable<ReactionTime> Returns IObservable<string> Process(IObservable<Reward>) public IObservable<string> Process(IObservable<Reward> source) Parameters source IObservable<Reward> Returns IObservable<string> Process(IObservable<Session>) public IObservable<string> Process(IObservable<Session> source) Parameters source IObservable<Session> Returns IObservable<string> Process(IObservable<Sound>) public IObservable<string> Process(IObservable<Sound> source) Parameters source IObservable<Sound> Returns IObservable<string> Process(IObservable<Trial>) public IObservable<string> Process(IObservable<Trial> source) Parameters source IObservable<Trial> Returns IObservable<string>"
  },
  "api/Output.SerializeToYaml.html": {
    "href": "api/Output.SerializeToYaml.html",
    "title": "Class SerializeToYaml | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToYaml Namespace Output Assembly Extensions.dll Serializes a sequence of data model objects into YAML strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToYaml Inheritance object SerializeToYaml Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<Block>) public IObservable<string> Process(IObservable<Block> source) Parameters source IObservable<Block> Returns IObservable<string> Process(IObservable<Cnp>) public IObservable<string> Process(IObservable<Cnp> source) Parameters source IObservable<Cnp> Returns IObservable<string> Process(IObservable<FixationTimeParts>) public IObservable<string> Process(IObservable<FixationTimeParts> source) Parameters source IObservable<FixationTimeParts> Returns IObservable<string> Process(IObservable<FixationTime>) public IObservable<string> Process(IObservable<FixationTime> source) Parameters source IObservable<FixationTime> Returns IObservable<string> Process(IObservable<ITI>) public IObservable<string> Process(IObservable<ITI> source) Parameters source IObservable<ITI> Returns IObservable<string> Process(IObservable<LnpTime>) public IObservable<string> Process(IObservable<LnpTime> source) Parameters source IObservable<LnpTime> Returns IObservable<string> Process(IObservable<MovementTime>) public IObservable<string> Process(IObservable<MovementTime> source) Parameters source IObservable<MovementTime> Returns IObservable<string> Process(IObservable<Optogenetics>) public IObservable<string> Process(IObservable<Optogenetics> source) Parameters source IObservable<Optogenetics> Returns IObservable<string> Process(IObservable<Outcome>) public IObservable<string> Process(IObservable<Outcome> source) Parameters source IObservable<Outcome> Returns IObservable<string> Process(IObservable<Output>) public IObservable<string> Process(IObservable<Output> source) Parameters source IObservable<Output> Returns IObservable<string> Process(IObservable<PenaltyTimes>) public IObservable<string> Process(IObservable<PenaltyTimes> source) Parameters source IObservable<PenaltyTimes> Returns IObservable<string> Process(IObservable<ReactionTime>) public IObservable<string> Process(IObservable<ReactionTime> source) Parameters source IObservable<ReactionTime> Returns IObservable<string> Process(IObservable<Reward>) public IObservable<string> Process(IObservable<Reward> source) Parameters source IObservable<Reward> Returns IObservable<string> Process(IObservable<Session>) public IObservable<string> Process(IObservable<Session> source) Parameters source IObservable<Session> Returns IObservable<string> Process(IObservable<Sound>) public IObservable<string> Process(IObservable<Sound> source) Parameters source IObservable<Sound> Returns IObservable<string> Process(IObservable<Trial>) public IObservable<string> Process(IObservable<Trial> source) Parameters source IObservable<Trial> Returns IObservable<string>"
  },
  "api/Output.Session.html": {
    "href": "api/Output.Session.html",
    "title": "Class Session | CDC.SoundLateralizationTask",
    "keywords": "Class Session Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Session() public Session() Session(Session) protected Session(Session other) Parameters other Session Properties Box The ID number of the setup where the animal will performed the trial. [JsonProperty(\"box\", Required = Required.Always)] [YamlMember(Alias = \"box\")] public int Box { get; set; } Property Value int Number The number of the current session. [JsonProperty(\"number\", Required = Required.Always)] [YamlMember(Alias = \"number\")] public int Number { get; set; } Property Value int Type The number of the session type. [JsonProperty(\"type\", Required = Required.Always)] [YamlMember(Alias = \"type\")] public int Type { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Session> Process() Returns IObservable<Session> Process<TSource>(IObservable<TSource>) public IObservable<Session> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Session> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.Sound.html": {
    "href": "api/Output.Sound.html",
    "title": "Class Sound | CDC.SoundLateralizationTask",
    "keywords": "Class Sound Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Sound Inheritance object Sound Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Sound() public Sound() Sound(Sound) protected Sound(Sound other) Parameters other Sound Properties Abl The trial ABL value (dB). [JsonProperty(\"abl\", Required = Required.Always)] [YamlMember(Alias = \"abl\")] public double Abl { get; set; } Property Value double Ild The trial ILD value (dB). [JsonProperty(\"ild\", Required = Required.Always)] [YamlMember(Alias = \"ild\")] public double Ild { get; set; } Property Value double LeftAmp The amplification applied to the left speaker in the trial. [JsonProperty(\"left_amp\", Required = Required.Always)] [YamlMember(Alias = \"left_amp\")] public double LeftAmp { get; set; } Property Value double RightAmp The amplification applied to the right speaker in the trial. [JsonProperty(\"right_amp\", Required = Required.Always)] [YamlMember(Alias = \"right_amp\")] public double RightAmp { get; set; } Property Value double SoundIndex The index of the sound that played in the trial. [JsonProperty(\"sound_index\", Required = Required.Always)] [YamlMember(Alias = \"sound_index\")] public int SoundIndex { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Sound> Process() Returns IObservable<Sound> Process<TSource>(IObservable<TSource>) public IObservable<Sound> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Sound> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.Trial.html": {
    "href": "api/Output.Trial.html",
    "title": "Class Trial | CDC.SoundLateralizationTask",
    "keywords": "Class Trial Namespace Output Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Trial Inheritance object Trial Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Trial() public Trial() Trial(Trial) protected Trial(Trial other) Parameters other Trial Properties Duration The trial duration in Harp time (s). [JsonProperty(\"duration\", Required = Required.Always)] [YamlMember(Alias = \"duration\")] public double Duration { get; set; } Property Value double EndTime The timestamp at which the trial ended in Harp time (s). [JsonProperty(\"end_time\", Required = Required.Always)] [YamlMember(Alias = \"end_time\")] public double EndTime { get; set; } Property Value double Number The trial number. [JsonProperty(\"number\", Required = Required.Always)] [YamlMember(Alias = \"number\")] public int Number { get; set; } Property Value int StartTime The timestamp at which the trial started in Harp time (s). [JsonProperty(\"start_time\", Required = Required.Always)] [YamlMember(Alias = \"start_time\")] public double StartTime { get; set; } Property Value double TaredStartTime The tared timestamp at which the trial started in which t = 0 is the start time of the first trial of the session (s). [JsonProperty(\"tared_start_time\", Required = Required.Always)] [YamlMember(Alias = \"tared_start_time\")] public double TaredStartTime { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Trial> Process() Returns IObservable<Trial> Process<TSource>(IObservable<TSource>) public IObservable<Trial> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Trial> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Output.html": {
    "href": "api/Output.html",
    "title": "Namespace Output | CDC.SoundLateralizationTask",
    "keywords": "Namespace Output Classes Block Cnp DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. DeserializeFromYaml Deserializes a sequence of YAML strings into data model objects. FixationTime FixationTimeParts ITI LnpTime MovementTime Optogenetics Outcome Output PenaltyTimes ReactionTime Reward SerializeToJson Serializes a sequence of data model objects into JSON strings. SerializeToYaml Serializes a sequence of data model objects into YAML strings. Session Sound Trial Enums OptogeneticsMode OutcomeAbortType"
  },
  "api/PrintDict.DeserializeFromJson.html": {
    "href": "api/PrintDict.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromJson Namespace PrintDict Assembly Extensions.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() public DeserializeFromJson() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/PrintDict.DeserializeFromYaml.html": {
    "href": "api/PrintDict.DeserializeFromYaml.html",
    "title": "Class DeserializeFromYaml | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromYaml Namespace PrintDict Assembly Extensions.dll Deserializes a sequence of YAML strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromYaml : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromYaml Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromYaml() public DeserializeFromYaml() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/PrintDict.Print.html": {
    "href": "api/PrintDict.Print.html",
    "title": "Class Print | CDC.SoundLateralizationTask",
    "keywords": "Class Print Namespace PrintDict Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Print Inheritance object Print Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Print() public Print() Print(Print) protected Print(Print other) Parameters other Print Properties Text The text to be printed. [JsonProperty(\"text\", Required = Required.Always)] [YamlMember(Alias = \"text\")] public string Text { get; set; } Property Value string Units The units of the quantity being printed (if necessary). [JsonProperty(\"units\", Required = Required.Always)] [YamlMember(Alias = \"units\")] public string Units { get; set; } Property Value string Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Print> Process() Returns IObservable<Print> Process<TSource>(IObservable<TSource>) public IObservable<Print> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Print> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/PrintDict.PrintDict.html": {
    "href": "api/PrintDict.PrintDict.html",
    "title": "Class PrintDict | CDC.SoundLateralizationTask",
    "keywords": "Class PrintDict Namespace PrintDict Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class PrintDict Inheritance object PrintDict Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PrintDict() public PrintDict() PrintDict(PrintDict) protected PrintDict(PrintDict other) Parameters other PrintDict Properties Prints The dictionary containing all of the task's prints. [JsonProperty(\"prints\", Required = Required.Always)] [YamlMember(Alias = \"prints\")] public IDictionary<string, Print> Prints { get; set; } Property Value IDictionary<string, Print> Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<PrintDict> Process() Returns IObservable<PrintDict> Process<TSource>(IObservable<TSource>) public IObservable<PrintDict> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<PrintDict> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/PrintDict.SerializeToJson.html": {
    "href": "api/PrintDict.SerializeToJson.html",
    "title": "Class SerializeToJson | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToJson Namespace PrintDict Assembly Extensions.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<PrintDict>) public IObservable<string> Process(IObservable<PrintDict> source) Parameters source IObservable<PrintDict> Returns IObservable<string> Process(IObservable<Print>) public IObservable<string> Process(IObservable<Print> source) Parameters source IObservable<Print> Returns IObservable<string>"
  },
  "api/PrintDict.SerializeToYaml.html": {
    "href": "api/PrintDict.SerializeToYaml.html",
    "title": "Class SerializeToYaml | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToYaml Namespace PrintDict Assembly Extensions.dll Serializes a sequence of data model objects into YAML strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToYaml Inheritance object SerializeToYaml Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<PrintDict>) public IObservable<string> Process(IObservable<PrintDict> source) Parameters source IObservable<PrintDict> Returns IObservable<string> Process(IObservable<Print>) public IObservable<string> Process(IObservable<Print> source) Parameters source IObservable<Print> Returns IObservable<string>"
  },
  "api/PrintDict.html": {
    "href": "api/PrintDict.html",
    "title": "Namespace PrintDict | CDC.SoundLateralizationTask",
    "keywords": "Namespace PrintDict Classes DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. DeserializeFromYaml Deserializes a sequence of YAML strings into data model objects. Print PrintDict SerializeToJson Serializes a sequence of data model objects into JSON strings. SerializeToYaml Serializes a sequence of data model objects into YAML strings."
  },
  "api/Setup.Camera.html": {
    "href": "api/Setup.Camera.html",
    "title": "Class Camera | CDC.SoundLateralizationTask",
    "keywords": "Class Camera Namespace Setup Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Camera Inheritance object Camera Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Camera() public Camera() Camera(Camera) protected Camera(Camera other) Parameters other Camera Properties Codec The codec used to save the video with FFMPEG. [JsonProperty(\"codec\", Required = Required.Always)] [YamlMember(Alias = \"codec\")] public CameraCodec Codec { get; set; } Property Value CameraCodec FramesPerSecond The number of frames per second of the camera. [JsonProperty(\"frames_per_second\", Required = Required.Always)] [YamlMember(Alias = \"frames_per_second\")] public double FramesPerSecond { get; set; } Property Value double Resolution The resolution with which the camera is recording the video. [JsonProperty(\"resolution\", Required = Required.Always)] [YamlMember(Alias = \"resolution\")] public string Resolution { get; set; } Property Value string Type The type of camera used in the setup. [JsonProperty(\"type\", Required = Required.Always)] [YamlMember(Alias = \"type\")] public CameraType Type { get; set; } Property Value CameraType UseCamera Indicates whether the setup has a camera (true) or not (false). [JsonProperty(\"use_camera\", Required = Required.Always)] [YamlMember(Alias = \"use_camera\")] public bool UseCamera { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Camera> Process() Returns IObservable<Camera> Process<TSource>(IObservable<TSource>) public IObservable<Camera> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Camera> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Setup.CameraCodec.html": {
    "href": "api/Setup.CameraCodec.html",
    "title": "Enum CameraCodec | CDC.SoundLateralizationTask",
    "keywords": "Enum CameraCodec Namespace Setup Assembly Extensions.dll [JsonConverter(typeof(StringEnumConverter))] public enum CameraCodec Fields [EnumMember(Value = \"h264\")] [YamlMember(Alias = \"h264\")] H264 = 0 [EnumMember(Value = \"h264_amf\")] [YamlMember(Alias = \"h264_amf\")] H264Amf = 1"
  },
  "api/Setup.CameraType.html": {
    "href": "api/Setup.CameraType.html",
    "title": "Enum CameraType | CDC.SoundLateralizationTask",
    "keywords": "Enum CameraType Namespace Setup Assembly Extensions.dll [JsonConverter(typeof(StringEnumConverter))] public enum CameraType Fields [EnumMember(Value = \"FLIR\")] [YamlMember(Alias = \"FLIR\")] FLIR = 1 [EnumMember(Value = \"Point Grey\")] [YamlMember(Alias = \"Point Grey\")] PointGrey = 0"
  },
  "api/Setup.DeserializeFromJson.html": {
    "href": "api/Setup.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromJson Namespace Setup Assembly Extensions.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() public DeserializeFromJson() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Setup.DeserializeFromYaml.html": {
    "href": "api/Setup.DeserializeFromYaml.html",
    "title": "Class DeserializeFromYaml | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromYaml Namespace Setup Assembly Extensions.dll Deserializes a sequence of YAML strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromYaml : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromYaml Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromYaml() public DeserializeFromYaml() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Setup.Lights.html": {
    "href": "api/Setup.Lights.html",
    "title": "Class Lights | CDC.SoundLateralizationTask",
    "keywords": "Class Lights Namespace Setup Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Lights Inheritance object Lights Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Lights() public Lights() Lights(Lights) protected Lights(Lights other) Parameters other Lights Properties BoxPeriod The period of the blinking of the box LED (ms). [JsonProperty(\"box_period\", Required = Required.Always)] [YamlMember(Alias = \"box_period\")] public double BoxPeriod { get; set; } Property Value double FixationLight Indicates whether the central poke LED should blink during fixation time (true) or not (false). [JsonProperty(\"fixation_light\", Required = Required.Always)] [YamlMember(Alias = \"fixation_light\")] public bool FixationLight { get; set; } Property Value bool ItiLight Indicates whether the box LED should turn of when the new trial is ready (true) or not (false). [JsonProperty(\"iti_light\", Required = Required.Always)] [YamlMember(Alias = \"iti_light\")] public bool ItiLight { get; set; } Property Value bool PenaltyLight Indicates whether the box LED should blink during penalty times (true) or not (false). [JsonProperty(\"penalty_light\", Required = Required.Always)] [YamlMember(Alias = \"penalty_light\")] public bool PenaltyLight { get; set; } Property Value bool PokeLight Indicates whether the central poke LED should turn of when the new trial is ready (true) or not (false). [JsonProperty(\"poke_light\", Required = Required.Always)] [YamlMember(Alias = \"poke_light\")] public bool PokeLight { get; set; } Property Value bool PokePeriod The period of the blinking of the central poke LED (ms). [JsonProperty(\"poke_period\", Required = Required.Always)] [YamlMember(Alias = \"poke_period\")] public double PokePeriod { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Lights> Process() Returns IObservable<Lights> Process<TSource>(IObservable<TSource>) public IObservable<Lights> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Lights> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Setup.Poke.html": {
    "href": "api/Setup.Poke.html",
    "title": "Class Poke | CDC.SoundLateralizationTask",
    "keywords": "Class Poke Namespace Setup Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Poke Inheritance object Poke Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Poke() public Poke() Poke(Poke) protected Poke(Poke other) Parameters other Poke Properties LowToHigh Indicates whether the poke is a low-to-high (true) or a high-to-low (false) device. [JsonProperty(\"low_to_high\", Required = Required.Always)] [YamlMember(Alias = \"low_to_high\")] public bool LowToHigh { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Poke> Process() Returns IObservable<Poke> Process<TSource>(IObservable<TSource>) public IObservable<Poke> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Poke> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Setup.SerializeToJson.html": {
    "href": "api/Setup.SerializeToJson.html",
    "title": "Class SerializeToJson | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToJson Namespace Setup Assembly Extensions.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<Camera>) public IObservable<string> Process(IObservable<Camera> source) Parameters source IObservable<Camera> Returns IObservable<string> Process(IObservable<Lights>) public IObservable<string> Process(IObservable<Lights> source) Parameters source IObservable<Lights> Returns IObservable<string> Process(IObservable<Poke>) public IObservable<string> Process(IObservable<Poke> source) Parameters source IObservable<Poke> Returns IObservable<string> Process(IObservable<Setup>) public IObservable<string> Process(IObservable<Setup> source) Parameters source IObservable<Setup> Returns IObservable<string> Process(IObservable<Sound>) public IObservable<string> Process(IObservable<Sound> source) Parameters source IObservable<Sound> Returns IObservable<string> Process(IObservable<Speakers>) public IObservable<string> Process(IObservable<Speakers> source) Parameters source IObservable<Speakers> Returns IObservable<string> Process(IObservable<SyringePumps>) public IObservable<string> Process(IObservable<SyringePumps> source) Parameters source IObservable<SyringePumps> Returns IObservable<string>"
  },
  "api/Setup.SerializeToYaml.html": {
    "href": "api/Setup.SerializeToYaml.html",
    "title": "Class SerializeToYaml | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToYaml Namespace Setup Assembly Extensions.dll Serializes a sequence of data model objects into YAML strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToYaml Inheritance object SerializeToYaml Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<Camera>) public IObservable<string> Process(IObservable<Camera> source) Parameters source IObservable<Camera> Returns IObservable<string> Process(IObservable<Lights>) public IObservable<string> Process(IObservable<Lights> source) Parameters source IObservable<Lights> Returns IObservable<string> Process(IObservable<Poke>) public IObservable<string> Process(IObservable<Poke> source) Parameters source IObservable<Poke> Returns IObservable<string> Process(IObservable<Setup>) public IObservable<string> Process(IObservable<Setup> source) Parameters source IObservable<Setup> Returns IObservable<string> Process(IObservable<Sound>) public IObservable<string> Process(IObservable<Sound> source) Parameters source IObservable<Sound> Returns IObservable<string> Process(IObservable<Speakers>) public IObservable<string> Process(IObservable<Speakers> source) Parameters source IObservable<Speakers> Returns IObservable<string> Process(IObservable<SyringePumps>) public IObservable<string> Process(IObservable<SyringePumps> source) Parameters source IObservable<SyringePumps> Returns IObservable<string>"
  },
  "api/Setup.Setup.html": {
    "href": "api/Setup.Setup.html",
    "title": "Class Setup | CDC.SoundLateralizationTask",
    "keywords": "Class Setup Namespace Setup Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Setup Inheritance object Setup Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Setup() public Setup() Setup(Setup) protected Setup(Setup other) Parameters other Setup Properties Camera Contains parameters related to the camera. [JsonProperty(\"camera\", Required = Required.Always)] [YamlMember(Alias = \"camera\")] public Camera Camera { get; set; } Property Value Camera CenterPoke Contains parameters related to the center poke. [JsonProperty(\"center_poke\", Required = Required.Always)] [YamlMember(Alias = \"center_poke\")] public Poke CenterPoke { get; set; } Property Value Poke LeftPoke Contains parameters related to the left poke. [JsonProperty(\"left_poke\", Required = Required.Always)] [YamlMember(Alias = \"left_poke\")] public Poke LeftPoke { get; set; } Property Value Poke Lights Contains parameters related to the box and poke LEDs. [JsonProperty(\"lights\", Required = Required.Always)] [YamlMember(Alias = \"lights\")] public Lights Lights { get; set; } Property Value Lights RightPoke Contains parameters related to the right poke. [JsonProperty(\"right_poke\", Required = Required.Always)] [YamlMember(Alias = \"right_poke\")] public Poke RightPoke { get; set; } Property Value Poke SetupId The ID number of the setup. [JsonProperty(\"setup_id\", Required = Required.Always)] [YamlMember(Alias = \"setup_id\")] public int SetupId { get; set; } Property Value int Sounds The list with information regarding the sounds uploaded to the Harp SoundCard. [JsonProperty(\"sounds\", Required = Required.Always)] [YamlMember(Alias = \"sounds\")] public List<Sound> Sounds { get; set; } Property Value List<Sound> Speakers Contains parameters related to the speakers. [JsonProperty(\"speakers\", Required = Required.Always)] [YamlMember(Alias = \"speakers\")] public Speakers Speakers { get; set; } Property Value Speakers SyringePumps Contains the parameters related to the SyringePumps. [JsonProperty(\"syringe_pumps\", Required = Required.Always)] [YamlMember(Alias = \"syringe_pumps\")] public SyringePumps SyringePumps { get; set; } Property Value SyringePumps Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Setup> Process() Returns IObservable<Setup> Process<TSource>(IObservable<TSource>) public IObservable<Setup> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Setup> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Setup.Sound.html": {
    "href": "api/Setup.Sound.html",
    "title": "Class Sound | CDC.SoundLateralizationTask",
    "keywords": "Class Sound Namespace Setup Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Sound Inheritance object Sound Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Sound() public Sound() Sound(Sound) protected Sound(Sound other) Parameters other Sound Properties Duration The duration of the noise (s). [JsonProperty(\"duration\", Required = Required.Always)] [YamlMember(Alias = \"duration\")] public double Duration { get; set; } Property Value double Index The index number where the noise is stored in the Harp SoundCard. [JsonProperty(\"index\", Required = Required.Always)] [YamlMember(Alias = \"index\")] public int Index { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Sound> Process() Returns IObservable<Sound> Process<TSource>(IObservable<TSource>) public IObservable<Sound> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Sound> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Setup.Speakers.html": {
    "href": "api/Setup.Speakers.html",
    "title": "Class Speakers | CDC.SoundLateralizationTask",
    "keywords": "Class Speakers Namespace Setup Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Speakers Inheritance object Speakers Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Speakers() public Speakers() Speakers(Speakers) protected Speakers(Speakers other) Parameters other Speakers Properties LeftIntercept The intercept of the calibration curve of the left speaker. [JsonProperty(\"left_intercept\", Required = Required.Always)] [YamlMember(Alias = \"left_intercept\")] public double LeftIntercept { get; set; } Property Value double LeftSlope The slope of the calibration curve of the left speaker. [JsonProperty(\"left_slope\", Required = Required.Always)] [YamlMember(Alias = \"left_slope\")] public double LeftSlope { get; set; } Property Value double RightIntercept The intercept of the calibration curve of the right speaker. [JsonProperty(\"right_intercept\", Required = Required.Always)] [YamlMember(Alias = \"right_intercept\")] public double RightIntercept { get; set; } Property Value double RightSlope The slope of the calibration curve of the right speaker. [JsonProperty(\"right_slope\", Required = Required.Always)] [YamlMember(Alias = \"right_slope\")] public double RightSlope { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Speakers> Process() Returns IObservable<Speakers> Process<TSource>(IObservable<TSource>) public IObservable<Speakers> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Speakers> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Setup.SyringePumps.html": {
    "href": "api/Setup.SyringePumps.html",
    "title": "Class SyringePumps | CDC.SoundLateralizationTask",
    "keywords": "Class SyringePumps Namespace Setup Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class SyringePumps Inheritance object SyringePumps Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SyringePumps() public SyringePumps() SyringePumps(SyringePumps) protected SyringePumps(SyringePumps other) Parameters other SyringePumps Properties LeftIntercept The intercept of the calibration curve of the left Harp SyringePump. [JsonProperty(\"left_intercept\", Required = Required.Always)] [YamlMember(Alias = \"left_intercept\")] public double LeftIntercept { get; set; } Property Value double LeftSlope The slope of the calibration curve of the left Harp SyringePump. [JsonProperty(\"left_slope\", Required = Required.Always)] [YamlMember(Alias = \"left_slope\")] public double LeftSlope { get; set; } Property Value double RightIntercept The intercept of the calibration curve of the right Harp SyringePump. [JsonProperty(\"right_intercept\", Required = Required.Always)] [YamlMember(Alias = \"right_intercept\")] public double RightIntercept { get; set; } Property Value double RightSlope The slope of the calibration curve of the right Harp SyringePump. [JsonProperty(\"right_slope\", Required = Required.Always)] [YamlMember(Alias = \"right_slope\")] public double RightSlope { get; set; } Property Value double UsePumps Indicates whether the setup uses valves (false) or Harp SyringePumps (true) for reward delivery. [JsonProperty(\"use_pumps\", Required = Required.Always)] [YamlMember(Alias = \"use_pumps\")] public bool UsePumps { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<SyringePumps> Process() Returns IObservable<SyringePumps> Process<TSource>(IObservable<TSource>) public IObservable<SyringePumps> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<SyringePumps> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Setup.html": {
    "href": "api/Setup.html",
    "title": "Namespace Setup | CDC.SoundLateralizationTask",
    "keywords": "Namespace Setup Classes Camera DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. DeserializeFromYaml Deserializes a sequence of YAML strings into data model objects. Lights Poke SerializeToJson Serializes a sequence of data model objects into JSON strings. SerializeToYaml Serializes a sequence of data model objects into YAML strings. Setup Sound Speakers SyringePumps Enums CameraCodec CameraType"
  },
  "api/Training.ABL.html": {
    "href": "api/Training.ABL.html",
    "title": "Class ABL | CDC.SoundLateralizationTask",
    "keywords": "Class ABL Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class ABL Inheritance object ABL Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ABL() public ABL() ABL(ABL) protected ABL(ABL other) Parameters other ABL Properties AblList The list of ABL values to be used in the task (dB SPL). [JsonProperty(\"abl_list\", Required = Required.Always)] [YamlMember(Alias = \"abl_list\")] public List<double> AblList { get; set; } Property Value List<double> ChangeEveryTrial Indicates whether the ABL should change every trial (true) or not (false). [JsonProperty(\"change_every_trial\", Required = Required.Always)] [YamlMember(Alias = \"change_every_trial\")] public bool ChangeEveryTrial { get; set; } Property Value bool FixedAbl The ABL value to use when use_fixed_abl from the training.json file is true (dB). [JsonProperty(\"fixed_abl\", Required = Required.Always)] [YamlMember(Alias = \"fixed_abl\")] public double FixedAbl { get; set; } Property Value double UseFixedAbl Indicates whether the fixed_abl should be used in the fully lateralized trials (true) or not (false). [JsonProperty(\"use_fixed_abl\", Required = Required.Always)] [YamlMember(Alias = \"use_fixed_abl\")] public bool UseFixedAbl { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<ABL> Process() Returns IObservable<ABL> Process<TSource>(IObservable<TSource>) public IObservable<ABL> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<ABL> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.CriticalPerformance.html": {
    "href": "api/Training.CriticalPerformance.html",
    "title": "Class CriticalPerformance | CDC.SoundLateralizationTask",
    "keywords": "Class CriticalPerformance Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class CriticalPerformance Inheritance object CriticalPerformance Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CriticalPerformance() public CriticalPerformance() CriticalPerformance(CriticalPerformance) protected CriticalPerformance(CriticalPerformance other) Parameters other CriticalPerformance Properties UsePerformance Indicates whether there is a minimum performance requirement to advance to the next block. [JsonProperty(\"use_performance\", Required = Required.Always)] [YamlMember(Alias = \"use_performance\")] public bool UsePerformance { get; set; } Property Value bool Value The minimum correct answer ratio required to advance to the next block (if use_performance is true). [JsonProperty(\"value\", Required = Required.Always)] [YamlMember(Alias = \"value\")] public double Value { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<CriticalPerformance> Process() Returns IObservable<CriticalPerformance> Process<TSource>(IObservable<TSource>) public IObservable<CriticalPerformance> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<CriticalPerformance> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.DeserializeFromJson.html": {
    "href": "api/Training.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromJson Namespace Training Assembly Extensions.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() public DeserializeFromJson() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Training.DeserializeFromYaml.html": {
    "href": "api/Training.DeserializeFromYaml.html",
    "title": "Class DeserializeFromYaml | CDC.SoundLateralizationTask",
    "keywords": "Class DeserializeFromYaml Namespace Training Assembly Extensions.dll Deserializes a sequence of YAML strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromYaml : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromYaml Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) ExpressionBuilder.SelectMembers(Expression, string) ExpressionBuilder.GetArgumentAccess(IEnumerable<Expression>, string) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromYaml() public DeserializeFromYaml() Properties Type public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Training.FixationTime.html": {
    "href": "api/Training.FixationTime.html",
    "title": "Class FixationTime | CDC.SoundLateralizationTask",
    "keywords": "Class FixationTime Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class FixationTime Inheritance object FixationTime Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FixationTime() public FixationTime() FixationTime(FixationTime) protected FixationTime(FixationTime other) Parameters other FixationTime Properties OptoExpMean The mean value of the random part of the optogenetics onset time (ms), which follows an exponential distribution. [JsonProperty(\"opto_exp_mean\", Required = Required.Always)] [YamlMember(Alias = \"opto_exp_mean\")] public double OptoExpMean { get; set; } Property Value double SoundExpMean The mean value of the random part of the sound onset time (ms), which follows an exponential distribution. [JsonProperty(\"sound_exp_mean\", Required = Required.Always)] [YamlMember(Alias = \"sound_exp_mean\")] public double SoundExpMean { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<FixationTime> Process() Returns IObservable<FixationTime> Process<TSource>(IObservable<TSource>) public IObservable<FixationTime> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<FixationTime> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.ILD.html": {
    "href": "api/Training.ILD.html",
    "title": "Class ILD | CDC.SoundLateralizationTask",
    "keywords": "Class ILD Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class ILD Inheritance object ILD Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ILD() public ILD() ILD(ILD) protected ILD(ILD other) Parameters other ILD Properties LogBase The base of the logarithm. [JsonProperty(\"log_base\", Required = Required.Always)] [YamlMember(Alias = \"log_base\")] public double LogBase { get; set; } Property Value double NumSteps The number of |ILD| values. [JsonProperty(\"num_steps\", Required = Required.Always)] [YamlMember(Alias = \"num_steps\")] public int NumSteps { get; set; } Property Value int StepSize The separation between two consecutive |ILD| values. [JsonProperty(\"step_size\", Required = Required.Always)] [YamlMember(Alias = \"step_size\")] public double StepSize { get; set; } Property Value double UseLog Indicates whether to use logarithmic steps between consecutive ILD values. [JsonProperty(\"use_log\", Required = Required.Always)] [YamlMember(Alias = \"use_log\")] public bool UseLog { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<ILD> Process() Returns IObservable<ILD> Process<TSource>(IObservable<TSource>) public IObservable<ILD> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<ILD> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.ITI.html": {
    "href": "api/Training.ITI.html",
    "title": "Class ITI | CDC.SoundLateralizationTask",
    "keywords": "Class ITI Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class ITI Inheritance object ITI Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ITI() public ITI() ITI(ITI) protected ITI(ITI other) Parameters other ITI Properties CanReset Indicates whether the ITI partially resets if the animal tries to poke in the CNP before it ends. [JsonProperty(\"can_reset\", Required = Required.Always)] [YamlMember(Alias = \"can_reset\")] public bool CanReset { get; set; } Property Value bool Value The intended ITI duration (s). [JsonProperty(\"value\", Required = Required.Always)] [YamlMember(Alias = \"value\")] public double Value { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<ITI> Process() Returns IObservable<ITI> Process<TSource>(IObservable<TSource>) public IObservable<ITI> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<ITI> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.Level.html": {
    "href": "api/Training.Level.html",
    "title": "Class Level | CDC.SoundLateralizationTask",
    "keywords": "Class Level Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Level Inheritance object Level Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Level() public Level() Level(Level) protected Level(Level other) Parameters other Level Properties CriticalPerformance Contains the critical performance for the animal to progress to the next level and whether this feature is used or not. [JsonProperty(\"critical_performance\", Required = Required.Always)] [YamlMember(Alias = \"critical_performance\")] public CriticalPerformance CriticalPerformance { get; set; } Property Value CriticalPerformance FixationTime Contains parameters related to the fixation time. [JsonProperty(\"fixation_time\", Required = Required.Always)] [YamlMember(Alias = \"fixation_time\")] public FixationTime FixationTime { get; set; } Property Value FixationTime Iti Contains the parameters related to the Inter-trial Interval. [JsonProperty(\"iti\", Required = Required.Always)] [YamlMember(Alias = \"iti\")] public ITI Iti { get; set; } Property Value ITI LevelId The ID number of the training level. [JsonProperty(\"level_id\", Required = Required.Always)] [YamlMember(Alias = \"level_id\")] public int LevelId { get; set; } Property Value int MaxAborts NOT IMPLEMENTED!! [JsonProperty(\"max_aborts\", Required = Required.Always)] [YamlMember(Alias = \"max_aborts\")] public int MaxAborts { get; set; } Property Value int MaxMt The maximum allowed movement time (s). [JsonProperty(\"max_mt\", Required = Required.Always)] [YamlMember(Alias = \"max_mt\")] public double MaxMt { get; set; } Property Value double MaxWait The maximum allowed time to start the trial (s). [JsonProperty(\"max_wait\", Required = Required.Always)] [YamlMember(Alias = \"max_wait\")] public double MaxWait { get; set; } Property Value double PenaltyTimes Contains the penalty times for different ocasions. [JsonProperty(\"penalty_times\", Required = Required.Always)] [YamlMember(Alias = \"penalty_times\")] public PenaltyTimes PenaltyTimes { get; set; } Property Value PenaltyTimes ReactionTime Contains parameters related to the reaction time. [JsonProperty(\"reaction_time\", Required = Required.Always)] [YamlMember(Alias = \"reaction_time\")] public ReactionTime ReactionTime { get; set; } Property Value ReactionTime Sound Contains the sound-related parameters. [JsonProperty(\"sound\", Required = Required.Always)] [YamlMember(Alias = \"sound\")] public Sound Sound { get; set; } Property Value Sound Speakers Indicates whether the animal is using headphones (true) or box speakers (false). At the moment, this parameter doesn't modify the behavior of the task. Perhaps in the future, it might be possible to input the calibration curves of both the box speakers and the headphones so that this parameter switches to the correct calibration curves. [JsonProperty(\"speakers\", Required = Required.Always)] [YamlMember(Alias = \"speakers\")] public bool Speakers { get; set; } Property Value bool TrialRepetition Contains the conditions for which a certain trial should be repeated. [JsonProperty(\"trial_repetition\", Required = Required.Always)] [YamlMember(Alias = \"trial_repetition\")] public TrialRepetition TrialRepetition { get; set; } Property Value TrialRepetition TrialsPerBlock The number of trials that a block of the current level has. [JsonProperty(\"trials_per_block\", Required = Required.Always)] [YamlMember(Alias = \"trials_per_block\")] public int TrialsPerBlock { get; set; } Property Value int Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Level> Process() Returns IObservable<Level> Process<TSource>(IObservable<TSource>) public IObservable<Level> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Level> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.PenaltyTimes.html": {
    "href": "api/Training.PenaltyTimes.html",
    "title": "Class PenaltyTimes | CDC.SoundLateralizationTask",
    "keywords": "Class PenaltyTimes Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class PenaltyTimes Inheritance object PenaltyTimes Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PenaltyTimes() public PenaltyTimes() PenaltyTimes(PenaltyTimes) protected PenaltyTimes(PenaltyTimes other) Parameters other PenaltyTimes Properties Abort The penalty time to be applied when the animal aborts a trial (except if it's a fixation abort). [JsonProperty(\"abort\", Required = Required.Always)] [YamlMember(Alias = \"abort\")] public double Abort { get; set; } Property Value double FixationAbort The penalty time to be applied in case of a fixation abort. [JsonProperty(\"fixation_abort\", Required = Required.Always)] [YamlMember(Alias = \"fixation_abort\")] public double FixationAbort { get; set; } Property Value double Incorrect The penalty time to be applied when the animal answers incorrectly. [JsonProperty(\"incorrect\", Required = Required.Always)] [YamlMember(Alias = \"incorrect\")] public double Incorrect { get; set; } Property Value double Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<PenaltyTimes> Process() Returns IObservable<PenaltyTimes> Process<TSource>(IObservable<TSource>) public IObservable<PenaltyTimes> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<PenaltyTimes> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.ReactionTime.html": {
    "href": "api/Training.ReactionTime.html",
    "title": "Class ReactionTime | CDC.SoundLateralizationTask",
    "keywords": "Class ReactionTime Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class ReactionTime Inheritance object ReactionTime Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ReactionTime() public ReactionTime() ReactionTime(ReactionTime) protected ReactionTime(ReactionTime other) Parameters other ReactionTime Properties TurnSoundOff Indicates whether the sound should stop playing when the animal leaves the central poke. [JsonProperty(\"turn_sound_off\", Required = Required.Always)] [YamlMember(Alias = \"turn_sound_off\")] public bool TurnSoundOff { get; set; } Property Value bool UseMaxRt Indicates whether there is a maximum reaction time (true) or not (false). [JsonProperty(\"use_max_rt\", Required = Required.Always)] [YamlMember(Alias = \"use_max_rt\")] public bool UseMaxRt { get; set; } Property Value bool UseMinRt Indicates whether there is a minimum reaction time (true) or not (false). [JsonProperty(\"use_min_rt\", Required = Required.Always)] [YamlMember(Alias = \"use_min_rt\")] public bool UseMinRt { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<ReactionTime> Process() Returns IObservable<ReactionTime> Process<TSource>(IObservable<TSource>) public IObservable<ReactionTime> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<ReactionTime> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.SerializeToJson.html": {
    "href": "api/Training.SerializeToJson.html",
    "title": "Class SerializeToJson | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToJson Namespace Training Assembly Extensions.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<ABL>) public IObservable<string> Process(IObservable<ABL> source) Parameters source IObservable<ABL> Returns IObservable<string> Process(IObservable<CriticalPerformance>) public IObservable<string> Process(IObservable<CriticalPerformance> source) Parameters source IObservable<CriticalPerformance> Returns IObservable<string> Process(IObservable<FixationTime>) public IObservable<string> Process(IObservable<FixationTime> source) Parameters source IObservable<FixationTime> Returns IObservable<string> Process(IObservable<ILD>) public IObservable<string> Process(IObservable<ILD> source) Parameters source IObservable<ILD> Returns IObservable<string> Process(IObservable<ITI>) public IObservable<string> Process(IObservable<ITI> source) Parameters source IObservable<ITI> Returns IObservable<string> Process(IObservable<Level>) public IObservable<string> Process(IObservable<Level> source) Parameters source IObservable<Level> Returns IObservable<string> Process(IObservable<PenaltyTimes>) public IObservable<string> Process(IObservable<PenaltyTimes> source) Parameters source IObservable<PenaltyTimes> Returns IObservable<string> Process(IObservable<ReactionTime>) public IObservable<string> Process(IObservable<ReactionTime> source) Parameters source IObservable<ReactionTime> Returns IObservable<string> Process(IObservable<Sound>) public IObservable<string> Process(IObservable<Sound> source) Parameters source IObservable<Sound> Returns IObservable<string> Process(IObservable<Training>) public IObservable<string> Process(IObservable<Training> source) Parameters source IObservable<Training> Returns IObservable<string> Process(IObservable<TrialRepetition>) public IObservable<string> Process(IObservable<TrialRepetition> source) Parameters source IObservable<TrialRepetition> Returns IObservable<string>"
  },
  "api/Training.SerializeToYaml.html": {
    "href": "api/Training.SerializeToYaml.html",
    "title": "Class SerializeToYaml | CDC.SoundLateralizationTask",
    "keywords": "Class SerializeToYaml Namespace Training Assembly Extensions.dll Serializes a sequence of data model objects into YAML strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToYaml Inheritance object SerializeToYaml Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<ABL>) public IObservable<string> Process(IObservable<ABL> source) Parameters source IObservable<ABL> Returns IObservable<string> Process(IObservable<CriticalPerformance>) public IObservable<string> Process(IObservable<CriticalPerformance> source) Parameters source IObservable<CriticalPerformance> Returns IObservable<string> Process(IObservable<FixationTime>) public IObservable<string> Process(IObservable<FixationTime> source) Parameters source IObservable<FixationTime> Returns IObservable<string> Process(IObservable<ILD>) public IObservable<string> Process(IObservable<ILD> source) Parameters source IObservable<ILD> Returns IObservable<string> Process(IObservable<ITI>) public IObservable<string> Process(IObservable<ITI> source) Parameters source IObservable<ITI> Returns IObservable<string> Process(IObservable<Level>) public IObservable<string> Process(IObservable<Level> source) Parameters source IObservable<Level> Returns IObservable<string> Process(IObservable<PenaltyTimes>) public IObservable<string> Process(IObservable<PenaltyTimes> source) Parameters source IObservable<PenaltyTimes> Returns IObservable<string> Process(IObservable<ReactionTime>) public IObservable<string> Process(IObservable<ReactionTime> source) Parameters source IObservable<ReactionTime> Returns IObservable<string> Process(IObservable<Sound>) public IObservable<string> Process(IObservable<Sound> source) Parameters source IObservable<Sound> Returns IObservable<string> Process(IObservable<Training>) public IObservable<string> Process(IObservable<Training> source) Parameters source IObservable<Training> Returns IObservable<string> Process(IObservable<TrialRepetition>) public IObservable<string> Process(IObservable<TrialRepetition> source) Parameters source IObservable<TrialRepetition> Returns IObservable<string>"
  },
  "api/Training.Sound.html": {
    "href": "api/Training.Sound.html",
    "title": "Class Sound | CDC.SoundLateralizationTask",
    "keywords": "Class Sound Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Sound Inheritance object Sound Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Sound() public Sound() Sound(Sound) protected Sound(Sound other) Parameters other Sound Properties Abl Contains the ABL-related parameters. [JsonProperty(\"abl\", Required = Required.Always)] [YamlMember(Alias = \"abl\")] public ABL Abl { get; set; } Property Value ABL FullyLateralizedProbability In the fully lateralized variation of the task, the real ILD value corresponds to the input ABL and the real ABL value corresponds to half of it. For example, if the input ABL value is 50 db SPL, one of the speakers will produce a sound of 50 dB SPL and the other one will produce a sound of 0 dB SPL. This parameter indicates the probability of a trial being fully lateralized in a given training level. [JsonProperty(\"fully_lateralized_probability\", Required = Required.Always)] [YamlMember(Alias = \"fully_lateralized_probability\")] public double FullyLateralizedProbability { get; set; } Property Value double Ild Contains the ILD-related parameters. [JsonProperty(\"ild\", Required = Required.Always)] [YamlMember(Alias = \"ild\")] public ILD Ild { get; set; } Property Value ILD Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Sound> Process() Returns IObservable<Sound> Process<TSource>(IObservable<TSource>) public IObservable<Sound> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Sound> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.Training.html": {
    "href": "api/Training.Training.html",
    "title": "Class Training | CDC.SoundLateralizationTask",
    "keywords": "Class Training Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Training Inheritance object Training Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Training() public Training() Training(Training) protected Training(Training other) Parameters other Training Properties Levels The list containing the parameters to be used for each training level. [JsonProperty(\"levels\", Required = Required.Always)] [YamlMember(Alias = \"levels\")] public List<Level> Levels { get; set; } Property Value List<Level> Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<Training> Process() Returns IObservable<Training> Process<TSource>(IObservable<TSource>) public IObservable<Training> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Training> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.TrialRepetition.html": {
    "href": "api/Training.TrialRepetition.html",
    "title": "Class TrialRepetition | CDC.SoundLateralizationTask",
    "keywords": "Class TrialRepetition Namespace Training Assembly Extensions.dll [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class TrialRepetition Inheritance object TrialRepetition Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TrialRepetition() public TrialRepetition() TrialRepetition(TrialRepetition) protected TrialRepetition(TrialRepetition other) Parameters other TrialRepetition Properties RepeatAborts Indicates whether the stimulus is repeated after aborts. [JsonProperty(\"repeat_aborts\", Required = Required.Always)] [YamlMember(Alias = \"repeat_aborts\")] public bool RepeatAborts { get; set; } Property Value bool RepeatErrors Indicates whether the stimulus is repeated after incorrect responses. [JsonProperty(\"repeat_errors\", Required = Required.Always)] [YamlMember(Alias = \"repeat_errors\")] public bool RepeatErrors { get; set; } Property Value bool RepeatFixTime Indicates whether the fixation time is repeated after aborts. [JsonProperty(\"repeat_fix_time\", Required = Required.Always)] [YamlMember(Alias = \"repeat_fix_time\")] public bool RepeatFixTime { get; set; } Property Value bool Methods PrintMembers(StringBuilder) protected virtual bool PrintMembers(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder Returns bool Process() public IObservable<TrialRepetition> Process() Returns IObservable<TrialRepetition> Process<TSource>(IObservable<TSource>) public IObservable<TrialRepetition> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<TrialRepetition> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Training.html": {
    "href": "api/Training.html",
    "title": "Namespace Training | CDC.SoundLateralizationTask",
    "keywords": "Namespace Training Classes ABL CriticalPerformance DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. DeserializeFromYaml Deserializes a sequence of YAML strings into data model objects. FixationTime ILD ITI Level PenaltyTimes ReactionTime SerializeToJson Serializes a sequence of data model objects into JSON strings. SerializeToYaml Serializes a sequence of data model objects into YAML strings. Sound Training TrialRepetition"
  },
  "articles/abort.html": {
    "href": "articles/abort.html",
    "title": "Abort | CDC.SoundLateralizationTask",
    "keywords": "Abort The Abort state is triggered when some conditions are not met in the previous states. This state consists of a small time penalty. The penalty time is defined by AbortPenalty, unless a fixation abort occurred. If that's the case, then the penalty time is defined by FixationAbortPenalty. Since this state is one of the two possible final states of a trial, there is a need to set/update some variables that would normally be set/updated in states that the state machine did not get into during the current trial."
  },
  "articles/choice.html": {
    "href": "articles/choice.html",
    "title": "Choice | CDC.SoundLateralizationTask",
    "keywords": "Choice In this state, the animal has to pick the side (left or right) which corresponds to the speaker that played the loudest sound by poking in either lateral nose port (LNP). Progression conditions If the animal pokes either LNP after the minimum movement time (MinMT) and before the maximum reaction time (MaxMT), the task proceeds as expected. Otherwise, it is aborted."
  },
  "articles/fixation-time.html": {
    "href": "articles/fixation-time.html",
    "title": "Fixation Time | CDC.SoundLateralizationTask",
    "keywords": "Fixation Time This is the state that precedes the stimulus presentation. The rodent must stay in the CNP during the entire time this state lasts so that the task progresses as expected, otherwise the trial is aborted. If the RandomizeFT setting is 1, the fixation time varies from trial to trial - it is randomly generated - in order to make the timing of the stimulus presentation (which happens as soon as the fixation time ends) unpredictable. In this case, the fixation time is given by: \\(t_{\\text{Fix}} = t_{\\text{Base Fix}} + (X ∼ \\text{Exp}(λ))\\) If RandomizeFT is 0, the fixation time is only given by \\(t_{\\text{Base Fix}}\\). Progression conditions If the animal doesn't leave the CNP during this state, the task continues as it is supposed to, otherwise this trial is aborted."
  },
  "articles/inter-trial-interval.html": {
    "href": "articles/inter-trial-interval.html",
    "title": "Inter-Trial Interval | CDC.SoundLateralizationTask",
    "keywords": "Inter-Trial Interval The Inter-Trial Interval (ITI) state is, as the name suggests, the time interval that separates two consecutive trials. Since there is a need to setup each trial (for example, to (re)set some parameters) and the duration of the ITI is, typically, a few seconds, this state is also a preparation of the new trial. Currently, the actions that take place in the ITI state are: Updating the trial number. Checking if a block of trials ended in the previous trial and, if so, reset the block variables and update the block number and training level. Randomizing the ABL (average binaural level) and ILD (inter-aural level difference) values and selecting the sound that is going to be played in the current trial (Note: this only happens if the Level0 setting is 0). Progression conditions If the ITIReset setting is 1, this state resets everytime the animal is poking the CNP before the ITI is over."
  },
  "articles/introduction.html": {
    "href": "articles/introduction.html",
    "title": "Introduction | CDC.SoundLateralizationTask",
    "keywords": "Introduction The sound lateralization task implemented in the current project, which is based on [1], was designed as a state machine, where the progression through the different states is driven by certain events. The figure below is a representation of the state machine that describes this task. From the figure, notice that from most states there are two possible states that these states can progress to. This happens because there are certain conditions that have to be met in order for the state machine to progress to the next \"desired\" state. The remaining pages of this subsection are dedicated to the description each individual state (which include an explanation of what happens and what are the progression conditions)."
  },
  "articles/reward.html": {
    "href": "articles/reward.html",
    "title": "Reward | CDC.SoundLateralizationTask",
    "keywords": "Reward The Reward state evaluates whether the rodent got the answer right or not. In case the answer is wrong, a penalty time is applied (10 seconds for instance). If the answer is right, the animal only gets the reward (water) if he stayed in the correct LNP for at least a minimum amount of time (IntendedLNP). This is the final state of a successful trial. Additionally, the following variables/metrics are updated: AbortEvent RepeatTrial BlockAbortRatio BlockPerformance BaseFT BaseRT IntendedLNP"
  },
  "articles/start-trial.html": {
    "href": "articles/start-trial.html",
    "title": "Start Trial | CDC.SoundLateralizationTask",
    "keywords": "Start Trial A trial starts when the rodent pokes his nose in the central nose port (CNP). So this state consists of waiting that the rodent starts poking the CNP. Progression conditions If there is a poke within a certain time limit (determined by the MaxWait parameter), the task continues as it is supposed to, otherwise this trial is aborted."
  },
  "articles/stimulus.html": {
    "href": "articles/stimulus.html",
    "title": "Stimulus | CDC.SoundLateralizationTask",
    "keywords": "Stimulus This is the state where the stimulus is presented. The stimulus stops when either the rodent leaves the CNP (if UseRT is 1) or when the animal enters one of the LNP's (if UseRT is 0) or when the defined presentation time elapses (the presentation time is defined by MaxRT). Progression conditions If the animal leaves the CNP after the minimum reaction time (defined by MinRT) and before the maximum reaction time (defined by MaxRT), the task proceeds as expected. Otherwise, it is aborted."
  },
  "docfx-tools/README.html": {
    "href": "docfx-tools/README.html",
    "title": "docfx-tools | CDC.SoundLateralizationTask",
    "keywords": "docfx-tools A docfx template for package documentation, patching the modern template to provide stylesheets and scripts for rendering custom workflow containers with copy functionality. How to use To include this template in a docfx website, first clone this repository as a submodule: git submodule add https://github.com/bonsai-rx/docfx-tools bonsai Then modify docfx.json to include the template immediately after the modern template: \"template\": [ \"default\", \"modern\", \"bonsai/template\", \"template\" ], Finally, import and call the modules inside your website template/public folder. main.css @import \"workflow.css\"; main.js import WorkflowContainer from \"./workflow.js\" export default { start: () => { WorkflowContainer.init(); } } Powershell Scripts This repository also provides helper scripts to automate several content generation steps for package documentation websites. Exporting workflow images Exporting SVG images for all example workflows can be automated by placing all .bonsai files in a workflows folder and calling the below script pointing to the bin directory to include. A bonsai environment is assumed to be available in the .bonsai folder in the repository root. .\\modules\\Export-Image.ps1 \"..\\src\\PackageName\\bin\\Release\\net472\""
  },
  "documentation.html": {
    "href": "documentation.html",
    "title": "Documentation | CDC.SoundLateralizationTask",
    "keywords": "Documentation The documentation is written in Markdown and is available under the docs folder. The documentation is built using DocFx. Local Development Prerequisites WinGet (only for Windows users) Powershell (recommended for Windows users) .NET SDK (required for DocFx, LTS version recommended) DocFx Node.js (optional for automatic documentation generation) Installing Prerequisites WinGet should already be installed directly on Windows 10 1709 or higher. If not, you can get it through the Microsoft Store or by following the instructions on the official documentation. With WinGet installed, you can install the remaining prerequisites by running the following commands on Powershell for Windows: # install Powershell 7.x winget install --id Microsoft.Powershell --source winget # install .NET SDK 8 LTS version winget install -e --id Microsoft.DotNet.SDK.8 # install Node.js (optional, only required for automatic documentation generation) winget install -e --id OpenJS.Nodejs.LTS Installing DocFx Now open a new Powershell 7 window and run the following commands: # verify .NET SDK installation dotnet --version # install DocFx dotnet tool install -g docfx Cloning the Repository You can clone the repository using the following command: git clone --recurse-submodules git@github.com:fchampalimaud/cf.bonsai.git cd cf.bonsai If for some reason you forgot to clone the submodules, you can run the following command to get them: git submodule update --init --recursive First setup To build the documentation, you need to install the dependencies. You can do this by running the following commands at the docs folder: dotnet tool restore # if you have NodeJS installed, you need to install the NodeJS dependencies npm install Now we need to setup Bonsai locally. You can do this by running the following command at the bonsai folder in a Powershell window: .\\Setup.ps1 Generating SVG images from Bonsai workflows To generate the SVG images from the Bonsai workflows and generate the documentation, you need to run the following command at the docs folder: .\\build.ps1 This is required to be done every time you add a new workflow to the workflows folder. Building the Documentation To generate the documentation you need to run the following command while at the docs folder. docfx --serve # or if you have Node installed (it will automatically update the documentation on each .md and .yml file change) npm run docfx The documentation will be available at http://localhost:8080. If you want to update the documentation, you will need to stop the server and run docfx --serve again."
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | CDC.SoundLateralizationTask",
    "keywords": "Home Welcome to the documentation for the Bonsai workflow developed for the Sound Lateralization Task that is going to be performed by the Circuit Dynamics and Computation group at the Champalimaud Foundation. The experimental setup makes use of the capabilities of the Harp devices (which implement the Harp protocol) and the Bonsai visual programming framework, which work really well together. The documentation for the task is divided in 3 sections: Installation and Configuration - This section is a step-by-step guide for setting up everything that is needed to run the task in a new setup. It includes instructions for installing the task's software, the firmware for each Harp device used in the task, calibrating the hardware and configuring the task. Task - This is the section where the task is described. It contains a high-level explanation of the task, as well as a more low-level one. Extensions - Since there was a need to create custom Bonsai nodes written in C# to implement functionality which was difficult to implement or wasn't available natively in Bonsai (namely the reading of configuration files), a section documenting these nodes had to be created. There is also a description of every parameter from each configuration file. If you find any bug in the project or any missing/incorrect/out-of-date documentation, feel free to create an issue on GitHub or contribute with a pull-request. If you want to build the documentation locally click here."
  },
  "installation/bill_of_materials.html": {
    "href": "installation/bill_of_materials.html",
    "title": "Bill of Materials | CDC.SoundLateralizationTask",
    "keywords": "Bill of Materials This bill of materials (BOM) contains EVERYTHING needed to build a setup. From the less memorable screw to the super expensive syringes used for reward delivery. Note This BOM is destined to the people from the Champalimaud Foundation (CF). Nonetheless, the goal is that people outside CF are also able to order everything and build the setup. Warning This BOM specifies the part numbers used by the lab for these setups, but not every component needs to be of a specific part number. The only things that need to be of a specific model are the Harp Devices, the Behavior Poke Port Breakout v1.1, the Poke Small v1.1 and the 12V Power Supplies. It's possible to use a different camera model, but please confirm that the camera can be used in Bonsai (although for some cameras the Bonsai workflow will probably need to be adapted). Harp This section contains the setup components that relate to the Harp devices somehow (except for the Camera that has a section of its own). Devices The Harp devices are assembled by the Hardware and Software Platform, so place an Agendo request to order them. Warning For people outside of the Champalimaud Foundation, it's possible to order the Harp devices in the Open Ephys Production Site. It's also possible to assemble the devices in-house with the right equipment since all of them are under an open source license. Some devices (like the Harp SyringePump) must be built in-house since they are not sold externally. Item Description Amount Observations Harp Behavior General-purpose Harp board 1 - Harp SoundCard Delivers the auditory stimulus 1 - Harp Audio Amplifiers Amplifies the auditory stimulus 2 1 Harp Audio Amplifier per speaker Harp ClockSynchronizer Synchronizes the timestamps from every Harp device 1 - Harp SyringePump Device used for reward delivery 2 - Harp CurrentDriver Drives/controls the LED/laser used in optogenetics 1 Optional Peripherals For this part of the BOM, a peripheral is considered to be anything that either interacts with the Harp devices or is needed make the different devices work and/or interact with each other. Item Description Amount Part Number Part of the Harp Device kit Agendo Observations Behavior Poke Port Breakout v1.1 Makes the ethernet ports pins from the Harp Behavior available 3 - ❌ ✔️ Connects to the Harp Behavior RJ-to-RJ cables - 3 IM1037 ❌ ❌ Connects the Harp Behavior to the Behavior Poke Port Breakout v1.1 Poke Small v1.1 Board with infrared beam to detect animal pokes 3 - ❌ ✔️ Connects to the Behavior Poke Port Breakout v1.1 3.5 mm-stereo-audio-jack-to-bare-wires - 3 BC-A3ML006F ❌ ❌ Connects the Poke Small v1.1 to the Behavior Poke Port Breakout v1.1 5 mm white/blue LED Placed on the box lid to give cues to the animal 1 - ❌ ❌ Connects to the LED0 pins of the Harp Behavior 3 mm green LED Placed in the central poke to give cues to the animal 1 - ❌ ❌ Connects to the LED1 pins of the Harp Behavior RCA-to-RCA cables - 2 - ✔️ ❌ Connects each Harp Audio Amplifier to the Harp SoundCard Speakers Deliver the auditory stimulus 2 TODO ❌ ❌ 1 speaker per Harp Audio Amplifier Banana Plug 4 mm Triple Contact Plug (Black or Red) - Pack of 10 units 4 557-0100 ❌ ❌ Connects the speakers to the Harp Audio Amplifiers 10 ml Glass Syringe Hamilton 1000 Series Gastight Syringes: Luer Lock Syringes, TLL Termination 2 Hamilton 81620 ❌ ❌ Used for the Harp SyringePump 4-way Stopcock Pack of 10 units 2 Masterflex 30600-04 ❌ ❌ Attaches to the end of the syringe (1 per Harp SyringePump) Nylon Male Luer Fitting Pack of 25 units 2 Masterflex MFLX45505-31 ❌ ❌ Attaches to one end of the stopcock (1 per Harp SyringePump) Nylon Female Luer Fitting Pack of 25 units 2 Masterflex 45502-00 ❌ ❌ Attaches to one end of the stopcock (1 per Harp SyringePump) Spouts Used in reward delivery 2 B14200 100 BULK ❌ ❌ Used in reward delivery. Glued to the physical lateral pokes Flexible Tubing Masterflex Tygon E-3603 Non-DEHP Tubing - 15 meters per unit 2 Masterflex 06407-71 ❌ ❌ Connects the spouts to one of the luer fittings (either male or female) Mini USB cable - 5/6* AK-300130-018-S ✔️ ❌ Connects the Harp boards to the computer Micro USB cable - 1 - ✔️ ❌ Used to upload sounds to the Harp SoundCard 3.5 mm-stereo-audio-jack-to-jack cable - 4/5* TODO ❌ ❌ Connects the Harp ClockSynchronizer to every other Harp device 12V Power Supply** AC/DC Wall Mount Adapter 12V 12W 9/10* VER12US120-JA ✔️*** ❌ 1 is used to power the LED strip that illuminates the behavior box, the remaining are used to power the Harp devices BNC-to-bare-wires conector** 1 810-4605 ❌ ❌ Connects the LED strip to the power supply * if the Harp CurrentDriver is being used ** the number of power supplies can be decreased as explained in the subsection below *** the power supply used to power the LED strip that illuminates the behavior box must be ordered separately Reducing the number of power supplies From the table above, it's pretty noticeable that a lot of power supplies are required, which takes up a lot of space and power outlets. It's possible to use the same power supply for different devices according to their characteristics. The devices can be grouped in the following way: Harp Behavior, Harp SoundCard and Harp CurrentDriver* V+ of the Harp Audio Amplifiers V- of the Harp Audio Amplifiers Both Harp SyringePumps From the list above, it's possible to switch the last line from the previous table with the lines from the table below. Item Description Amount Part Number Comes with Harp Device Agendo Observations 12V Power Supply AC/DC Wall Mount Adapter 12V 12W 5 VER12US120-JA ✔️*** ❌ 1 is used to power the LED strip that illuminates the behavior box, the remaining are used to power the Harp devices 2-to-1 cables for the 12V power supplies - 4/3* ❌ ✔️*** - 4-to-1 cables for the 12V power supplies - 0/1* ❌ ✔️*** - * if the Harp CurrentDriver is being used Mechanical Components This section contains the mechanical components of the setup that were developed and assembled in-house. Warning The files for the mechanical components are not currently available online and can't also be ordered, so people outside of the Champalimaud Foundation will have to develop and assemble their own. Item Description Amount Part Number Observations Behavior box - 1 - Made of acrylic Physical pokes - 3 - Preferably made of metal, but can also be 3D printed Speaker holder - 2 - Preferably made of metal, but can also be 3D printed Speaker holder pole Hollow alluminium tube 2 - - Box LED holder - 1 - 3D printed Camera This section contains the hardware needed to setup the camera and fix it to the lid of the behavior box. Click here to go to the camera configuration instructions. Item Description Amount Part Number Observations FLIR Camera 1 BFS-U3-16S2M-CS - Camera Lens 1 A4Z2812CS-MPIR - Camera USB cable USB-A to Micro-B Straight with Thumbscrews, 3 Meters 1 CEI USB3-1-1-2-3M This cable MUST be connected to a USB 3.0 port for performance Camera GPIO cable 6 Pin Female Straight Plug (Hirose HR10A-7P-6S) to Flying Leads, 3 Meters 1 CEI MVA-50-3-X-3 Connects to the Harp Behavior to trigger/monitor the camera frames Tripod Adapter BFS 30 mm BFLY CM3 Tripod Adapter 1 ACC-01-0003 Used to fix the camera to the Thorlabs poles in the behavior box Thorlabs 75mm post Ø12.7 mm Optical Post, SS, M4 Setscrew, M6 Tap, L = 75 mm 1 TR75/M Connects to the camera Thorlabs 150mm post Ø12.7 mm Optical Post, SS, M4 Setscrew, M6 Tap, L = 150 mm 1 TR150/M Fixes the camera structure to the box lid Thorlabs post clamp Rotating Clamp for Ø1/2\" Posts, 360° Continuously Adjustable, 5 mm Hex 1 SWC/M Fixes both Thorlabs posts to each other M6 Screw 15/16 mm 1 Fixes the longer post to the behavior box lid M6 Setscrew M6 x 1.0 Stainless Steel Setscrew, 16 mm Long, 25 Pack 1 SS6MS16 Connects the Thorlabs post to the Camera Others This section contains the remaining components needed for the setup. None of these components needs to be the exact model present on the list. It just corresponds to the models that have been used by the lab, but feel free to use different ones, as long as they work. Item Description Amount Part Number Observations Computer Mini PC Blackview MP100 Mini PC AMD Ryzen 7 5825U/16GB/512GB SSD 1 MP100(16+512)-BLACK - Screen - 1 - - HDMI cable - 1 - - Keyboard - 1 - - Mouse - 1 - - USB Hub HUB USB 3.0 TP-Link UH700 7 Ports 1 P004616 - Power extension with 6 electrical outlets Must be appropriate to \\(90 \\degree\\) plugs 1 To plug all of the power supplies in a setup KVM switch - Optional: useful in case one wants to use the same screen + mouse + keyboard kit in different computers 12V LED Strip 1 - Optogenetics Light Source - - - Optional"
  },
  "installation/calibrations.html": {
    "href": "installation/calibrations.html",
    "title": "Calibration Protocols | CDC.SoundLateralizationTask",
    "keywords": "Calibration Protocols Some of the hardware used in the task requires calibration. Since the calibration protocols are already written somewhere else, they can be found by clicking in the name of the protocols from the list below: Speaker Calibration Harp SyringePump Calibration Optogenetics LED Calibration (Not available yet)"
  },
  "installation/camera.html": {
    "href": "installation/camera.html",
    "title": "Camera Configuration | CDC.SoundLateralizationTask",
    "keywords": "Camera Configuration The setups need a camera to record the sessions and to monitor the task in real time. Since there's a need for the video to be recorded with some specific settings, this section contains instructions explaining how to configure PointGrey and FLIR cameras, which are the two types of cameras used. Desired Camera Settings As mentioned above, there is a need for the camera used in the setup to have some specifications, namely: a frame rate if 100 fps. the ability for the camera to send a pulse to the Harp Behavior every time a frame is being acquired. the ability to receive a pulse from the Harp Behavior when the animal is poking in the central port (by making one of the Behavior's digital outputs mimic the central port digital input). FLIR After installing the Spinnaker Drivers, connect the camera to the computer in an USB-3.0 port (connecting it to an USB-2.0 port limits the camera's capabilities, namely the frame rate). Firmware Update In order to access the state of the GPIO pins in the camera model BFS-U3-16S2M-CS, it's necessary that the firmware version 2207.2.1.0 is installed. Follow the instructions to verify the firmware version currently installed and install a different version in case it's necessary. Open the SpinView software. Select the camera to be configured. Click on the Update Device Firmware icon. After a new window pops up, click on its Browse button to choose the firmware file. Then, click on Start. Camera Configuration After having the correct firmware version installed, follow the instructions to configure the camera. Open the SpinView software. Select the camera to be configured. Click on the Optimize camera frame rate button (see the figure below). Click on Features. Click on the camera model name and then on Acquisition Control. Change the Acquisition Frame Rate parameter to the desired value. Confirm that the Acquisition Frame Rate Enable setting is checked. Change the Exposure Auto setting to Off and adjust the Exposure Time to the maximum possible so that the acquisition stays stably at 100 FPS. Close the Acquisition Control section and open the one named Digital IO Control. Select the Line 2 in the Line Selector parameter. Change the Line Mode to Output. Close the Digital IO Control section and open the one named User Set Control. Select an User Set Selector other than Default. Select the same User Set in the User Set Default parameter. Finally, click on the User Set Save button to save the current User Set. Optional: Click on Image Format to change the camera resolution and save the User Set again. Hardware Connections In order for the camera to be able to communicate with the Harp Behavior, it's necessary that the camera GPIO cable is connected. The following connections shall be made: Line 2 (pin 3) from the camera to the Behavior's DI3 pin. Line 0 (pin 2) from the camera to the Behavior's DO0 pin. Warning Don't forget to connect the camera's grounds (pins 5 and 6) to the Harp Behavior's GND pins! GPIO Cable Color Code The color code for the CEI MVA-50-3-X-3 camera GPIO cable is as follows: Pin Color 1 White 2 Brown 3 Green 4 Yellow 5 Gray 6 Pink H Shield PointGrey After installing the PointGrey Drivers, connect the camera to the computer in an USB-3.0 port (connecting it to an USB-2.0 port limits the camera's capabilities, namely the frame rate). Camera Configuration To configure a PointGrey camera follow the instructions below. Open the Point Grey FlyCap2 software. Select the camera to be configured and click on the Configure Selected button. In the Camera Settings tab, activate the On/Off checkbox from the FrameRate row and modify its value. Go to the Trigger / Strobe tab. Select the GPIO 0 to be an input and the GPIO 2 to be an output. Under Strobe Control, activate the Enable strobe for this pin checkbox for GPIO 2 and change the polarity to High. Go to the Advanced Camera Settings. In the Embedded Image Information, select the following fields: Timestamp Frame counter Strobe pattern GPIO pin state In the Memory Channels section, select a channel different from Default and click on Save to save the current configuration. Optional: Go to the Custom Video Modes and modify the camera resolution. Then save the camera configuration again. Hardware Connections Since the GPIO cable used by the PointGrey cameras is different from the one used by the FLIR cameras, the connections that need to be made between the camera and the Harp Behavior are also different. The connections should be made as follows: Pin 1 (I0) from the camera to the Behavior's DO0 pin. Pin 3 (IO2) from the camera do the Behavior's DI3 pin. Warning Don't forget to connect the camera's grounds (pins 5 and 6) to the Harp Behavior's GND pins! Note In the actual GPIO cable, the color of the cable corresponding to pin 5 might be purple instead of brown!"
  },
  "installation/configuration.html": {
    "href": "installation/configuration.html",
    "title": "Task Configuration | CDC.SoundLateralizationTask",
    "keywords": "Task Configuration After setting up both the hardware and the software needed for the task, there's just one more step to follow before start running the task: configuring it. Despite the task having a common structure, there are small variations to the task that can be achieved by tweaking inumerous configurations. Additionally, there's a need to input the calibration parameters for different pieces of hardware (speakers, SyringePumps, etc), which vary from setup to setup. Because of this, 3 different configuration files were created: animal.yml - This file contains task configurations that are not level-dependent and/or don't change throughout a session. Some of the parameters present in this file can be updated based on the previous session. Every animal has its own file ([animal_name].yml), so one can think of this file as some sort of ID. A description of each animal-specific setting can be found here. training.csv - Generally, the configurations that can be set in this file are task parameters that can change a lot during the training phase of an animal. Each line of the file is a different training level the animal has to progress to/through. It can be assumed that when the animal reaches the last level, it's ready for the \"actual\" experiment. A description of each training-specific setting can be found here. setup.csv - The settings that can be found in this file don't usually change the logic of the state machine, but are necessary for the setup to be working correctly (for example: equipment calibration parameters). Each line of this file is a different setup, so it's possible to have a single file stored in a drive containing the configurations for every setup and \"point\" to that file from the pre-configuration script (the application mentioned in the Software Installation page). A description of each setup-specific setting can be found here. Output Directory It is intended that all data from every animal is saved in a single directory (the output directory). Look at the following example of an output directory. output/ └──batch/ └── RAT0001/ └── 241001/ ├── cam_metadata_143123.csv ├── out_241001.csv ├── video_143123.avi ├── config/ │ ├── animal_143123.yml │ ├── setup_143123.csv │ └── training_143123.csv ├── events/ │ └── 143123 │ ├── behavior │ │ ├── behavior_0.bin │ │ ├── ... │ │ ├── behavior_122.bin │ │ └── device.yml │ ├── soundcard │ ├── left_pump │ ├── right_pump │ └── current_driver ├── plots/ │ ├── block_1.png │ ├── block_2.png │ └── block_3.png └── unparsed_out/ └── out_143123.json Inside the output directory there is a folder for every animal. Inside each animal's folder there is a folder for every session day, whose name is in the YYMMDD format, and inside every session day folder there are different files and folders types: out_YYMMDD.csv - this is the file that contains the final output structure for the session. This file is generated by a Python script that runs after Bonsai closes and that joins the different out_hhmmss.json files that can be found inside the unparsed_out directory. video_hhmmss.mp4 - this is the video recorded during the session. cam_metadata_hhmmss.csv - this is the file containing metadata directly saved from the camera for every frame recorded in video_hhmmss.mp4, so for each frame it's possible to know the camera timestamp, the frame ID and the state of the camera GPIO pins. config/- this directory contains a copy of the configuration files used in the session. The files are saved with the names: animal_hhmmss.yml, setup_hhmmss.json and training_hhmmss.csv. events/ - this directory contains a directory for each time Bonsai was initialized during the session named hhmmss/, which, in turn, has a directory for every Harp device (example: behavior/), which, in turn, has the binary files that contain every message sent by the device during the session ([device_name]_X.bin, where X is the register number) and the file containing the device.yml (the device metadata file). plots/- this directory is where the figures containing plots with some metrics regarding the animal's performance are saved. A figure per block is saved with name block_X.png (where X is the block number). unparsed_out/- this directory contains the raw output structure saved in (a fake) JSON directly from Bonsai and that will be convert into a single CSV file. The files saved follow the name out_hhmmss.json. Note In order to avoid losing or overwriting data in case there's a need to restart the workflow, most of the files and directories are saved with a suffix hhmmss corresponding to the time at which the workflow was started. Caution Don't store any other files in the output directory that are not generated automatically during a session and don't change the names of the files. Some operations - auto-update of configuration files, the numbers in the file names - depend on the files saved by the task's software and on the way they are saved. If there's a need to manually save other files related to the experiment, please do it somewhere else."
  },
  "installation/harp.html": {
    "href": "installation/harp.html",
    "title": "Harp Devices Setup | CDC.SoundLateralizationTask",
    "keywords": "Harp Devices Setup In order to use the Harp devices, the USB drivers and each devices's firmware must be installed. The installer for the USB drivers can be downloaded here. The Firmware section contains the instructions for installing each board's firmware. Note The Harp devices are usually delivered with the firmware already installed, but it may be useful to know how to install the firmware (for example: in case a new firmware version that solves a particular bug is released) Firmware For most devices, it's possible to install the corresponding firmware in two different ways. Firmware Download Go to the Harp Tech GitHub organization. Search for the board's repository. The name of the repository follows the format device.[board_name] (for example, device.behavior). Note: The Harp Audio Amplifier is not considered a device by itself, but a peripheral for the Harp SoundCard, so there isn't a firmware to be installed for this board. Click on Releases and search for the latest firmware release, whose name follows the format fw[firmware_version]-harp[harp_core_version] (for example, fw2.2-harp1.13). Download the latest version of the firmware binary corresponding to the hardware version of the board being used. The firmware binary name follows the format [board_name]-fw[firmware_version]-harp[harp_core_version]-hw[hardware_version]-ass[assembly_version].hex (for example, Behavior-fw3.2-harp1.13-hw2.0-ass0.hex). Note: For the Harp SoundCard, an additional firmware binary must be downloaded (the PIC32 firmware). Via Harp Convert to CSV GUI If the Harp Convert to CSV GUI is already installed, skip to step 3. If it's not already installed, but other Labview-based Harp board GUI is, skip to step 2 instead. Install the LabView Runtime and reboot the computer. Install the latest version of the Harp Convert to CSV GUI. Open the Harp Convert to CSV GUI. Click on Options and write \"bootloader\" in the List textbox. The Update Firmware window should appear. Choose the communication port (COMx) of the board whose firmware is going to be installed. Select the firmware binary to be installed and click on Update. Note: For the Harp SoundCard, during the installation of the firmware, select the PIC32 firmware when the application asks for the 32 bits device firmware. Via Bonsai As explained at the beginning of the section, it is not possible to install the Harp SoundCard firmware through this method. Skip to step 4 if the Bonsai environment is already installed. Caution It is not possible to use this method to install the firmware of the Harp SoundCard. Install Bonsai. Open Bonsai and click on Manage Packages. Install the following packages: Bonsai - Harp Library Bonsai - Harp Design Library Start a new workflow and add a Device node from the Harp package to it. Change the PortName property of the node to the communication port (COMx) of the board whose firmware is going to be installed. Double-click on the Device node. The Device Setup window should appear. Click on Bootloader>>. The Device Setup should expand. Click on Open... to select the firmware binary to be installed and then click on Update."
  },
  "installation/known_issues.html": {
    "href": "installation/known_issues.html",
    "title": "Known Issues | CDC.SoundLateralizationTask",
    "keywords": "Known Issues This project is still being actively developed and maintained. However, since this project is composed by a lot of small parts, it's normal that some issues are discovered and, by one reason or another, can't be addressed right away. Here's a list of known issues and how to deal with them for now. Harp SoundCard Crash It's not yet known when or why this crash happens, but it's known that it's an issue related to the Harp SoundCard firmware that makes the whole workflow explicitly crash. If the crash shown in the above figure occurs, unplug the Harp SoundCard and plug it again before restarting the workflow."
  },
  "installation/running.html": {
    "href": "installation/running.html",
    "title": "Running the Task | CDC.SoundLateralizationTask",
    "keywords": "Running the Task After having everything else setup, the only thing left is to run the task. To do it, follow the steps: In the task's directory, double-click on the ./Run.cmd script. Answer the initial prompts. Then, the bonsai workflow will open and the task will start with the GUI that allows the user to monitor the task in real-time and interact with some aspects of it. Initial prompts The goal of the initial prompts is to ease up launching the task without the need for the user to change the configuration files manually every session, specially for parameters that depend on the data saved in the previous session (like the trial number) and for repetitive operations (like choosing the animal the will perform the task). Below, you can find the prompts with a brief description of what it does and what answers are valid. Hello! :) Let me know who you are, please: This prompt only accepts letters and spaces and the first character must be a capital letter. Examples of valid answers are: John Doe or JD. Are you training an animal from which batch? This prompt accepts alphanumeric answers (with underscores, but the underscore can't be the first or last character). An example of a valid answer is: batch_name. Which furry friend is going to be joining us? This prompt accepts an animal ID, which is composed by 2 to 6 capital letters followed by 4 digits: Examples of valid answers are: ANIMAL0000 or RAT0055. Get parameters from last session (fixation time, reaction time, lnp_time and training_level)? [y/n] This prompt only accepts y and n as valid answers and only appears in case the animal input in 3. already started training previously. If the answer is affirmative, the values from fixation time, reaction time, LNP time and training level are read from the last trial done by the animal and written in the animal's animal.yml file. What is the training level the animal should stop progressing? (You can leave blank if the animal can progress until the last level) This prompt only accepts a number up to 2 digits. In addition to the prompts mentioned above, the startup script also looks at the data saved from the last session and updates the session number and the block number automatically."
  },
  "installation/software.html": {
    "href": "installation/software.html",
    "title": "Software Installation | CDC.SoundLateralizationTask",
    "keywords": "Software Installation The task's software is composed by the Bonsai workflow, which contains the task logic, and by small Python scripts that perform some operations at the beginning and at the end of the a session (namely, parsing both input and output files from/to more human readable formats). In order to facilitate the deployment of the project and with reproducibility in mind, the Bonsai workflow was developed inside a Bonsai environment and the Python scripts uses uv to create and maintain the Python virtual environment. To install the task's software, follow the steps: Download the source code from the latest project release and unzip it. Alternatively, clone the repository. Run ./Setup.cmd to install the Bonsai environment and the Python environment. An application window will appear which is used to specify the COM port each Harp device corresponds to and the paths to the configuration files and the output directory. Download the configuration files templates (animal.yml, setup.csv, training.csv) from the release mentioned in step 1 and place them wherever it's more convenient. After configuring every parameter present in the application, click on the Update Configuration button. The button will generate the ./src/config/config.yml file, which is a hard-coded file used by both the Python scripts and the Bonsai workflow. Close the application window. Caution Please don't move or delete the ./src/config/config.yml file! If, for some reason, any of the paths or COM ports need to be changed, re-run the Setup.cmd script. Additional Software Spinnaker Drivers In order to use the FLIR camera to record the sessions, the Spinnaker drivers MUST be installed as well. It's mandatory that the computer has the version 1.29.0.5 of the drivers installed, since the version supported by Spinnaker Bonsai Package. After opening the installer, follow the steps below: Click on Next. Then, accept the terms and click on Next again. Select Application Development and click on Next. Deselect GigE Driver and click on Next. Deselect the I will use GigE Cameras. checkbox and click on Next. Finally, click on Install. FFmpeg The task's code makes use of the FFmpeg software to save the video recordings in the disk, because it allows the video to be recorded with higher framerates, without loss of image quality and by making a better use of the computer's resources than the native VideoWriter Bonsai node. FFmpeg can be installed with WinGet by running the following command in the Terminal: winget install Gyan.FFmpeg"
  }
}