### YamlMime:ManagedReference
items:
- uid: Training.Level
  commentId: T:Training.Level
  id: Level
  parent: Training
  children:
  - Training.Level.#ctor
  - Training.Level.#ctor(Training.Level)
  - Training.Level.CriticalPerformance
  - Training.Level.Cues
  - Training.Level.FixationTime
  - Training.Level.Iti
  - Training.Level.LevelId
  - Training.Level.MaxAborts
  - Training.Level.MaxMt
  - Training.Level.MaxWait
  - Training.Level.PenaltyTimes
  - Training.Level.PrintMembers(System.Text.StringBuilder)
  - Training.Level.Process
  - Training.Level.Process``1(System.IObservable{``0})
  - Training.Level.ReactionTime
  - Training.Level.Sound
  - Training.Level.Speakers
  - Training.Level.ToString
  - Training.Level.TrialRepetition
  - Training.Level.TrialsPerBlock
  langs:
  - csharp
  - vb
  name: Level
  nameWithType: Level
  fullName: Training.Level
  type: Class
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: Level
    path: ../src/Extensions/Training.cs
    startLine: 660
  assemblies:
  - Extensions
  namespace: Training
  syntax:
    content: >-
      [Combinator]

      [WorkflowElementCategory(ElementCategory.Source)]

      public class Level
    content.vb: >-
      <Combinator>

      <WorkflowElementCategory(ElementCategory.Source)>

      Public Class Level
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: Bonsai.CombinatorAttribute
    ctor: Bonsai.CombinatorAttribute.#ctor
    arguments: []
  - type: Bonsai.WorkflowElementCategoryAttribute
    ctor: Bonsai.WorkflowElementCategoryAttribute.#ctor(Bonsai.ElementCategory)
    arguments:
    - type: Bonsai.ElementCategory
      value: 0
- uid: Training.Level.#ctor
  commentId: M:Training.Level.#ctor
  id: '#ctor'
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: Level()
  nameWithType: Level.Level()
  fullName: Training.Level.Level()
  type: Constructor
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: .ctor
    path: ../src/Extensions/Training.cs
    startLine: 694
  assemblies:
  - Extensions
  namespace: Training
  syntax:
    content: public Level()
    content.vb: Public Sub New()
  overload: Training.Level.#ctor*
  nameWithType.vb: Level.New()
  fullName.vb: Training.Level.New()
  name.vb: New()
- uid: Training.Level.#ctor(Training.Level)
  commentId: M:Training.Level.#ctor(Training.Level)
  id: '#ctor(Training.Level)'
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: Level(Level)
  nameWithType: Level.Level(Level)
  fullName: Training.Level.Level(Training.Level)
  type: Constructor
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: .ctor
    path: ../src/Extensions/Training.cs
    startLine: 698
  assemblies:
  - Extensions
  namespace: Training
  syntax:
    content: protected Level(Level other)
    parameters:
    - id: other
      type: Training.Level
    content.vb: Protected Sub New(other As Level)
  overload: Training.Level.#ctor*
  nameWithType.vb: Level.New(Level)
  fullName.vb: Training.Level.New(Training.Level)
  name.vb: New(Level)
- uid: Training.Level.LevelId
  commentId: P:Training.Level.LevelId
  id: LevelId
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: LevelId
  nameWithType: Level.LevelId
  fullName: Training.Level.LevelId
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: LevelId
    path: ../src/Extensions/Training.cs
    startLine: 719
  assemblies:
  - Extensions
  namespace: Training
  summary: The ID number of the training level.
  example: []
  syntax:
    content: >-
      [JsonProperty("level_id", Required = Required.Always)]

      [YamlMember(Alias = "level_id")]

      public int LevelId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <JsonProperty("level_id", Required:=Required.Always)>

      <YamlMember(Alias:="level_id")>

      Public Property LevelId As Integer
  overload: Training.Level.LevelId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: level_id
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: level_id
- uid: Training.Level.TrialsPerBlock
  commentId: P:Training.Level.TrialsPerBlock
  id: TrialsPerBlock
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: TrialsPerBlock
  nameWithType: Level.TrialsPerBlock
  fullName: Training.Level.TrialsPerBlock
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: TrialsPerBlock
    path: ../src/Extensions/Training.cs
    startLine: 737
  assemblies:
  - Extensions
  namespace: Training
  summary: The number of trials that a block of the current level has.
  example: []
  syntax:
    content: >-
      [JsonProperty("trials_per_block", Required = Required.Always)]

      [YamlMember(Alias = "trials_per_block")]

      public int TrialsPerBlock { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <JsonProperty("trials_per_block", Required:=Required.Always)>

      <YamlMember(Alias:="trials_per_block")>

      Public Property TrialsPerBlock As Integer
  overload: Training.Level.TrialsPerBlock*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: trials_per_block
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: trials_per_block
- uid: Training.Level.Sound
  commentId: P:Training.Level.Sound
  id: Sound
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: Sound
  nameWithType: Level.Sound
  fullName: Training.Level.Sound
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: Sound
    path: ../src/Extensions/Training.cs
    startLine: 755
  assemblies:
  - Extensions
  namespace: Training
  summary: Contains the sound-related parameters.
  example: []
  syntax:
    content: >-
      [JsonProperty("sound", Required = Required.Always)]

      [YamlMember(Alias = "sound")]

      public Sound Sound { get; set; }
    parameters: []
    return:
      type: Training.Sound
    content.vb: >-
      <JsonProperty("sound", Required:=Required.Always)>

      <YamlMember(Alias:="sound")>

      Public Property Sound As Sound
  overload: Training.Level.Sound*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: sound
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: sound
- uid: Training.Level.Iti
  commentId: P:Training.Level.Iti
  id: Iti
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: Iti
  nameWithType: Level.Iti
  fullName: Training.Level.Iti
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: Iti
    path: ../src/Extensions/Training.cs
    startLine: 774
  assemblies:
  - Extensions
  namespace: Training
  summary: Contains the parameters related to the Inter-trial Interval.
  example: []
  syntax:
    content: >-
      [JsonProperty("iti", Required = Required.Always)]

      [YamlMember(Alias = "iti")]

      public ITI Iti { get; set; }
    parameters: []
    return:
      type: Training.ITI
    content.vb: >-
      <JsonProperty("iti", Required:=Required.Always)>

      <YamlMember(Alias:="iti")>

      Public Property Iti As ITI
  overload: Training.Level.Iti*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: iti
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: iti
- uid: Training.Level.MaxWait
  commentId: P:Training.Level.MaxWait
  id: MaxWait
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: MaxWait
  nameWithType: Level.MaxWait
  fullName: Training.Level.MaxWait
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: MaxWait
    path: ../src/Extensions/Training.cs
    startLine: 793
  assemblies:
  - Extensions
  namespace: Training
  summary: The maximum allowed time to start the trial (s).
  example: []
  syntax:
    content: >-
      [JsonProperty("max_wait", Required = Required.Always)]

      [YamlMember(Alias = "max_wait")]

      public double MaxWait { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: >-
      <JsonProperty("max_wait", Required:=Required.Always)>

      <YamlMember(Alias:="max_wait")>

      Public Property MaxWait As Double
  overload: Training.Level.MaxWait*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: max_wait
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: max_wait
- uid: Training.Level.FixationTime
  commentId: P:Training.Level.FixationTime
  id: FixationTime
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: FixationTime
  nameWithType: Level.FixationTime
  fullName: Training.Level.FixationTime
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: FixationTime
    path: ../src/Extensions/Training.cs
    startLine: 811
  assemblies:
  - Extensions
  namespace: Training
  summary: Contains parameters related to the fixation time.
  example: []
  syntax:
    content: >-
      [JsonProperty("fixation_time", Required = Required.Always)]

      [YamlMember(Alias = "fixation_time")]

      public FixationTime FixationTime { get; set; }
    parameters: []
    return:
      type: Training.FixationTime
    content.vb: >-
      <JsonProperty("fixation_time", Required:=Required.Always)>

      <YamlMember(Alias:="fixation_time")>

      Public Property FixationTime As FixationTime
  overload: Training.Level.FixationTime*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: fixation_time
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: fixation_time
- uid: Training.Level.ReactionTime
  commentId: P:Training.Level.ReactionTime
  id: ReactionTime
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: ReactionTime
  nameWithType: Level.ReactionTime
  fullName: Training.Level.ReactionTime
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: ReactionTime
    path: ../src/Extensions/Training.cs
    startLine: 830
  assemblies:
  - Extensions
  namespace: Training
  summary: Contains parameters related to the reaction time.
  example: []
  syntax:
    content: >-
      [JsonProperty("reaction_time", Required = Required.Always)]

      [YamlMember(Alias = "reaction_time")]

      public ReactionTime ReactionTime { get; set; }
    parameters: []
    return:
      type: Training.ReactionTime
    content.vb: >-
      <JsonProperty("reaction_time", Required:=Required.Always)>

      <YamlMember(Alias:="reaction_time")>

      Public Property ReactionTime As ReactionTime
  overload: Training.Level.ReactionTime*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: reaction_time
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: reaction_time
- uid: Training.Level.MaxMt
  commentId: P:Training.Level.MaxMt
  id: MaxMt
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: MaxMt
  nameWithType: Level.MaxMt
  fullName: Training.Level.MaxMt
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: MaxMt
    path: ../src/Extensions/Training.cs
    startLine: 849
  assemblies:
  - Extensions
  namespace: Training
  summary: The maximum allowed movement time (s).
  example: []
  syntax:
    content: >-
      [JsonProperty("max_mt", Required = Required.Always)]

      [YamlMember(Alias = "max_mt")]

      public double MaxMt { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: >-
      <JsonProperty("max_mt", Required:=Required.Always)>

      <YamlMember(Alias:="max_mt")>

      Public Property MaxMt As Double
  overload: Training.Level.MaxMt*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: max_mt
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: max_mt
- uid: Training.Level.PenaltyTimes
  commentId: P:Training.Level.PenaltyTimes
  id: PenaltyTimes
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: PenaltyTimes
  nameWithType: Level.PenaltyTimes
  fullName: Training.Level.PenaltyTimes
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: PenaltyTimes
    path: ../src/Extensions/Training.cs
    startLine: 867
  assemblies:
  - Extensions
  namespace: Training
  summary: Contains the penalty times for different ocasions.
  example: []
  syntax:
    content: >-
      [JsonProperty("penalty_times", Required = Required.Always)]

      [YamlMember(Alias = "penalty_times")]

      public PenaltyTimes PenaltyTimes { get; set; }
    parameters: []
    return:
      type: Training.PenaltyTimes
    content.vb: >-
      <JsonProperty("penalty_times", Required:=Required.Always)>

      <YamlMember(Alias:="penalty_times")>

      Public Property PenaltyTimes As PenaltyTimes
  overload: Training.Level.PenaltyTimes*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: penalty_times
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: penalty_times
- uid: Training.Level.CriticalPerformance
  commentId: P:Training.Level.CriticalPerformance
  id: CriticalPerformance
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: CriticalPerformance
  nameWithType: Level.CriticalPerformance
  fullName: Training.Level.CriticalPerformance
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: CriticalPerformance
    path: ../src/Extensions/Training.cs
    startLine: 886
  assemblies:
  - Extensions
  namespace: Training
  summary: Contains the critical performance for the animal to progress to the next level and whether this feature is used or not.
  example: []
  syntax:
    content: >-
      [JsonProperty("critical_performance", Required = Required.Always)]

      [YamlMember(Alias = "critical_performance")]

      public CriticalPerformance CriticalPerformance { get; set; }
    parameters: []
    return:
      type: Training.CriticalPerformance
    content.vb: >-
      <JsonProperty("critical_performance", Required:=Required.Always)>

      <YamlMember(Alias:="critical_performance")>

      Public Property CriticalPerformance As CriticalPerformance
  overload: Training.Level.CriticalPerformance*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: critical_performance
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: critical_performance
- uid: Training.Level.MaxAborts
  commentId: P:Training.Level.MaxAborts
  id: MaxAborts
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: MaxAborts
  nameWithType: Level.MaxAborts
  fullName: Training.Level.MaxAborts
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: MaxAborts
    path: ../src/Extensions/Training.cs
    startLine: 906
  assemblies:
  - Extensions
  namespace: Training
  summary: NOT IMPLEMENTED!!
  example: []
  syntax:
    content: >-
      [JsonProperty("max_aborts", Required = Required.Always)]

      [YamlMember(Alias = "max_aborts")]

      public int MaxAborts { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <JsonProperty("max_aborts", Required:=Required.Always)>

      <YamlMember(Alias:="max_aborts")>

      Public Property MaxAborts As Integer
  overload: Training.Level.MaxAborts*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: max_aborts
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: max_aborts
- uid: Training.Level.TrialRepetition
  commentId: P:Training.Level.TrialRepetition
  id: TrialRepetition
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: TrialRepetition
  nameWithType: Level.TrialRepetition
  fullName: Training.Level.TrialRepetition
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: TrialRepetition
    path: ../src/Extensions/Training.cs
    startLine: 924
  assemblies:
  - Extensions
  namespace: Training
  summary: Contains the conditions for which a certain trial should be repeated.
  example: []
  syntax:
    content: >-
      [JsonProperty("trial_repetition", Required = Required.Always)]

      [YamlMember(Alias = "trial_repetition")]

      public TrialRepetition TrialRepetition { get; set; }
    parameters: []
    return:
      type: Training.TrialRepetition
    content.vb: >-
      <JsonProperty("trial_repetition", Required:=Required.Always)>

      <YamlMember(Alias:="trial_repetition")>

      Public Property TrialRepetition As TrialRepetition
  overload: Training.Level.TrialRepetition*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: trial_repetition
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: trial_repetition
- uid: Training.Level.Speakers
  commentId: P:Training.Level.Speakers
  id: Speakers
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: Speakers
  nameWithType: Level.Speakers
  fullName: Training.Level.Speakers
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: Speakers
    path: ../src/Extensions/Training.cs
    startLine: 943
  assemblies:
  - Extensions
  namespace: Training
  summary: Indicates whether the animal is using headphones (true) or box speakers (false). At the moment, this parameter doesn't modify the behavior of the task. Perhaps in the future, it might be possible to input the calibration curves of both the box speakers and the headphones so that this parameter switches to the correct calibration curves.
  example: []
  syntax:
    content: >-
      [JsonProperty("speakers", Required = Required.Always)]

      [YamlMember(Alias = "speakers")]

      public bool Speakers { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonProperty("speakers", Required:=Required.Always)>

      <YamlMember(Alias:="speakers")>

      Public Property Speakers As Boolean
  overload: Training.Level.Speakers*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: speakers
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: speakers
- uid: Training.Level.Cues
  commentId: P:Training.Level.Cues
  id: Cues
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: Cues
  nameWithType: Level.Cues
  fullName: Training.Level.Cues
  type: Property
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: Cues
    path: ../src/Extensions/Training.cs
    startLine: 961
  assemblies:
  - Extensions
  namespace: Training
  summary: The parameters that control the use (or not) of visual cues during the task.
  example: []
  syntax:
    content: >-
      [JsonProperty("cues", Required = Required.Always)]

      [YamlMember(Alias = "cues")]

      public Cues Cues { get; set; }
    parameters: []
    return:
      type: Training.Cues
    content.vb: >-
      <JsonProperty("cues", Required:=Required.Always)>

      <YamlMember(Alias:="cues")>

      Public Property Cues As Cues
  overload: Training.Level.Cues*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: cues
    namedArguments:
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: cues
- uid: Training.Level.Process
  commentId: M:Training.Level.Process
  id: Process
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: Process()
  nameWithType: Level.Process()
  fullName: Training.Level.Process()
  type: Method
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: Process
    path: ../src/Extensions/Training.cs
    startLine: 977
  assemblies:
  - Extensions
  namespace: Training
  syntax:
    content: public IObservable<Level> Process()
    return:
      type: System.IObservable{Training.Level}
    content.vb: Public Function Process() As IObservable(Of Level)
  overload: Training.Level.Process*
- uid: Training.Level.Process``1(System.IObservable{``0})
  commentId: M:Training.Level.Process``1(System.IObservable{``0})
  id: Process``1(System.IObservable{``0})
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: Process<TSource>(IObservable<TSource>)
  nameWithType: Level.Process<TSource>(IObservable<TSource>)
  fullName: Training.Level.Process<TSource>(System.IObservable<TSource>)
  type: Method
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: Process
    path: ../src/Extensions/Training.cs
    startLine: 982
  assemblies:
  - Extensions
  namespace: Training
  syntax:
    content: public IObservable<Level> Process<TSource>(IObservable<TSource> source)
    parameters:
    - id: source
      type: System.IObservable{{TSource}}
    typeParameters:
    - id: TSource
    return:
      type: System.IObservable{Training.Level}
    content.vb: Public Function Process(Of TSource)(source As IObservable(Of TSource)) As IObservable(Of Level)
  overload: Training.Level.Process*
  nameWithType.vb: Level.Process(Of TSource)(IObservable(Of TSource))
  fullName.vb: Training.Level.Process(Of TSource)(System.IObservable(Of TSource))
  name.vb: Process(Of TSource)(IObservable(Of TSource))
- uid: Training.Level.PrintMembers(System.Text.StringBuilder)
  commentId: M:Training.Level.PrintMembers(System.Text.StringBuilder)
  id: PrintMembers(System.Text.StringBuilder)
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: PrintMembers(StringBuilder)
  nameWithType: Level.PrintMembers(StringBuilder)
  fullName: Training.Level.PrintMembers(System.Text.StringBuilder)
  type: Method
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: PrintMembers
    path: ../src/Extensions/Training.cs
    startLine: 987
  assemblies:
  - Extensions
  namespace: Training
  syntax:
    content: protected virtual bool PrintMembers(StringBuilder stringBuilder)
    parameters:
    - id: stringBuilder
      type: System.Text.StringBuilder
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function PrintMembers(stringBuilder As StringBuilder) As Boolean
  overload: Training.Level.PrintMembers*
- uid: Training.Level.ToString
  commentId: M:Training.Level.ToString
  id: ToString
  parent: Training.Level
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Level.ToString()
  fullName: Training.Level.ToString()
  type: Method
  source:
    remote:
      path: src/Extensions/Training.cs
      branch: io_files_rework
      repo: git@github.com:fchampalimaud/CDC.SoundLateralizationTask.git
    id: ToString
    path: ../src/Extensions/Training.cs
    startLine: 1006
  assemblies:
  - Extensions
  namespace: Training
  summary: Returns a string that represents the current object.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string that represents the current object.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: Training.Level.ToString*
references:
- uid: Training
  commentId: N:Training
  href: Training.html
  name: Training
  nameWithType: Training
  fullName: Training
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Training.Level.#ctor*
  commentId: Overload:Training.Level.#ctor
  href: Training.Level.html#Training_Level__ctor
  name: Level
  nameWithType: Level.Level
  fullName: Training.Level.Level
  nameWithType.vb: Level.New
  fullName.vb: Training.Level.New
  name.vb: New
- uid: Training.Level
  commentId: T:Training.Level
  parent: Training
  href: Training.Level.html
  name: Level
  nameWithType: Level
  fullName: Training.Level
- uid: Training.Level.LevelId*
  commentId: Overload:Training.Level.LevelId
  href: Training.Level.html#Training_Level_LevelId
  name: LevelId
  nameWithType: Level.LevelId
  fullName: Training.Level.LevelId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Training.Level.TrialsPerBlock*
  commentId: Overload:Training.Level.TrialsPerBlock
  href: Training.Level.html#Training_Level_TrialsPerBlock
  name: TrialsPerBlock
  nameWithType: Level.TrialsPerBlock
  fullName: Training.Level.TrialsPerBlock
- uid: Training.Level.Sound*
  commentId: Overload:Training.Level.Sound
  href: Training.Level.html#Training_Level_Sound
  name: Sound
  nameWithType: Level.Sound
  fullName: Training.Level.Sound
- uid: Training.Sound
  commentId: T:Training.Sound
  parent: Training
  href: Training.Sound.html
  name: Sound
  nameWithType: Sound
  fullName: Training.Sound
- uid: Training.Level.Iti*
  commentId: Overload:Training.Level.Iti
  href: Training.Level.html#Training_Level_Iti
  name: Iti
  nameWithType: Level.Iti
  fullName: Training.Level.Iti
- uid: Training.ITI
  commentId: T:Training.ITI
  parent: Training
  href: Training.ITI.html
  name: ITI
  nameWithType: ITI
  fullName: Training.ITI
- uid: Training.Level.MaxWait*
  commentId: Overload:Training.Level.MaxWait
  href: Training.Level.html#Training_Level_MaxWait
  name: MaxWait
  nameWithType: Level.MaxWait
  fullName: Training.Level.MaxWait
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: Training.Level.FixationTime*
  commentId: Overload:Training.Level.FixationTime
  href: Training.Level.html#Training_Level_FixationTime
  name: FixationTime
  nameWithType: Level.FixationTime
  fullName: Training.Level.FixationTime
- uid: Training.FixationTime
  commentId: T:Training.FixationTime
  parent: Training
  href: Training.FixationTime.html
  name: FixationTime
  nameWithType: FixationTime
  fullName: Training.FixationTime
- uid: Training.Level.ReactionTime*
  commentId: Overload:Training.Level.ReactionTime
  href: Training.Level.html#Training_Level_ReactionTime
  name: ReactionTime
  nameWithType: Level.ReactionTime
  fullName: Training.Level.ReactionTime
- uid: Training.ReactionTime
  commentId: T:Training.ReactionTime
  parent: Training
  href: Training.ReactionTime.html
  name: ReactionTime
  nameWithType: ReactionTime
  fullName: Training.ReactionTime
- uid: Training.Level.MaxMt*
  commentId: Overload:Training.Level.MaxMt
  href: Training.Level.html#Training_Level_MaxMt
  name: MaxMt
  nameWithType: Level.MaxMt
  fullName: Training.Level.MaxMt
- uid: Training.Level.PenaltyTimes*
  commentId: Overload:Training.Level.PenaltyTimes
  href: Training.Level.html#Training_Level_PenaltyTimes
  name: PenaltyTimes
  nameWithType: Level.PenaltyTimes
  fullName: Training.Level.PenaltyTimes
- uid: Training.PenaltyTimes
  commentId: T:Training.PenaltyTimes
  parent: Training
  href: Training.PenaltyTimes.html
  name: PenaltyTimes
  nameWithType: PenaltyTimes
  fullName: Training.PenaltyTimes
- uid: Training.Level.CriticalPerformance*
  commentId: Overload:Training.Level.CriticalPerformance
  href: Training.Level.html#Training_Level_CriticalPerformance
  name: CriticalPerformance
  nameWithType: Level.CriticalPerformance
  fullName: Training.Level.CriticalPerformance
- uid: Training.CriticalPerformance
  commentId: T:Training.CriticalPerformance
  parent: Training
  href: Training.CriticalPerformance.html
  name: CriticalPerformance
  nameWithType: CriticalPerformance
  fullName: Training.CriticalPerformance
- uid: Training.Level.MaxAborts*
  commentId: Overload:Training.Level.MaxAborts
  href: Training.Level.html#Training_Level_MaxAborts
  name: MaxAborts
  nameWithType: Level.MaxAborts
  fullName: Training.Level.MaxAborts
- uid: Training.Level.TrialRepetition*
  commentId: Overload:Training.Level.TrialRepetition
  href: Training.Level.html#Training_Level_TrialRepetition
  name: TrialRepetition
  nameWithType: Level.TrialRepetition
  fullName: Training.Level.TrialRepetition
- uid: Training.TrialRepetition
  commentId: T:Training.TrialRepetition
  parent: Training
  href: Training.TrialRepetition.html
  name: TrialRepetition
  nameWithType: TrialRepetition
  fullName: Training.TrialRepetition
- uid: Training.Level.Speakers*
  commentId: Overload:Training.Level.Speakers
  href: Training.Level.html#Training_Level_Speakers
  name: Speakers
  nameWithType: Level.Speakers
  fullName: Training.Level.Speakers
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Training.Level.Cues*
  commentId: Overload:Training.Level.Cues
  href: Training.Level.html#Training_Level_Cues
  name: Cues
  nameWithType: Level.Cues
  fullName: Training.Level.Cues
- uid: Training.Cues
  commentId: T:Training.Cues
  parent: Training
  href: Training.Cues.html
  name: Cues
  nameWithType: Cues
  fullName: Training.Cues
- uid: Training.Level.Process*
  commentId: Overload:Training.Level.Process
  href: Training.Level.html#Training_Level_Process
  name: Process
  nameWithType: Level.Process
  fullName: Training.Level.Process
- uid: System.IObservable{Training.Level}
  commentId: T:System.IObservable{Training.Level}
  parent: System
  definition: System.IObservable`1
  href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  name: IObservable<Level>
  nameWithType: IObservable<Level>
  fullName: System.IObservable<Training.Level>
  nameWithType.vb: IObservable(Of Level)
  fullName.vb: System.IObservable(Of Training.Level)
  name.vb: IObservable(Of Level)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  - name: <
  - uid: Training.Level
    name: Level
    href: Training.Level.html
  - name: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Training.Level
    name: Level
    href: Training.Level.html
  - name: )
- uid: System.IObservable`1
  commentId: T:System.IObservable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IObservable{{TSource}}
  commentId: T:System.IObservable{``0}
  parent: System
  definition: System.IObservable`1
  href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  name: IObservable<TSource>
  nameWithType: IObservable<TSource>
  fullName: System.IObservable<TSource>
  nameWithType.vb: IObservable(Of TSource)
  fullName.vb: System.IObservable(Of TSource)
  name.vb: IObservable(Of TSource)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iobservable-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: Training.Level.PrintMembers*
  commentId: Overload:Training.Level.PrintMembers
  href: Training.Level.html#Training_Level_PrintMembers_System_Text_StringBuilder_
  name: PrintMembers
  nameWithType: Level.PrintMembers
  fullName: Training.Level.PrintMembers
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.text.stringbuilder
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Text
    name: Text
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Training.Level.ToString*
  commentId: Overload:Training.Level.ToString
  href: Training.Level.html#Training_Level_ToString
  name: ToString
  nameWithType: Level.ToString
  fullName: Training.Level.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
